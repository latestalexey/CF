//Это серверный общий модуль

//////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ И ПЕРЕСЧЕТА ДЕРЕВА ЗНАЧЕНИЙ
//
// Описание.
// Для отображения бюджета доходов и расходов используется
// дерево значений, поскольку справочник Статьи доходов и расходов
// иерархический. Одни и те же процедуры используются для   
// отображения дерева в форме документа БюджетГод
// и для печати бюджета - при печати формируется программное 
// дерево, для получения печатной формы аналогичной документу.


//03 07 12
//Создает временную таблицу со статьями, которые надо исключить из бюджета
//эти статьи находятся в РС "ИсключаемыеСтатьи"
Функция ВременнаяТаблицаИсключаемыеСтатьи(Запрос)
	ТекстЗапроса  = "ВЫБРАТЬ
	                |	ИсключаемыеСтатьи.СтатьяДР КАК СтатьяДР
	                |ПОМЕСТИТЬ ИсклСтатьи
	                |ИЗ
	                |	РегистрСведений.ИсключаемыеСтатьи КАК ИсключаемыеСтатьи
	                |ГДЕ
	                |	ИсключаемыеСтатьи.ВариантБюджета = &БюджетПлан
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	СтатьяДР
	                |";
					
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецФункции

//26 06 12
Функция ВременнаяТаблицаФиктивныйПлан(Запрос)
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	NULL КАК СтатьяДР,
	|	0 КАК План1,
	|	0 КАК План2,
	|	0 КАК План3,
	|	0 КАК План4,
	|	0 КАК План5,
	|	0 КАК План6,
	|	0 КАК План7,
	|	0 КАК План8,
	|	0 КАК План9,
	|	0 КАК План10,
	|	0 КАК План11,
	|	0 КАК План12,
	|	0 КАК План13";
	
	Запрос.Текст = ТекстЗапроса+"
	|ПОМЕСТИТЬ ВремТаблПлан";
	
	Запрос.Выполнить();
КонецФункции

//28 03 12
//создает временную таблицу с плановыми оборотами по бюджету
//Параметры
//	Запрос - основной запрос для заполнения дерева бюджета
Функция ВременнаяТаблицаПлан(Запрос)
	//план задается целыми числами, без дробей
	ТекстЗапроса = "ВЫБРАТЬ
	               |	БДР.СтатьяДоходовРасходов КАК СтатьяДР,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 1
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План1,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 2
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План2,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 3
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План3,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 4
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План4,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 5
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План5,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 6
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План6,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 7
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План7,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 8
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План8,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 9
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План9,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 10
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План10,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 11
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План11,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 12
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК План12,
	               |	СУММА(БДР.СуммаПлан) КАК План13
	               |ПОМЕСТИТЬ ВремТаблПланПредв
	               |ИЗ
	               |	РегистрНакопления.БДР КАК БДР
	               |ГДЕ
	               |	БДР.Регистратор = &БюджетПлан
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БДР.СтатьяДоходовРасходов,
	               |	БДР.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяДР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремТаблПланПредв.СтатьяДР,
	               |	СУММА(ВремТаблПланПредв.План1) КАК План1,
	               |	СУММА(ВремТаблПланПредв.План2) КАК План2,
	               |	СУММА(ВремТаблПланПредв.План3) КАК План3,
	               |	СУММА(ВремТаблПланПредв.План4) КАК План4,
	               |	СУММА(ВремТаблПланПредв.План5) КАК План5,
	               |	СУММА(ВремТаблПланПредв.План6) КАК План6,
	               |	СУММА(ВремТаблПланПредв.План7) КАК План7,
	               |	СУММА(ВремТаблПланПредв.План8) КАК План8,
	               |	СУММА(ВремТаблПланПредв.План9) КАК План9,
	               |	СУММА(ВремТаблПланПредв.План10) КАК План10,
	               |	СУММА(ВремТаблПланПредв.План11) КАК План11,
	               |	СУММА(ВремТаблПланПредв.План12) КАК План12,
	               |	СУММА(ВремТаблПланПредв.План13) КАК План13
	               |ПОМЕСТИТЬ ВремТаблПлан
	               |ИЗ
	               |	ВремТаблПланПредв КАК ВремТаблПланПредв
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВремТаблПланПредв.СтатьяДР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяДР";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
		
КонецФункции

//28 03 12
//создает временную таблицу с фактическими оборотами по бюджету
//Параметры
//	Запрос - основной запрос для заполнения дерева бюджета
Функция ВременнаяТаблицаФакт(Запрос)
	//не надо округлять факт, а то в дереве на форме итог сильно отличается от реального из-за округлений
	ТекстЗапроса = "ВЫБРАТЬ
	               |	БДРОбороты.СтатьяДоходовРасходов КАК СтатьяДР,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 1
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт1,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 2
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт2,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 3
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт3,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 4
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт4,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 5
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт5,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 6
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт6,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 7
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт7,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 8
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт8,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 9
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт9,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 10
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт10,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 11
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт11,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 12
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт12
	               |ПОМЕСТИТЬ ВремТаблФактПредв
	               |ИЗ
	               |	РегистрНакопления.БДР.Обороты(&НачПериода, &КонПериода, Месяц, ) КАК БДРОбороты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяДР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремТаблФактПредв.СтатьяДР,
	               |	СУММА(ВремТаблФактПредв.Факт1) КАК Факт1,
	               |	СУММА(ВремТаблФактПредв.Факт2) КАК Факт2,
	               |	СУММА(ВремТаблФактПредв.Факт3) КАК Факт3,
	               |	СУММА(ВремТаблФактПредв.Факт4) КАК Факт4,
	               |	СУММА(ВремТаблФактПредв.Факт5) КАК Факт5,
	               |	СУММА(ВремТаблФактПредв.Факт6) КАК Факт6,
	               |	СУММА(ВремТаблФактПредв.Факт7) КАК Факт7,
	               |	СУММА(ВремТаблФактПредв.Факт8) КАК Факт8,
	               |	СУММА(ВремТаблФактПредв.Факт9) КАК Факт9,
	               |	СУММА(ВремТаблФактПредв.Факт10) КАК Факт10,
	               |	СУММА(ВремТаблФактПредв.Факт11) КАК Факт11,
	               |	СУММА(ВремТаблФактПредв.Факт12) КАК Факт12,
	               |	СУММА(ВремТаблФактПредв.Факт1 + ВремТаблФактПредв.Факт2 + ВремТаблФактПредв.Факт3 + ВремТаблФактПредв.Факт4 + ВремТаблФактПредв.Факт5 + ВремТаблФактПредв.Факт6 + ВремТаблФактПредв.Факт7 + ВремТаблФактПредв.Факт8 + ВремТаблФактПредв.Факт9 + ВремТаблФактПредв.Факт10 + ВремТаблФактПредв.Факт11 + ВремТаблФактПредв.Факт12) КАК Факт13
	               |ПОМЕСТИТЬ ВремТаблФакт
	               |ИЗ
	               |	ВремТаблФактПредв КАК ВремТаблФактПредв
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВремТаблФактПредв.СтатьяДР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяДР";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
		
КонецФункции

//17 09 12
//создает временную таблицу с плановыми оборотами по бюджету БюджетФакт для сравнения его с бюджетом БюджетПлан
//Параметры
//	Запрос - основной запрос для заполнения дерева бюджета
Функция ВременнаяТаблицаБюджетФакт(Запрос)
	//не надо округлять факт, а то в дереве на форме итог сильно отличается от реального из-за округлений
	ТекстЗапроса = "ВЫБРАТЬ
	               |	БДР.СтатьяДоходовРасходов КАК СтатьяДР,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 1
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт1,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 2
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт2,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 3
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт3,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 4
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт4,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 5
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт5,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 6
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт6,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 7
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт7,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 8
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт8,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 9
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт9,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 10
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт10,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 11
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт11,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДР.Период) = 12
	               |			ТОГДА СУММА(БДР.СуммаПлан)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт12,
	               |	СУММА(БДР.СуммаПлан) КАК Факт13
	               |ПОМЕСТИТЬ ВремТаблФактПредв
	               |ИЗ
	               |	РегистрНакопления.БДР КАК БДР
	               |ГДЕ
	               |	БДР.Регистратор = &БюджетФакт
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БДР.СтатьяДоходовРасходов,
	               |	БДР.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяДР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремТаблФактПредв.СтатьяДР,
	               |	СУММА(ВремТаблФактПредв.Факт1) КАК Факт1,
	               |	СУММА(ВремТаблФактПредв.Факт2) КАК Факт2,
	               |	СУММА(ВремТаблФактПредв.Факт3) КАК Факт3,
	               |	СУММА(ВремТаблФактПредв.Факт4) КАК Факт4,
	               |	СУММА(ВремТаблФактПредв.Факт5) КАК Факт5,
	               |	СУММА(ВремТаблФактПредв.Факт6) КАК Факт6,
	               |	СУММА(ВремТаблФактПредв.Факт7) КАК Факт7,
	               |	СУММА(ВремТаблФактПредв.Факт8) КАК Факт8,
	               |	СУММА(ВремТаблФактПредв.Факт9) КАК Факт9,
	               |	СУММА(ВремТаблФактПредв.Факт10) КАК Факт10,
	               |	СУММА(ВремТаблФактПредв.Факт11) КАК Факт11,
	               |	СУММА(ВремТаблФактПредв.Факт12) КАК Факт12,
	               |	СУММА(ВремТаблФактПредв.Факт13) КАК Факт13
	               |ПОМЕСТИТЬ ВремТаблФакт
	               |ИЗ
	               |	ВремТаблФактПредв КАК ВремТаблФактПредв
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВремТаблФактПредв.СтатьяДР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяДР";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецФункции

//28 03 12
Функция ВременнаяТаблицаПланФакт(Запрос)
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВремТаблПлан.СтатьяДР КАК СтатьяДР,
	               |	ВремТаблПлан.План1 КАК План1,
	               |	0 КАК Факт1,
	               |	ВремТаблПлан.План2 КАК План2,
	               |	0 КАК Факт2,
	               |	ВремТаблПлан.План3 КАК План3,
	               |	0 КАК Факт3,
	               |	ВремТаблПлан.План4 КАК План4,
	               |	0 КАК Факт4,
	               |	ВремТаблПлан.План5 КАК План5,
	               |	0 КАК Факт5,
	               |	ВремТаблПлан.План6 КАК План6,
	               |	0 КАК Факт6,
	               |	ВремТаблПлан.План7 КАК План7,
	               |	0 КАК Факт7,
	               |	ВремТаблПлан.План8 КАК План8,
	               |	0 КАК Факт8,
	               |	ВремТаблПлан.План9 КАК План9,
	               |	0 КАК Факт9,
	               |	ВремТаблПлан.План10 КАК План10,
	               |	0 КАК Факт10,
	               |	ВремТаблПлан.План11 КАК План11,
	               |	0 КАК Факт11,
	               |	ВремТаблПлан.План12 КАК План12,
	               |	0 КАК Факт12,
	               |	ВремТаблПлан.План13 КАК План13,
	               |	0 КАК Факт13
	               |ПОМЕСТИТЬ ВремТаблПланФакт
	               |ИЗ
	               |	ВремТаблПлан КАК ВремТаблПлан
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВремТаблФакт.СтатьяДР,
	               |	0,
	               |	ВремТаблФакт.Факт1,
	               |	0,
	               |	ВремТаблФакт.Факт2,
	               |	0,
	               |	ВремТаблФакт.Факт3,
	               |	0,
	               |	ВремТаблФакт.Факт4,
	               |	0,
	               |	ВремТаблФакт.Факт5,
	               |	0,
	               |	ВремТаблФакт.Факт6,
	               |	0,
	               |	ВремТаблФакт.Факт7,
	               |	0,
	               |	ВремТаблФакт.Факт8,
	               |	0,
	               |	ВремТаблФакт.Факт9,
	               |	0,
	               |	ВремТаблФакт.Факт10,
	               |	0,
	               |	ВремТаблФакт.Факт11,
	               |	0,
	               |	ВремТаблФакт.Факт12,
	               |	0,
	               |	ВремТаблФакт.Факт13
	               |ИЗ
	               |	ВремТаблФакт КАК ВремТаблФакт
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяДР";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
		
КонецФункции

//возвращает текст запроса для заполнения дерева бюджета
//Параметры
//	Запрос - объект Запрос
//	НадоПлан - тип Булево, если Истина - вызов функции идет из документа
//БюджетГод для заполнения таблицы бюджета на форме
//если Ложь - вызов идет из отчета СтруктураСтатьи для заполнения
//дерева бюджета только с фактом для отображения структуры
//оборотов по выбранной в отборе отчета группы статей ДР.
//	БюджетФакт - документ, если не пусто - вместо факта берем план из этого бюджета
Функция ПолучитьТекстЗапроса(Запрос, НадоПлан, БюджетФакт=Неопределено)
	
	Если НадоПлан Тогда
		//если надо выводить план, то это значит что вызов функции произошел
		//из документа БюджетГод, поэтому надо исключить ненужные 
		//статьи, которые находятся в РС "ИсключаемыеСтатьи"
		//Сделаем врем таблицу с ненужными статьями
		ВременнаяТаблицаИсключаемыеСтатьи(Запрос);
		
		ВременнаяТаблицаПлан(Запрос); //если заполняется по документу
	Иначе
		ВременнаяТаблицаФиктивныйПлан(Запрос); //заполняется программное дерево только фактом - в план пишем нули
	КонецЕсли;
	
	Если НЕ БюджетФакт = Документы.БюджетГод.ПустаяСсылка() И Не БюджетФакт = Неопределено Тогда
		//если документ Бюджет передан сюда
		ВременнаяТаблицаБюджетФакт(Запрос);
	Иначе
		ВременнаяТаблицаФакт(Запрос);
	КонецЕсли;
	
	ВременнаяТаблицаПланФакт(Запрос);
	
	//использование функции ЕстьNULL - обязательно!
	//если не использовать - в дереве будут поля NULL
	ТекстЗапроса  = "ВЫБРАТЬ
	                |	СтатьиДоходовРасходов.Ссылка КАК СтатьяДР,
					|	СтатьиДоходовРасходов.Приоритет КАК Приоритет,
					|	СтатьиДоходовРасходов.ЗнакДвижения КАК ПриходРасход,
					|	СтатьиДоходовРасходов.ЭтоГруппа,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План1, 0)) КАК План1,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт1, 0)) КАК Факт1,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План2, 0)) КАК План2,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт2, 0)) КАК Факт2,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План3, 0)) КАК План3,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт3, 0)) КАК Факт3,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План4, 0)) КАК План4,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт4, 0)) КАК Факт4,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План5, 0)) КАК План5,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт5, 0)) КАК Факт5,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План6, 0)) КАК План6,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт6, 0)) КАК Факт6,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План7, 0)) КАК План7,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт7, 0)) КАК Факт7,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План8, 0)) КАК План8,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт8, 0)) КАК Факт8,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План9, 0)) КАК План9,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт9, 0)) КАК Факт9,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План10, 0)) КАК План10,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт10, 0)) КАК Факт10,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План11, 0)) КАК План11,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт11, 0)) КАК Факт11,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План12, 0)) КАК План12,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт12, 0)) КАК Факт12,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План13, 0)) КАК План13,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт13, 0)) КАК Факт13
	                |ИЗ
	                |	Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
					|		ЛЕВОЕ СОЕДИНЕНИЕ ИсклСтатьи КАК Искл
					|		ПО (Искл.СтатьяДР = СтатьиДоходовРасходов.Ссылка)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВремТаблПланФакт КАК ПланФакт
	                |		ПО (ПланФакт.СтатьяДР = СтатьиДоходовРасходов.Ссылка)
					|ГДЕ
					|	Искл.СтатьяДР ЕСТЬ NULL 
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	СтатьиДоходовРасходов.Ссылка,
					|	СтатьиДоходовРасходов.ЗнакДвижения,
	                |	СтатьиДоходовРасходов.ЭтоГруппа,
					|	СтатьиДоходовРасходов.Приоритет
	                |УПОРЯДОЧИТЬ ПО
	                |	СтатьиДоходовРасходов.Порядок,
	                |	СтатьиДоходовРасходов.Наименование
	                |ИТОГИ
	                |	СУММА(План1),
	                |	СУММА(Факт1),
	                |	СУММА(План2),
	                |	СУММА(Факт2),
	                |	СУММА(План3),
	                |	СУММА(Факт3),
	                |	СУММА(План4),
	                |	СУММА(Факт4),
	                |	СУММА(План5),
	                |	СУММА(Факт5),
	                |	СУММА(План6),
	                |	СУММА(Факт6),
	                |	СУММА(План7),
	                |	СУММА(Факт7),
	                |	СУММА(План8),
	                |	СУММА(Факт8),
	                |	СУММА(План9),
	                |	СУММА(Факт9),
	                |	СУММА(План10),
	                |	СУММА(Факт10),
	                |	СУММА(План11),
	                |	СУММА(Факт11),
	                |	СУММА(План12),
	                |	СУММА(Факт12),
	                |	СУММА(План13),
	                |	СУММА(Факт13)
	                |ПО
	                |	СтатьяДР ИЕРАРХИЯ";						

	Если Не НадоПлан Тогда
		//уберем исключаемые статьи
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ЛЕВОЕ СОЕДИНЕНИЕ ИсклСтатьи КАК Искл
					|		ПО (Искл.СтатьяДР = СтатьиДоходовРасходов.Ссылка)" ,"");
					
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ГДЕ
					|	Искл.СтатьяДР ЕСТЬ NULL","");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

//для экспериментов
Функция ПолучитьТекстЗапросаБезВТ(НадоПлан)
	ТекстЗапроса  = "ВЫБРАТЬ
	                |	СтатьиДоходовРасходов.Ссылка КАК СтатьяДР,
	                |	СтатьиДоходовРасходов.ЗнакДвижения КАК ПриходРасход,
	                |	СтатьиДоходовРасходов.ЭтоГруппа,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План1, 0)) КАК План1,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт1, 0)) КАК Факт1,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План2, 0)) КАК План2,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт2, 0)) КАК Факт2,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План3, 0)) КАК План3,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт3, 0)) КАК Факт3,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План4, 0)) КАК План4,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт4, 0)) КАК Факт4,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План5, 0)) КАК План5,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт5, 0)) КАК Факт5,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План6, 0)) КАК План6,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт6, 0)) КАК Факт6,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План7, 0)) КАК План7,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт7, 0)) КАК Факт7,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План8, 0)) КАК План8,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт8, 0)) КАК Факт8,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План9, 0)) КАК План9,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт9, 0)) КАК Факт9,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План10, 0)) КАК План10,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт10, 0)) КАК Факт10,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План11, 0)) КАК План11,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт11, 0)) КАК Факт11,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План12, 0)) КАК План12,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт12, 0)) КАК Факт12,
	                |	СУММА(ЕСТЬNULL(ПланФакт.План13, 0)) КАК План13,
	                |	СУММА(ЕСТЬNULL(ПланФакт.Факт13, 0)) КАК Факт13
	                |ИЗ
	                |	Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			ИсключаемыеСтатьи.СтатьяДР КАК СтатьяДР
	                |		ИЗ
	                |			РегистрСведений.ИсключаемыеСтатьи КАК ИсключаемыеСтатьи
	                |		ГДЕ
	                |			ИсключаемыеСтатьи.ВариантБюджета = &БюджетПлан) КАК Искл
	                |		ПО (Искл.СтатьяДР = СтатьиДоходовРасходов.Ссылка)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			ВремТаблПлан.СтатьяДР КАК СтатьяДР,
	                |			ВремТаблПлан.План1 КАК План1,
	                |			0 КАК Факт1,
	                |			ВремТаблПлан.План2 КАК План2,
	                |			0 КАК Факт2,
	                |			ВремТаблПлан.План3 КАК План3,
	                |			0 КАК Факт3,
	                |			ВремТаблПлан.План4 КАК План4,
	                |			0 КАК Факт4,
	                |			ВремТаблПлан.План5 КАК План5,
	                |			0 КАК Факт5,
	                |			ВремТаблПлан.План6 КАК План6,
	                |			0 КАК Факт6,
	                |			ВремТаблПлан.План7 КАК План7,
	                |			0 КАК Факт7,
	                |			ВремТаблПлан.План8 КАК План8,
	                |			0 КАК Факт8,
	                |			ВремТаблПлан.План9 КАК План9,
	                |			0 КАК Факт9,
	                |			ВремТаблПлан.План10 КАК План10,
	                |			0 КАК Факт10,
	                |			ВремТаблПлан.План11 КАК План11,
	                |			0 КАК Факт11,
	                |			ВремТаблПлан.План12 КАК План12,
	                |			0 КАК Факт12,
	                |			ВремТаблПлан.План13 КАК План13,
	                |			0 КАК Факт13
	                |		ИЗ
	                |			(ВЫБРАТЬ
	                |				ВремТаблПланПредв.СтатьяДР КАК СтатьяДР,
	                |				СУММА(ВремТаблПланПредв.План1) КАК План1,
	                |				СУММА(ВремТаблПланПредв.План2) КАК План2,
	                |				СУММА(ВремТаблПланПредв.План3) КАК План3,
	                |				СУММА(ВремТаблПланПредв.План4) КАК План4,
	                |				СУММА(ВремТаблПланПредв.План5) КАК План5,
	                |				СУММА(ВремТаблПланПредв.План6) КАК План6,
	                |				СУММА(ВремТаблПланПредв.План7) КАК План7,
	                |				СУММА(ВремТаблПланПредв.План8) КАК План8,
	                |				СУММА(ВремТаблПланПредв.План9) КАК План9,
	                |				СУММА(ВремТаблПланПредв.План10) КАК План10,
	                |				СУММА(ВремТаблПланПредв.План11) КАК План11,
	                |				СУММА(ВремТаблПланПредв.План12) КАК План12,
	                |				СУММА(ВремТаблПланПредв.План13) КАК План13
	                |			ИЗ
	                |				(ВЫБРАТЬ
	                |					БДР.СтатьяДоходовРасходов КАК СтатьяДР,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 1
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План1,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 2
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План2,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 3
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План3,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 4
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План4,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 5
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План5,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 6
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План6,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 7
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План7,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 8
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План8,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 9
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План9,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 10
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План10,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 11
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План11,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДР.Период) = 12
	                |							ТОГДА СУММА(БДР.СуммаПлан)
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК План12,
	                |					СУММА(БДР.СуммаПлан) КАК План13
	                |				ИЗ
	                |					РегистрНакопления.БДР КАК БДР
	                |				ГДЕ
	                |					БДР.Регистратор = &БюджетПлан
	                |				
	                |				СГРУППИРОВАТЬ ПО
	                |					БДР.СтатьяДоходовРасходов,
	                |					БДР.Период) КАК ВремТаблПланПредв
	                |			
	                |			СГРУППИРОВАТЬ ПО
	                |				ВремТаблПланПредв.СтатьяДР) КАК ВремТаблПлан
	                |		
	                |		ОБЪЕДИНИТЬ ВСЕ
	                |		
	                |		ВЫБРАТЬ
	                |			ВремТаблФакт.СтатьяДР,
	                |			0,
	                |			ВремТаблФакт.Факт1,
	                |			0,
	                |			ВремТаблФакт.Факт2,
	                |			0,
	                |			ВремТаблФакт.Факт3,
	                |			0,
	                |			ВремТаблФакт.Факт4,
	                |			0,
	                |			ВремТаблФакт.Факт5,
	                |			0,
	                |			ВремТаблФакт.Факт6,
	                |			0,
	                |			ВремТаблФакт.Факт7,
	                |			0,
	                |			ВремТаблФакт.Факт8,
	                |			0,
	                |			ВремТаблФакт.Факт9,
	                |			0,
	                |			ВремТаблФакт.Факт10,
	                |			0,
	                |			ВремТаблФакт.Факт11,
	                |			0,
	                |			ВремТаблФакт.Факт12,
	                |			0,
	                |			ВремТаблФакт.Факт13
	                |		ИЗ
	                |			(ВЫБРАТЬ
	                |				ВремТаблФактПредв.СтатьяДР КАК СтатьяДР,
	                |				СУММА(ВремТаблФактПредв.Факт1) КАК Факт1,
	                |				СУММА(ВремТаблФактПредв.Факт2) КАК Факт2,
	                |				СУММА(ВремТаблФактПредв.Факт3) КАК Факт3,
	                |				СУММА(ВремТаблФактПредв.Факт4) КАК Факт4,
	                |				СУММА(ВремТаблФактПредв.Факт5) КАК Факт5,
	                |				СУММА(ВремТаблФактПредв.Факт6) КАК Факт6,
	                |				СУММА(ВремТаблФактПредв.Факт7) КАК Факт7,
	                |				СУММА(ВремТаблФактПредв.Факт8) КАК Факт8,
	                |				СУММА(ВремТаблФактПредв.Факт9) КАК Факт9,
	                |				СУММА(ВремТаблФактПредв.Факт10) КАК Факт10,
	                |				СУММА(ВремТаблФактПредв.Факт11) КАК Факт11,
	                |				СУММА(ВремТаблФактПредв.Факт12) КАК Факт12,
	                |				СУММА(ВремТаблФактПредв.Факт1 + ВремТаблФактПредв.Факт2 + ВремТаблФактПредв.Факт3 + ВремТаблФактПредв.Факт4 + ВремТаблФактПредв.Факт5 + ВремТаблФактПредв.Факт6 + ВремТаблФактПредв.Факт7 + ВремТаблФактПредв.Факт8 + ВремТаблФактПредв.Факт9 + ВремТаблФактПредв.Факт10 + ВремТаблФактПредв.Факт11 + ВремТаблФактПредв.Факт12) КАК Факт13
	                |			ИЗ
	                |				(ВЫБРАТЬ
	                |					БДРОбороты.СтатьяДоходовРасходов КАК СтатьяДР,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 1
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт1,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 2
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт2,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 3
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт3,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 4
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт4,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 5
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт5,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 6
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт6,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 7
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт7,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 8
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт8,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 9
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт9,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 10
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт10,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 11
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт11,
	                |					ВЫБОР
	                |						КОГДА МЕСЯЦ(БДРОбороты.Период) = 12
	                |							ТОГДА БДРОбороты.СуммаФактОборот
	                |						ИНАЧЕ 0
	                |					КОНЕЦ КАК Факт12
	                |				ИЗ
	                |					РегистрНакопления.БДР.Обороты(&НачПериода, &КонПериода, Месяц, ) КАК БДРОбороты) КАК ВремТаблФактПредв
	                |			
	                |			СГРУППИРОВАТЬ ПО
	                |				ВремТаблФактПредв.СтатьяДР) КАК ВремТаблФакт) КАК ПланФакт
	                |		ПО (ПланФакт.СтатьяДР = СтатьиДоходовРасходов.Ссылка)
	                |ГДЕ
	                |	Искл.СтатьяДР ЕСТЬ NULL 
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	СтатьиДоходовРасходов.Ссылка,
	                |	СтатьиДоходовРасходов.ЗнакДвижения,
	                |	СтатьиДоходовРасходов.ЭтоГруппа
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	СтатьиДоходовРасходов.Порядок,
	                |	СтатьиДоходовРасходов.Наименование
	                |ИТОГИ
	                |	СУММА(План1),
	                |	СУММА(Факт1),
	                |	СУММА(План2),
	                |	СУММА(Факт2),
	                |	СУММА(План3),
	                |	СУММА(Факт3),
	                |	СУММА(План4),
	                |	СУММА(Факт4),
	                |	СУММА(План5),
	                |	СУММА(Факт5),
	                |	СУММА(План6),
	                |	СУММА(Факт6),
	                |	СУММА(План7),
	                |	СУММА(Факт7),
	                |	СУММА(План8),
	                |	СУММА(Факт8),
	                |	СУММА(План9),
	                |	СУММА(Факт9),
	                |	СУММА(План10),
	                |	СУММА(Факт10),
	                |	СУММА(План11),
	                |	СУММА(Факт11),
	                |	СУММА(План12),
	                |	СУММА(Факт12),
	                |	СУММА(План13),
	                |	СУММА(Факт13)
	                |ПО
	                |	СтатьяДР ИЕРАРХИЯ";	

	Если Не НадоПлан Тогда
		//уберем исключаемые статьи
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ЛЕВОЕ СОЕДИНЕНИЕ ИсклСтатьи КАК Искл
					|		ПО (Искл.СтатьяДР = СтатьиДоходовРасходов.Ссылка)" ,"");
					
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ГДЕ
					|	Искл.СтатьяДР ЕСТЬ NULL","");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//заполняет дерево значений статьями из справочника
//далее в это дерево будут добавлены плановые данные из 
//документа и фактические из регистра БДР
//Параметры:
//	СтруктураПараметров - структура, поля:
//	ДеревоБДРФорма - тип ДеревоЗначений
//	Объект - тип ДокументСсылка.БюджетГод
//	НачальныйОстаток - тип число, начальный остаток средств на начало года
//	НачПериода - тип Дата, начало периода (года) для построения дерева бюджета
//	КонПериода - тип Дата, конец периода (года) для построения дерева бюджета
//17 09 12
//	новый параметр
//	БюджетФакт - если заполнен, то вместо факта берем план из этого бюджета
//	для целей сравнения бюджетов
Процедура ЗаполнитьДеревоИзСправочникаСервер(СтруктураПараметров) Экспорт
	ДеревоБДРФорма=СтруктураПараметров.ДеревоБДРФорма;
	Объект=Неопределено;
	СтруктураПараметров.Свойство("Объект",Объект);//док БюджетГод, может быть Неопределено
	НачальныйОстатокПлан =0;
	СтруктураПараметров.Свойство("НачальныйОстатокПлан",НачальныйОстатокПлан);
	НачальныйОстатокФакт =0;
	СтруктураПараметров.Свойство("НачальныйОстатокФакт",НачальныйОстатокФакт);
	НачПериода = Неопределено;//может быть Неопределено
	СтруктураПараметров.Свойство("НачПериода",НачПериода);
	НачПериода = ?(ЗначениеЗаполнено(НачПериода), НачПериода, Неопределено);
	КонПериода = Неопределено;//может быть Неопределено
	СтруктураПараметров.Свойство("КонПериода",КонПериода);
	КонПериода = ?(ЗначениеЗаполнено(КонПериода), КонПериода, Неопределено);
	//прог 17 09 12
	БюджетФакт = Неопределено;
	СтруктураПараметров.Свойство("БюджетФакт",БюджетФакт);//док БюджетГод, может быть Неопределено
	//прог 17 09 12 конец
	
	Запрос 				= Новый Запрос;
	МенеджерВТ 			= Новый МенеджерВременныхТаблиц();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	НадоПлан			= Ложь;
	
	
	Если НЕ Объект=Неопределено Тогда  //т.е. Объект(документ) указан
		//чтобы можно было заполнить программное дерево только фактом //26 06 12
		
		Запрос.УстановитьПараметр("БюджетПлан",Объект.Ссылка);
		Запрос.УстановитьПараметр("НачПериода",НачалоГода(Объект.Дата));
		Запрос.УстановитьПараметр("КонПериода",КонецГода(Объект.Дата));			
		НадоПлан=Истина;
	Иначе //документ не указан - заполняем только Факт
		Если НЕ НачПериода=Неопределено Тогда
			Запрос.УстановитьПараметр("НачПериода",НачалоГода(НачПериода));
		Иначе
			Запрос.УстановитьПараметр("НачПериода",НачалоГода(ТекущаяДата()));
		КонецЕсли;
		Если НЕ КонПериода=Неопределено Тогда
			Запрос.УстановитьПараметр("КонПериода",КонецГода(КонПериода));
		Иначе
			Запрос.УстановитьПараметр("КонПериода",КонецГода(ТекущаяДата()));			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ БюджетФакт = Документы.БюджетГод.ПустаяСсылка() И НЕ БюджетФакт = Неопределено Тогда
		Запрос.УстановитьПараметр("БюджетФакт",БюджетФакт);
	КонецЕсли;
	
	Запрос.Текст 		= ПолучитьТекстЗапроса(Запрос, НадоПлан, БюджетФакт);
	Результат 			= Запрос.Выполнить();
	ТЗРез				= Результат.Выгрузить();
	ТЗПриоритеты		= ТЗРез.Скопировать();
	ТЗПриоритеты.Свернуть("Приоритет","");
	
	ТЗПриоритеты.Колонки.Добавить("Порядок");
	
	Для сч = -ТЗПриоритеты.Количество()+1 по 0 Цикл
		Стр = ТЗПриоритеты.Получить(-сч);
		Если НЕ ЗначениеЗаполнено(Стр["Приоритет"]) Тогда
			Стр["Порядок"] = 0;
		Иначе
			Стр["Порядок"] = Стр["Приоритет"]["ПорядокСортировки"];
		КонецЕсли;
		
	КонецЦикла;
	
	//Приоритеты			= ТЗРез.ВыгрузитьКолонку("Приоритет");
	//ТЗПриоритеты	 	= Новый ТаблицаЗначений;
	//ТЗПриоритеты.Колонки.Добавить("Приоритет");
	//ТЗПриоритеты.Колонки.Добавить("Порядок");
	//Для каждого эл из Приоритеты Цикл
	//	Если ТЗПриоритеты.Найти(эл, "приоритет")=Неопределено Тогда
	//		НовСтр = ТЗПриоритеты.Добавить();
	//		НовСтр.Приоритет = Эл;
	//		НовСтр.Порядок = Эл.ПорядокСортировки;
	//	КонецЕсли;
	//КонецЦикла;
	//ТЗПриоритеты.Свернуть("Приоритет,Порядок","");
	ТЗПриоритеты.Сортировать("Порядок Возр");
	
	ДеревоБДРФорма.Строки.Очистить();
	
	НовСтр 				= ДеревоБДРФорма.Строки.Добавить();
	НовСтр.СтатьяДР 	= "Нач. остаток";
	НовСтр.ЭтоГруппа 	= Истина;
	НовСтр["План1"] 	= НачальныйОстатокПлан;
	НовСтр["Факт1"] 	= НачальныйОстатокФакт;
	
	Выборка             = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого Стр ИЗ ТЗПриоритеты Цикл
		
		
		НовСтрП 			= ДеревоБДРФорма.Строки.Добавить();
		НовСтрП.СтатьяДР 	= Стр.Приоритет;
		НовСтрП.ЭтоГруппа 	= Истина;
		Если НЕ ЗначениеЗаполнено(Стр.Приоритет) Тогда
			НовСтрП.ПриходРасход=0;
		Иначе
			НовСтрП.ПриходРасход= Стр.Приоритет.ЗнакДвижения;
		КонецЕсли;
		
		ЗаполнитьДеревоБДРРекурсивноСервер(Выборка, НовСтрП, Стр.Приоритет);
		
		Выборка.Сбросить();
		
		//прог если группа пустая - удаляем ее
		Если НовСтрП.Строки.Количество()=0 Тогда
			ДеревоБДРФорма.Строки.Удалить (НовСтрП);
		КонецЕсли;
				
	КонецЦикла;
	
	ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(ДеревоБДРФорма.Строки, 13);
	
	//вычислим конечный плановый остаток средств
	НовСтр 				= ДеревоБДРФорма.Строки.Добавить();
	НовСтр.СтатьяДР 	= "Кон. остаток";
	НовСтр.ЭтоГруппа 	= Истина;
	
	Если НЕ Объект=Неопределено Тогда
		Если Объект.РассчитыватьГашение Тогда
			РассчитатьГашениеКредита(ДеревоБДРФорма);
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьОстаткиВДеревеБДРСервер(ДеревоБДРФорма);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьГашениеКредита(ДеревоБДРФорма)

    Рез = Ложь;

        //этот запрос используется для определения кошельков, по которым есть непогашенные оверы
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ
        | КредитыОстатки.СуммаРеглОстаток,
        | КредитыОстатки.Кошелек,
        | СтатьиДоходовРасходов.Ссылка КАК СтатьяДР
        |ИЗ
        | РегистрНакопления.Кредиты.Остатки(&ТекДата, ) КАК КредитыОстатки
        | ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
        | ПО КредитыОстатки.Кошелек.СтатьяКредитГашение = СтатьиДоходовРасходов.Ссылка
        |ГДЕ
        | СтатьиДоходовРасходов.Ссылка ЕСТЬ НЕ NULL ";

        Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();

        Честные = Новый СписокЗначений;
        НЕЧестные = Новый СписокЗначений;
        Пока Выборка.Следующий() Цикл
                Если Выборка.Кошелек.ЧестныйОвердрафт Тогда
                        Честные.Добавить(Выборка.Кошелек);
                Иначе
                        НЕЧестные.Добавить(Выборка.Кошелек);
                КонецЕсли;
        КонецЦикла;
        Выборка.Сбросить();

        //если овер честный , то гашение в след месяце - это оборот по текущему месяцу
        //гашение текущего месяца не изменяется
        //получим таблицу оборотов за текущий месяц по честным овердрафтам
        Запрос.Текст =
        "ВЫБРАТЬ
        | Рег.Кошелек,
        | Рег.СуммаРеглПриход
        |ИЗ
        | РегистрНакопления.Кредиты.Обороты(&ДатаНач, &ДатаКон, Период, Кошелек В (&Честные)) КАК Рег";

        Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ТекущаяДата()));
        Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(ТекущаяДата()));
        Запрос.УстановитьПараметр("Честные", Честные);
        ТЗЧестные = Запрос.Выполнить().Выгрузить();

        //получим таблицу оборотов за все времяпо НЕчестным овердрафтам - для определения последнего гашения (в ноль)
        Запрос.Текст =
        "ВЫБРАТЬ
        | КредитыОстаткиИОбороты.Кошелек,
        | КредитыОстаткиИОбороты.СуммаРеглРасход,
        | КредитыОстаткиИОбороты.СуммаРеглКонечныйОстаток,
        | КредитыОстаткиИОбороты.СуммаРеглНачальныйОстаток,
        | КредитыОстаткиИОбороты.СуммаРеглПриход,
        | КредитыОстаткиИОбороты.ПериодДень КАК ПериодДень
        |ИЗ
        | РегистрНакопления.Кредиты.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Авто, , Кошелек В (&НЕчестные)) КАК КредитыОстаткиИОбороты
        |
        |УПОРЯДОЧИТЬ ПО
        | ПериодДень УБЫВ";

        Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(ТекущаяДата()));
        Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ТекущаяДата()-(86400*110)));    //грейсы более 110 дней - еще не видел, 100 дней есть у альфабанка
        Запрос.УстановитьПараметр("НЕЧестные", НЕЧестные);
        ТЗНечестные = Запрос.Выполнить().Выгрузить();

        Пока Выборка.Следующий() Цикл

                ПоискСтроки = ДеревоБДРФорма.Строки.Найти(Выборка.СтатьяДР, "СтатьяДР",Истина);
                Если Выборка.Кошелек.ЧестныйОвердрафт Тогда

                        НомерМесяца = Месяц(ТекущаяДата())+1;//колонка, в котору надо поместить гашение
                        Если НомерМесяца >12 Тогда
                                //дата гашения - в следующем году, в текущем бюджете отразить невозможно, в бюджете следующего года - отражаем вручную
                                Продолжить;
                        КонецЕсли;
                        //если овер честный , то гашение в след месяце - это оборот по текущему месяцу
                        //гашение текущего месяца не изменяется

                        //ищем строки в таблице честных кредитов
                        ПоискСтрок = ТЗЧестные.НайтиСтроки(Новый Структура("Кошелек", Выборка.Кошелек));

                        Если ПоискСтрок.Количество()=0 Тогда
                                Продолжить;
                        КонецЕсли;

                        ПоискСтроки["План"+НомерМесяца] = ПоискСтрок[0].СуммаРеглПриход; //в поиске будет одна строка по каждому кошельку
                        ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(ДеревоБДРФорма.Строки);
                        Рез = Истина;

                Иначе
                        //овер нечестный, значит надо считать обороты от предыдущего гашения
                        //но это блять невозможно, т.к. если гашений несколько, то непонятно
                        //какое из них было полным
                        //значит надо перебрать все движения Расход и там, где остаток было ноль
                        //это и есть полное гашение (или меньше ноля - это значит гасили
                        //с превышением, отрицательный остаток - это собственные средства),
                        //потом прибавить грейс период и получим дату гашения

                        //сначала проверим, указан ли срок грейса
                        Если Выборка.Кошелек.ГрейсПериодВДнях=0 Тогда
                                //ошибка
                                Продолжить;
                        КонецЕсли;

                        ПоискСтрок = ТЗНЕЧестные.НайтиСтроки(Новый Структура("Кошелек", Выборка.Кошелек));

                        Если ПоискСтрок.Количество()=0 Тогда
                                //нет оборотов по этому кошельку
                                Продолжить;
                        КонецЕсли;

                        СобственныеСредства = 0;
                        ДатаГашения = Неопределено;
                        Для Каждого Стр Из ПоискСтрок Цикл //перебор строк в порядке убывания даты с целью поиска последнего гашения в ноль
                                Если Стр.СуммаРеглКонечныйОстаток <= 0 Тогда
                                        //нашли предыдущее гашение в ноль  (если меньше нуля - значит были собственные средства)
                                        ДатаГашения = Стр.ПериодДень;
                                        СобственныеСредства = -1*Стр.СуммаРеглКонечныйОстаток;
                                        Прервать;
                                КонецЕсли;
                        КонецЦикла;

                        Если ДатаГашения = Неопределено Тогда
                                Продолжить;
                        КонецЕсли;

                        НомерМесяца = Месяц(ДатаГашения+(86400*Выборка.Кошелек.ГрейсПериодВДнях));//колонка, в котору надо поместить гашение
                        Если НомерМесяца >12 Тогда
                                //дата гашения - в следующем году, в текущем бюджете отразить невозможно, в бюджете следующего года - отражаем вручную
                                Продолжить;
                        КонецЕсли;

                        //Обороты от последней даты гашения до текущего момента.
                        //надо отнять от них собственные средства, если были.
                        //этот запрос похоже не получится вынести за цикл, т.к. дата гашения для разных кошельков будет разная
                        Запрос.Текст =
                        "ВЫБРАТЬ
                        | КредитыОстаткиИОбороты.СуммаРеглРасход,
                        | КредитыОстаткиИОбороты.СуммаРеглКонечныйОстаток,
                        | КредитыОстаткиИОбороты.СуммаРеглНачальныйОстаток,
                        | КредитыОстаткиИОбороты.СуммаРеглПриход
                        |ИЗ
                        | РегистрНакопления.Кредиты.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Авто, , Кошелек = &Кошелек) КАК КредитыОстаткиИОбороты";

                        Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаГашения+86400));
                        Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
                        Запрос.УстановитьПараметр("Кошелек", Выборка.Кошелек);

                        ТЗ = Запрос.Выполнить().Выгрузить();

                        ПоискСтроки["План"+НомерМесяца] = ТЗ[0].СуммаРеглПриход-СобственныеСредства;
                        ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(ДеревоБДРФорма.Строки);
                        Рез = Истина;

                КонецЕсли;

        КонецЦикла;

        Возврат Ложь;

КонецФункции
//вызывается из ЗаполнитьДеревоИзСправочникаСервер
//заполняет ДеревоБДР данными из справочника
Процедура ЗаполнитьДеревоБДРРекурсивноСервер(Выборка, СтрокаДереваФормы, Приоритет)
	
	Пока Выборка.Следующий() Цикл
		
		//это чтобы группы не попадали внутрь группировки
		//пример того, что будет без этого условия, показан на
		//общей картинке ОбходЗапросаПоГруппировкамСИерархией
		//зеленым выделены правильные итоги по иерархии
		//синим - итоги по группировкам элементов (там один элемент, но этого для примера достаточно)
		//красным - итоги по группировкам, где в качестве группирующего объекта
		//выступает группа справочника, по которой выше уже были выведены
		//итоги, но по иерархии.
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке И Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		//конец этого условия
		
		Если НЕ Выборка.ЭтоГруппа И Выборка.СтатьяДР.Приоритет <> Приоритет Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр 				= СтрокаДереваФормы.Строки.Добавить();
		НовСтр.СтатьяДР 	= Выборка.СтатьяДР;
		НовСтр.ЭтоГруппа 	= Выборка.ЭтоГруппа;
		НовСтр.ПриходРасход	= Выборка.ПриходРасход;//07 03 12
		
		//прог 11 07 12 - для отладки
		//НовСтр.ТипЗаписи	= Выборка.ТипЗаписи();
		
		Для сч = 1 по 13 Цикл
			НовСтр["План"+сч] 	= Выборка["План"+сч];
			НовСтр["Факт"+сч] 	= Выборка["Факт"+сч];
			НовСтр["Рез"+сч]  	= ?(Выборка["План"+сч] = 0, 0, Выборка["Факт"+сч]/Выборка["План"+сч]*100);
		КонецЦикла;
		
		НоваяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "СтатьяДР");
		
		ЗаполнитьДеревоБДРРекурсивноСервер(НоваяВыборка, НовСтр, Приоритет);
		
		//прог если группа пустая - удаляем ее
		Если Выборка.ЭтоГруппа Тогда
			Если НовСтр.Строки.Количество()=0 Тогда
				СтрокаДереваФормы.Строки.Удалить (НовСтр);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
		
КонецПроцедуры

// добавляет в дерево фактические данные из регистра накопления БДР
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаполнитьФактСервер(ДеревоБДРФорма, НачПериода, КонПериода)  Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	БДРОбороты.СтатьяДоходовРасходов КАК СтатьяДР,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 1
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт1,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 2
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт2,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 3
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт3,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 4
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт4,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 5
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт5,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 6
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт6,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 7
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт7,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 8
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт8,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 9
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт9,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 10
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт10,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 11
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт11,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 12
	               |			ТОГДА БДРОбороты.СуммаФактОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт12
	               |ПОМЕСТИТЬ ОборотыФакт
	               |ИЗ
	               |	РегистрНакопления.БДР.Обороты(&НачПериода, &КонПериода, Месяц, ) КАК БДРОбороты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяДР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Об.СтатьяДР,
	               |	СУММА(Об.Факт1) КАК Факт1,
	               |	СУММА(Об.Факт2) КАК Факт2,
	               |	СУММА(Об.Факт3) КАК Факт3,
	               |	СУММА(Об.Факт4) КАК Факт4,
	               |	СУММА(Об.Факт5) КАК Факт5,
	               |	СУММА(Об.Факт6) КАК Факт6,
	               |	СУММА(Об.Факт7) КАК Факт7,
	               |	СУММА(Об.Факт8) КАК Факт8,
	               |	СУММА(Об.Факт9) КАК Факт9,
	               |	СУММА(Об.Факт10) КАК Факт10,
	               |	СУММА(Об.Факт11) КАК Факт11,
	               |	СУММА(Об.Факт12) КАК Факт12,
	               |	СУММА(Об.Факт1 + Об.Факт2 + Об.Факт3 + Об.Факт4 + Об.Факт5 + Об.Факт6 + Об.Факт7 + Об.Факт8 + Об.Факт9 + Об.Факт10 + Об.Факт11 + Об.Факт12) КАК Факт13
	               |ИЗ
	               |	ОборотыФакт КАК Об
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Об.СтатьяДР";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачПериода",НачалоГода(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",КонецГода(КонПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Стр = ДеревоБДРФорма.Строки.Найти(Выборка.СтатьяДР, "СтатьяДР", Истина);
		
		Если Стр<>НЕопределено Тогда
			
			Для сч = 1 по 13 Цикл
				Стр["Факт"+сч] = Выборка["Факт"+сч];
			КонецЦикла;

		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

// добавляет в дерево фактические данные из регистра накопления БДР
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаполнитьФактСПрогнозомСервер(ДеревоБДРФорма, НачПериода, КонПериода)  Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	БДРОбороты.СтатьяДоходовРасходов КАК СтатьяДР,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 1
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт1,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 2
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт2,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 3
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт3,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 4
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт4,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 5
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт5,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 6
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт6,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 7
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт7,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 8
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт8,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 9
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт9,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 10
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт10,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 11
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт11,
	               |	ВЫБОР
	               |		КОГДА МЕСЯЦ(БДРОбороты.Период) = 12
	               |			ТОГДА БДРОбороты.СуммаФактОборот + БДРОбороты.СуммаФактПрогнозОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Факт12
	               |ПОМЕСТИТЬ ОборотыФакт
	               |ИЗ
	               |	РегистрНакопления.БДР.Обороты(&НачПериода, &КонПериода, Месяц, ) КАК БДРОбороты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяДР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Об.СтатьяДР,
	               |	СУММА(Об.Факт1) КАК Факт1,
	               |	СУММА(Об.Факт2) КАК Факт2,
	               |	СУММА(Об.Факт3) КАК Факт3,
	               |	СУММА(Об.Факт4) КАК Факт4,
	               |	СУММА(Об.Факт5) КАК Факт5,
	               |	СУММА(Об.Факт6) КАК Факт6,
	               |	СУММА(Об.Факт7) КАК Факт7,
	               |	СУММА(Об.Факт8) КАК Факт8,
	               |	СУММА(Об.Факт9) КАК Факт9,
	               |	СУММА(Об.Факт10) КАК Факт10,
	               |	СУММА(Об.Факт11) КАК Факт11,
	               |	СУММА(Об.Факт12) КАК Факт12,
	               |	СУММА(Об.Факт1 + Об.Факт2 + Об.Факт3 + Об.Факт4 + Об.Факт5 + Об.Факт6 + Об.Факт7 + Об.Факт8 + Об.Факт9 + Об.Факт10 + Об.Факт11 + Об.Факт12) КАК Факт13
	               |ИЗ
	               |	ОборотыФакт КАК Об
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Об.СтатьяДР";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачПериода",НачалоГода(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",КонецГода(КонПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Стр = ДеревоБДРФорма.Строки.Найти(Выборка.СтатьяДР, "СтатьяДР", Истина);
		
		Если Стр<>НЕопределено Тогда
			
			Для сч = 1 по 13 Цикл
				Стр["Факт"+сч] = Выборка["Факт"+сч];
			КонецЦикла;

		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

//пересчитывает итоги по группам дерева
//движение от общих групп к более детальным
Процедура ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(СтрокиДерева, ПоследнийМесяц=13) экспорт
				
	Для Каждого Стр Из СтрокиДерева Цикл

		Если Стр.Строки.Количество() = 0 Тогда
            Продолжить;
		КонецЕсли;
		
        ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(Стр.Строки, ПоследнийМесяц);
		
		Для сч = 1 по ПоследнийМесяц Цикл
			Стр["План"+сч] = Стр.Строки.Итог("План"+сч);
			Стр["Факт"+сч] = Стр.Строки.Итог("Факт"+сч);
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

//полностью пересчитывает остатки в дереве
//начальный остаток уже должен быть в колонке План1
//заполняет начальный остаток в колонке Факт1
//выполняет пересчет всех остатков на начало и конец месяца
Процедура ПересчитатьОстаткиВДеревеБДРСервер(ДеревоБДРФорма) Экспорт
	
	Если ДеревоБДРФорма.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПерСтр 	= ДеревоБДРФорма.Строки[0];
	ПослСтр	= ДеревоБДРФорма.Строки[ДеревоБДРФорма.Строки.Количество()-1];
	
	КонОстП = ПерСтр["План1"];
	КонОстФ = ПерСтр["Факт1"];
	
	ПерСтр["Рез1"] = ?(КонОстП=0,0,КонОстФ/КонОстП*100); 
	
	Для счМес = 1 по 13 Цикл
		//обходим только уровень 0, глубже спускаться нет смысла
		Для счСтрок = 1 По ДеревоБДРФорма.Строки.Количество()-1 Цикл
			Стр = ДеревоБДРФорма.Строки[счСтрок];
			КонОстП = КонОстП + (Стр["План"+счМес]*Стр["ПриходРасход"]);
			КонОстФ = КонОстФ + (Стр["Факт"+счМес]*Стр["ПриходРасход"]);
		КонецЦикла;
		ПослСтр["План"+счМес] = КонОстП;
		ПослСтр["Факт"+счМес] = КонОстФ;
		ПослСтр["Рез"+счМес] = ?(КонОстП=0,0,КонОстФ/КонОстП*100); 
		
		//установим нач остаток на след месяц
		Если счМес<12 Тогда
			ПерСтр["План"+(счМес+1)] = КонОстП;
			ПерСтр["Факт"+(счМес+1)] = КонОстФ;
			ПерСтр["Рез"+(счМес+1)] = ?(КонОстП=0,0,КонОстФ/КонОстП*100);
		ИначеЕсли счМес = 12 Тогда 
			//для Итогов нач ост берем из параметра процедуры - ост нач года
			ПерСтр["План"+(счМес+1)] = ПерСтр["План1"];
			ПерСтр["Факт"+(счМес+1)] = ПерСтр["Факт1"];
			ПерСтр["Рез"+(счМес+1)] = ?(ПерСтр["План1"]=0,0,ПерСтр["Факт1"]/ПерСтр["План1"]*100); 
			КонОстП = ПерСтр["План1"];
			КонОстф = ПерСтр["Факт1"];
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

//выполняет расчет выполнения плана в % для всех строк рекурсивно
Процедура ПересчитатьВыполнениеПланаРекурсивноСервер(СтрокиДерева, НомерКолонки = 1, ДоКонцаГода = Истина) Экспорт
	
	ПоследняяКолонка = ?(ДоКонцаГода = Истина, 13, НомерКолонки);
	
	Для Каждого Стр Из СтрокиДерева Цикл
		Для сч = НомерКолонки по ПоследняяКолонка Цикл
			Стр["Рез"+сч] = ?(Стр["План"+сч] = 0,0,Стр["Факт"+сч]/Стр["План"+сч]*100);
		КонецЦикла;
		ПересчитатьВыполнениеПланаРекурсивноСервер(Стр.Строки, НомерКолонки, ДоКонцаГода);
	КонецЦикла;
	
	
КонецПроцедуры	

//выполняет пересчет выполнения плана на сервере
//по умолчанию - с первой и до конца года
//если колонка задана - то с этой колонки до конца года
//23 03 11
//пересчет нерекурсивный - только по текущему уровню строк
Процедура ПересчитатьВыполнениеПланаСервер(СтрокиДерева, НомерКолонки = 1, ДоКонцаГода = Истина) Экспорт
	
	ПоследняяКолонка = ?(ДоКонцаГода = Истина, 13, НомерКолонки);
	
	Для Каждого Стр Из СтрокиДерева Цикл
		//это очень медленно:
		//Для сч = НомерКолонки по ПоследняяКолонка Цикл
		//	Стр["Рез"+сч] = ?(Стр["План"+сч] = 0,0,Стр["Факт"+сч]/Стр["План"+сч]*100);
		//	ПересчитатьВыполнениеПланаРекурсивноСервер(Стр.Строки, НомерКолонки, ДоКонцаГода);
		//КонецЦикла;	
		
		//для оптимизации пересчета выполнения плана
		//сделано следующее:
		//эта процедура пересчитывает только итого по группам
		//причем только вернего уровня
		//а обработчик события ПриРазворачивании пересчитывает
		//выполнение более детально
		//таким образом планируется ускорить открытие документа
		//(в строках Нач ост и Кон ост поле ЭтоГруппа - истина
		Если Стр.ЭтоГруппа Тогда
			Для сч = НомерКолонки по ПоследняяКолонка Цикл
				Стр["Рез"+сч] = ?(Стр["План"+сч] = 0,0,Стр["Факт"+сч]/Стр["План"+сч]*100);
			КонецЦикла;
		КонецЕсли;	
		//ПересчитатьВыполнениеПланаРекурсивноСервер(Стр.Строки, НомерКолонки, ДоКонцаГода);
	КонецЦикла;
	
КонецПроцедуры

////Параметры
////	ПоследняяКолонка - число, 12 или 31
//Процедура ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДР(СтрокаДерева, ИмяКолонки, ПоследняяКолонка=12) Экспорт
//	
//	//раздельный расчет сделан специально
//	
//	Итого = 0;
//	Если Найти(ИмяКолонки, "План")>0 Тогда
//		//суммируем все колонки
//		Для сч = 1 по ПоледняяКолонка Цикл
//			Итого = Итого + СтрокаДерева["План"+Строка(сч)];
//		КонецЦикла;
//		//и занесем итог в 13-ю
//		СтрокаДерева["План"+(ПоследняяКолонка+1)] = Итого;
//		//пересчитаем итоги по группам в колонке итогов
//		//ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, "План13");
//		
//	ИначеЕсли Найти(ИмяКолонки, "Факт")>0 Тогда
//		//суммируем все колонки
//		Для сч = 1 по ПоследняяКолонка Цикл
//			Итого = Итого + СтрокаДерева["Факт"+Строка(сч)];
//		КонецЦикла;
//		//занесем итог в 13-ю
//		СтрокаДерева["Факт"+(ПоследняяКолонка+1)] = Итого;
//		//пересчитаем итоги по группам в колонке итогов
//		//ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, "Факт13");
//		
//	КонецЕсли;	
//	
//КонецПроцедуры	

//создает ДеревоЗначений, аналогичное реквизиту формы ДеревоБДР документа БюджетГод
Функция СоздатьДеревоБДР() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиДоходовРасходов"));
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(0);
	Тип_Статьи =  Новый ОписаниеТипов(МассивТипов,,КС);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС1 = Новый КвалификаторыСтроки(1);
	Тип_С1 =  Новый ОписаниеТипов(МассивТипов,,КС1);
	
	КЧ = Новый КвалификаторыЧисла(15,0);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	Тип_Ч =  Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	ТипБул =  Новый ОписаниеТипов(МассивТипов);
	
	ДеревоБДР = Новый ДеревоЗначений;
	ДеревоБДР.Колонки.Добавить("СтатьяДР", Тип_Статьи);
	Для сч = 1 по 13 Цикл
		ДеревоБДР.Колонки.Добавить("План"+строка(сч), Тип_Ч);
		ДеревоБДР.Колонки.Добавить("Факт"+строка(сч), Тип_Ч);
		ДеревоБДР.Колонки.Добавить("Рез"+строка(сч), Тип_Ч);
	КонецЦикла;
	ДеревоБДР.Колонки.Добавить("ЭтоГруппа", ТипБул);
	ДеревоБДР.Колонки.Добавить("ПриходРасход", Тип_Ч);
	
	Возврат ДеревоБДР;
	
КонецФункции

//заполняет план фактом из запроса к регистру БДР
Процедура ЗаполнитьДеревоБДРПланФактБезОчисткиРекурсивноСервер(Выборка, СтрокиДереваФормы);
	
	Для Каждого Стр Из СтрокиДереваФормы Цикл
		Если Стр.СтатьяДР = Выборка.СтатьяДР Тогда
			//выбор максимального значения из двух
			Стр["План"+Месяц(Выборка.Период)] = Макс(Выборка.СуммаФактОборот, Стр["План"+Месяц(Выборка.Период)]);
			Возврат;
		КонецЕсли;
		ЗаполнитьДеревоБДРПланФактБезОчисткиРекурсивноСервер(Выборка, Стр.Строки);
	КонецЦикла;	
	
КонецПроцедуры

// заполняет плановые данные фактическими
Процедура ЗаполнитьПланПоФактуБезОчисткиСервер(ДеревоБДРФорма, НачПериода, КонПериода) Экспорт
		
	ТекстЗапроса = "ВЫБРАТЬ
				   |	БДРОбороты.СуммаФактОборот,
				   |	БДРОбороты.СтатьяДоходовРасходов КАК СтатьяДР,
				   |	БДРОбороты.Период КАК Период
				   |ИЗ
				   |	РегистрНакопления.БДР.Обороты(&НачПериода, &КонПериода, Месяц, ) КАК БДРОбороты";		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачПериода",НачалоГода(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",КонецГода(КонПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьДеревоБДРПланФактБезОчисткиРекурсивноСервер(Выборка, ДеревоБДРФорма.Строки);
	КонецЦикла;	
	
	//посчитать итоги по группам 
	ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(ДеревоБДРФорма.Строки);
	
	//пересчет остатков по месяцам
	ПересчитатьОстаткиВДеревеБДРСервер(ДеревоБДРФорма);

	//выполение плана сервер (только верний уровень)
	ПересчитатьВыполнениеПланаСервер(ДеревоБДРФорма.Строки);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
// Описание.
// Для отображения бюджета доходов и расходов используется
// дерево значений, поскольку справочник Статьи доходов и расходов
// иерархический. Одни и те же процедуры используются для
// отображения дерева в форме документа БюджетГод
// и для печати бюджета - при печати формируется программное 
// дерево, для получения печатной формы аналогичной документу.


Функция ПолучитьДатуЗапретаРедактирования() Экспорт

	Возврат Константы.ДатаЗапретаРедактирования.Получить();

КонецФункции // ПолучитьДатуЗапретаРедактирования()

//функция возвращает остаток средств в кошельках, у которых реквизит РасчетОстатковБюджет = ИСТИНА
Функция ВернутьОстатокСредствСервер(ДатаОстатка) Экспорт
	
	Запрос = Новый Запрос;			   
	Запрос.Текст = "ВЫБРАТЬ
	               |	СуммаРеглОстаток
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредства.Остатки(&ДатаНач, Кошелек.РасчетОстатковБюджет = ИСТИНА)";

	Запрос.УстановитьПараметр("ДатаНач",ДатаОстатка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.СуммаРеглОстаток;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

//очищает план для заполнения его фактом из запроса к регистру БДР
//за те месяцы, которые находятся в интервале от начала года
//до текущей даты
Процедура ОчиститьДеревоБДРПланСервер(СтрокиДереваФормы, ПоследнийМесяц = 13) Экспорт
	
	Для сч = 1 По СтрокиДереваФормы.Количество()-2 Цикл //Пропускаем первую и последнюю строки - это остатки
	//Для Каждого Стр Из СтрокиДереваФормы Цикл
	
		Стр = СтрокиДереваФормы[сч];
		
		Для счМес = 1 по ПоследнийМесяц Цикл
			Стр["План"+Строка(счМес)] = 0;
			Попытка//нужна для очистки плана на месяц, там нет этой колонки
				Стр["Рез"+Строка(счМес)] = 0;
			Исключение
			КонецПопытки;
		КонецЦикла;
			
		ОчиститьДеревоБДРПланРекурсивноСервер(Стр.Строки, ПоследнийМесяц);
	КонецЦикла;
	
КонецПроцедуры

//очищает план для заполнения его фактом из запроса к регистру БДР
//за те месяцы, которые находятся в интервале от начала года
//до текущей даты
Процедура ОчиститьДеревоБДРПланРекурсивноСервер(СтрокиДереваФормы, ПоследнийМесяц = 13) Экспорт
	
	Для Каждого Стр Из СтрокиДереваФормы Цикл
		Если ТипЗнч(Стр.СтатьяДР) = Тип("Строка") Тогда //это строки НачОст и КонОст
			Продолжить;
		КонецЕсли;
		
		Для сч = 1 по ПоследнийМесяц Цикл
			Стр["План"+Строка(сч)] = 0;
			Попытка//нужна для очистки плана на месяц, там нет этой колонки
				Стр["Рез"+Строка(сч)] = 0;
			Исключение
			КонецПопытки;
		КонецЦикла;
			
		ОчиститьДеревоБДРПланРекурсивноСервер(Стр.Строки, ПоследнийМесяц);
	КонецЦикла;
	
 КонецПроцедуры

Функция ИмяМесяцаПоНомеру(НомерМесяца) Экспорт
    Возврат НРег(Формат(ДобавитьМесяц('19700101', НомерМесяца-1), "ДФ=MMMM"));
КонецФункции // ИмяМесяцаПоНомеру()

Функция НомерМесяцаПоИмени(ИмяМесяца) Экспорт
    ИмяМесяца = НРег(ИмяМесяца);
	Если ИмяМесяца = "январь" Тогда
		Возврат 1;
	ИначеЕсли ИмяМесяца = "февраль" Тогда
		Возврат 2;
	ИначеЕсли ИмяМесяца = "март" Тогда
		Возврат 3;
	ИначеЕсли ИмяМесяца = "апрель" Тогда
		Возврат 4;
	ИначеЕсли ИмяМесяца = "май" Тогда
		Возврат 5;
	ИначеЕсли ИмяМесяца = "июнь" Тогда
		Возврат 6;
	ИначеЕсли ИмяМесяца = "июль" Тогда
		Возврат 7;
	ИначеЕсли ИмяМесяца = "август" Тогда
		Возврат 8;
	ИначеЕсли ИмяМесяца = "сентябрь" Тогда
		Возврат 9;
	ИначеЕсли ИмяМесяца = "октябрь" Тогда
		Возврат 10;
	ИначеЕсли ИмяМесяца = "ноябрь" Тогда
		Возврат 11;
	ИначеЕсли ИмяМесяца = "декабрь" Тогда
		Возврат 12;
	Иначе
		Возврат "";
	КонецЕсли;	

КонецФункции // НомерМесяцаПоИмени()

Функция ПолучитьЧислоДнейВГоду(ПараметрДата) Экспорт
	Возврат Окр((КонецГода(ПараметрДата)-НачалоГода(ПараметрДата)) / 86400,0,1);
КонецФункции

//////////////////////////////////////////////////////////////////////
// ВАЛЮТНЫЙ УЧЕТ
//

Функция ПолучитьСуммуВВалютеРегл(Сумма, Валюта, Курс, Кратность) Экспорт

	ВалютаРегл 		= Константы.ВалютаРегламентированногоУчета.Получить();
	Возврат РаботаСКурсамиВалют.ПересчитатьИзВалютыВВалюту(
		Сумма,     Валюта, 	  ВалютаРегл, 
		Курс,	   1, 
		Кратность, 1);
	
	//Возврат РаботаСКурсамиВалют.ПересчитатьИзВалютыВВалюту(
	//	Сумма, ВалютаРегл, Валюта, 
	//	КурсВалютыРегл.Курс, КурсВалюты.Курс, 
	//	КурсВалютыРегл.Кратность, КурсВалюты.Кратность);
		
КонецФункции // ПолучитьСуммуВВалютеРегл()

Функция ПолучитьРеглВалюту() Экспорт
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции

//////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ДОКУМЕНТОВ
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
// УЧЕТ КРЕДИТОВ
//

Процедура ДвиженияКредитов(Док, Дата, КошелекКредита, Сумма, ВидДвижения, Валюта, Курс, Кратность) Экспорт
	
		
	Движения			 	= Док.Движения;
	Движение 				= Движения.Кредиты.Добавить();
	Движение.ВидДвижения 	= ВидДвижения;
	Движение.Период 		= Дата;
	Движение.Кошелек 		= КошелекКредита;
	
	//движения формируем в валюте кошелька и в валюте регл учета
	КурсВалютыНач 			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Док.Дата);
	КурсВалютыНач.Курс 		= Курс;
	КурсВалютыКон			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(КошелекКредита.Валюта, Док.Дата);		
	
	Если Валюта = КошелекКредита.Валюта Тогда
		КурсВалютыКон.Курс = КурсВалютыНач.Курс;
	КонецЕсли;
	
	//Движение.Сумма 			= Сумма;
	//нужно пересчитать сумму из валюты документа в валюту кошелька по курсу из документа
	Движение.Сумма			= РаботаСКурсамиВалют.ПересчитатьИзВалютыВВалюту(
	Сумма, 		Валюта,  	 КошелекКредита.Валюта, 
	КурсВалютыНач.Курс, 	 КурсВалютыКон.Курс, 
	КурсВалютыНач.Кратность, КурсВалютыКон.Кратность);
	
	Движение.СуммаРегл		= ОбщийМодуль1Сервер.ПолучитьСуммуВВалютеРегл(Сумма, Валюта, Курс, Кратность);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРУ НАКОПЛЕНИЯ "ДЕНЕЖНЫЕ СРЕДСТВА"
//

//Параметры
//ДДС - Движения.ДенежныеСредства
//ВидДвижения - ВидДвиженияНакопления (приход или расход)
//Валюта - та валюта, в которой исчисляется параметр Сумма
Процедура ДвижениеДенежныхСредств(ДДС, ВидДвижения, Дата, Кошелек, Сумма, Валюта, Курс, Кратность, ЭтоПрогноз=Ложь) Экспорт

	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движение 				= ДДС.Добавить();
	Движение.ВидДвижения 	= ВидДвижения;//ВидДвиженияНакопления.Расход;
	Движение.Период 		= Дата;
	Движение.Кошелек 		= Кошелек;
	
	//движения формируем в валюте кошелька и в валюте регл учета
	КурсВалютыНач 			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	КурсВалютыНач.Курс 		= Курс;
	КурсВалютыКон			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Кошелек.Валюта, Дата);		
	
	Если Валюта = Кошелек.Валюта Тогда
		КурсВалютыКон.Курс = КурсВалютыНач.Курс;
	КонецЕсли;
	
	//нужно пересчитать сумму из валюты документа в валюту кошелька по курсу из документа
	Движение.Сумма			= РаботаСКурсамиВалют.ПересчитатьИзВалютыВВалюту(
	Сумма, 		Валюта,  	 Кошелек.Валюта, 
	КурсВалютыНач.Курс, 	 КурсВалютыКон.Курс, 
	КурсВалютыНач.Кратность, КурсВалютыКон.Кратность);

	Движение.СуммаРегл		= ОбщийМодуль1Сервер.ПолучитьСуммуВВалютеРегл(Сумма, Валюта, Курс, Кратность);	

	Если ЭтоПрогноз Тогда
		Движение.СуммаПрогноз = Движение.Сумма;
		Движение.СуммаПрогнозРегл = Движение.СуммаРегл;
		Движение.Сумма = 0;
		Движение.СуммаРегл = 0;
	Иначе
		Движение.СуммаПрогноз = 0;
		Движение.СуммаПрогнозРегл = 0;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРУ НАКОПЛЕНИЯ "БДР"
//

//Параметры
//БДР - Движения.БДР
//ВидДвижения - ВидДвиженияНакопления (приход или расход)
//
Процедура ДвижениеБДРФакт(БДР, СтатьяДР, Сумма, Дата, Номенклатура=Неопределено, Контрагент=Неопределено, Проект=Неопределено, ЭтоПрогноз=Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(СтатьяДР) Тогда
		Возврат;
	КонецЕсли;
	
	Движение 						= БДР.Добавить();
	Движение.Период 				= Дата;
	Движение.СтатьяДоходовРасходов 	= СтатьяДР;
	Если ЭтоПрогноз Тогда
		Движение.СуммаФактПрогноз	= Сумма;
		//Движение.СуммаФакт			= Сумма;
	Иначе
		Движение.СуммаФакт 			= Сумма;
	КонецЕсли;
	
	Если Номенклатура <> Неопределено Тогда
		Движение.Номенклатура 		= Номенклатура;
	КонецЕсли;	
	Если Контрагент <> Неопределено Тогда
		Движение.Контрагент 		= Контрагент;
	КонецЕсли;	
    Если Проект <> Неопределено Тогда
		Движение.Проект 			= Проект;
	КонецЕсли;	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРУ НАКОПЛЕНИЯ "ОборотыПоПроектам"
//

//Параметры
//БДР - Движения.БДР
//ВидДвижения - ВидДвиженияНакопления (приход или расход)
//
Процедура ДвижениеОборотыПоПроектам(ОборотыПоПроектам, Проект, СтатьяДР, Кошелек, Сумма, Дата, Валюта, Курс, Кратность) Экспорт

	Движение 			= ОборотыПоПроектам.Добавить();
	Движение.Период 	= Дата;
	Движение.Проект 	= Проект;
	Движение.СтатьяДР 	= СтатьяДР;
	Движение.Кошелек 	= Кошелек;
	
	//движения формируем в валюте кошелька и в валюте регл учета
	КурсВалютыНач 			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	КурсВалютыНач.Курс 		= Курс;
	КурсВалютыКон			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Кошелек.Валюта, Дата);		
	
	Если Валюта = Кошелек.Валюта Тогда
		КурсВалютыКон.Курс = КурсВалютыНач.Курс;
	КонецЕсли;
	
	//нужно пересчитать сумму из валюты документа в валюту кошелька по курсу из документа
	Движение.Сумма			= РаботаСКурсамиВалют.ПересчитатьИзВалютыВВалюту(
	Сумма, 		Валюта,  	 Кошелек.Валюта, 
	КурсВалютыНач.Курс, 	 КурсВалютыКон.Курс, 
	КурсВалютыНач.Кратность, КурсВалютыКон.Кратность);

	Движение.СуммаРегл		= ОбщийМодуль1Сервер.ПолучитьСуммуВВалютеРегл(Сумма, Валюта, Курс, Кратность);	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРУ НАКОПЛЕНИЯ "ДОЛГИ"
//

//Параметры
//БДР - Движения.БДР
//ВидДвижения - ВидДвиженияНакопления (приход или расход)
//
Процедура ДвижениеПоДолгам(Долги, Контрагент, Сумма, Дата, ВидДолга, Валюта, Курс, Кратность) Экспорт
    //Перем ВидДолга;
	Перем ВидДвижения;
	
	ДокОбъект = Долги.Отбор.Регистратор.Значение.ПолучитьОбъект();
	Долги.Записывать = Истина;
	Движение 						= Долги.Добавить();
	Движение.Период 				= Дата;
	Движение.Контрагент 			= Контрагент;
	Движение.Сумма	 				= Сумма;
    Движение.СуммаРегл 				= ОбщийМодуль1Сервер.ПолучитьСуммуВВалютеРегл(Сумма, Валюта, Курс, Кратность);
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ВводОстатковДолгов") Тогда
		ВидДвижения			= ВидДвиженияНакопления.Приход;
		
	ИначеЕсли ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПоступлениеДолга") Тогда
		Если ВидДолга 			= Перечисления.ВидыДолга.Мой Тогда
			ВидДвижения			= ВидДвиженияНакопления.Приход;
		ИначеЕсли ВидДолга 			= Перечисления.ВидыДолга.Мне Тогда
			ВидДвижения			= ВидДвиженияНакопления.Расход;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ВыдачаДолга") Тогда
		Если ВидДолга 			= Перечисления.ВидыДолга.Мне Тогда
			ВидДвижения			= ВидДвиженияНакопления.Приход;
		ИначеЕсли ВидДолга 			= Перечисления.ВидыДолга.Мой Тогда
			ВидДвижения			= ВидДвиженияНакопления.Расход;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.СписаниеДолга") Тогда
		ВидДвижения			= ВидДвиженияНакопления.Расход;
		
	КонецЕсли;
	
	Движение.ВидДолга 			= ВидДолга;
	Движение.ВидДвижения		= ВидДвижения;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИБ
//

Функция ЕстьДанныеВРегистреВерсииПодсистем() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииПодсистем.ИмяПодсистемы,
		|	ВерсииПодсистем.Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ЕстьДанные = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЕстьДанные = Истина;
	КонецЦикла;
	Возврат ЕстьДанные;
КонецФункции	

//////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЧТОЙ
//

Процедура СохранитьАдресВАдреснойКниге(Адрес) Экспорт
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
//УСЛОВНОЕ ОФОРМЛЕНИЕ СПИСКА

//прог 20 10 11
//спижжено из schedevr
//используется для раскраски строк дин списка присоединенных файлов
//вызывается из ПриСозданииНаСервере формы "ФормаСпискаПрисоединенныхФайлов" спр Файлы
//заполняет условное оформление списка файлов
//параметр Список - динамический список
Процедура ЗаполнитьУсловноеОформлениеСпискаФайлов(Список) Экспорт
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйДругимПользователем);
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	Отбор.ПравоеЗначение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	Отбор.ПравоеЗначение = ОбщегоНазначения.ТекущийПользователь();
КонецПроцедуры	


//////////////////////////////////////////////////////////////////////
//ПЕРИОДИЧЕСКИЕ РАСЧЕТЫ

Функция ПолучитьСтавкуДепозита(Депозит, Дата, Сумма)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции


//обрабочитк события "ПриЗаписи" документа "Пополнение депозита"
Процедура РассчитатьДепозитПриЗаписи(Источник, Отказ) Экспорт
	
	
КонецПроцедуры


Функция ПолучитьТаблицуСтавок(Депозит, Дата, СрокВДнях) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиПоДепозитамСрезПоследних.СуммаОт,
		|	СтавкиПоДепозитамСрезПоследних.СуммаДо,
		|	СтавкиПоДепозитамСрезПоследних.Ставка
		|ИЗ
		|	РегистрСведений.СтавкиПоДепозитам.СрезПоследних(
		|			&ДатаСреза,
		|			Депозит = &Депозит
		|				И СрокВДнях = &Срок) КАК СтавкиПоДепозитамСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	СуммаОт Убыв";

	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Депозит", Депозит);
	Запрос.УстановитьПараметр("Срок", СрокВДнях);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции






Функция ДополнитьСтроку(Стр, Чем, Длина) Экспорт
	Если Длина=0 Тогда
		Возврат "";
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(Стр);
	СчЦикла = Длина - ДлинаСтроки;
	Если СчЦикла<=0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ВремСтр = "";
	Для сч = 1 По СчЦикла Цикл
		ВремСтр = ВремСтр + Чем;
	КонецЦикла;
	
	Возврат ВремСтр + Стр;
	
КонецФункции

Функция ПолучитьВалютуРеглУчетаСервер() Экспорт
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции
