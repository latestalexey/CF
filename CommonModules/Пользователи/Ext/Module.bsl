////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции программного интерфейса

// Функция АвторизованныйПользователь возвращает
// текущего пользователя сеанса.
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи.
// 
Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//прог
	//Возврат ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь), ПараметрыСеанса.ТекущийПользователь, ПараметрыСеанса.ТекущийВнешнийПользователь);
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

// Получает значение параметра сеанса "Текущий пользователь"
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи
//
Функция ТекущийПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

// Функция ЭтоПолноправныйПользовательИБ проверяет,
// является ли полноправным текущий пользователь ИБ или
// пользователь ИБ заданного пользователя (обычного или внешнего).
//
//  Полноправными считается:
// а) пользователь ИБ при пустом списке пользователей ИБ,
//    если основная роль не задана или ПолныеПрава,
// б) пользователь ИБ с ролью ПолныеПрава.
//
//
// Параметры:
//  Пользователь - Неопределено (проверяется текущий пользователь ИБ),
//                 Справочник.Пользователи, Справочник.ВнешниеПользователи
//                 (осуществляется поиск пользователя ИБ по уникальному
//                  идентификатору, заданному в реквизите ИдентификаторПользователяИБ,
//                  если пользователь ИБ не найден, возвращается Ложь).
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользовательИБ(Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Пользователь) И Пользователь <> АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь, "ИдентификаторПользователяИБ"));
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	Если ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
		Если ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
			
			Возврат РольДоступна("ПолныеПрава") ИЛИ ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор).Роли.Содержит(Метаданные.Роли.ПолныеПрава);
		Иначе
			// Авторизован пустой пользователь - список пользователей пуст,
			// если основная роль пустая - все права разрешены.
			Если Метаданные.ОсновнаяРоль = Неопределено ИЛИ
				 Метаданные.ОсновнаяРоль = Метаданные.Роли.ПолныеПрава Тогда
				
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
	КонецЕсли;
	
КонецФункции

// Функция ПолноеИмяНеУказанногоПользователя возвращает
// представление не указанного пользователя, т.е. когда
// список пользователей пуст.
// 
// Возвращаемое значение:
//  Строка.
//
Функция ПолноеИмяНеУказанногоПользователя() Экспорт
	
	Возврат НСтр("ru = '<Не указан>'");
	
КонецФункции

// Функция СоздатьПервогоАдминистратора используется
// при обновлении и начальном заполнении информационной базы
//  При использовании подсистемы УправлениеДоступом
// первый администратор будет автоматически включен
// в группу доступа Администраторы (если действие встроено)
//
// Параметры:
//  УчетнаяЗапись - ПользовательИнформационнойБазы - используется
//                  когда нужно создать первого администратора из уже имеющегося
//                  пользователя ИБ (см. функцию Пользователи.ОшибкаАвторизации())
//
// Возвращаемое значение:
//  Неопределено - пользователь связанный с пользователем ИБ с административными правами уже существует,
//  СправочникСсылка.Пользователи - пользователь с которым связан администратор
//
Функция СоздатьПервогоАдминистратора(УчетнаяЗапись = Неопределено) Экспорт
	
	// Добавление администратора (администратор системы - полные права).
	
	Если УчетнаяЗапись = Неопределено Тогда
		// Если существует пользователь с правом администрирование,
		// тогда первый администратор уже создан и его не требуется создавать.
		УчетнаяЗапись = Неопределено;
		Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		Если УчетнаяЗапись = Неопределено Тогда
			УчетнаяЗапись = ПользователиИнформационнойБазы.СоздатьПользователя();
			УчетнаяЗапись.Имя       = "Администратор";
			УчетнаяЗапись.ПолноеИмя = УчетнаяЗапись.Имя;
			УчетнаяЗапись.Роли.Очистить();
			УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			УчетнаяЗапись.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательПоИдентификаторуСуществует(УчетнаяЗапись.УникальныйИдентификатор) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", УчетнаяЗапись.УникальныйИдентификатор);
		// Если администратор связан с внешним пользователем - это ошибка, требуется очистить связь
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			ВнешнийПользователь = Справочники.ВнешниеПользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", УчетнаяЗапись.УникальныйИдентификатор);
			ВнешнийПользовательОбъект = ВнешнийПользователь.ПолучитьОбъект();
			ВнешнийПользовательОбъект.ОбменДанными.Загрузка = Истина;
			ВнешнийПользовательОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоНаименованию(УчетнаяЗапись.ПолноеИмя);
		Если ЗначениеЗаполнено(Пользователь)
		   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
		   И Пользователь.ИдентификаторПользователяИБ <> УчетнаяЗапись.УникальныйИдентификатор
		   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
			Пользователь = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательСоздан = Истина;
	Иначе
		Пользователь = Пользователь.ПолучитьОбъект();
		ПользовательСоздан = Ложь;
	КонецЕсли;
	Пользователь.ИдентификаторПользователяИБ = УчетнаяЗапись.УникальныйИдентификатор;
	Пользователь.Наименование = УчетнаяЗапись.ПолноеИмя;
	Пользователь.ОбменДанными.Загрузка = Истина;
	Пользователь.Записать();
	Если ПользовательСоздан Тогда
		ОбновитьСоставГруппПользователей(Справочники.ГруппыПользователей.ВсеПользователи);
	КонецЕсли;
	
	ПользователиПереопределяемый.ПриЗаписиПервогоАдминистратора(Пользователь.Ссылка);
	
	Возврат Пользователь.Ссылка;
	
КонецФункции

// Функция выполняет поиск элемента справочника Пользователи
// по имени пользователя информационной базы
// Параметры
//  ИмяПользователя - строка - имя пользователя информационной базы
// Возвращаемое значение
//  ссылка на пользователя типа СправочникСсылка.Пользователи,
//  если элемент справочника не найден, возвращается пустая ссылка,
//  если пользователь ИБ не найден, возвращается Неопределено.
//
// Примечание: В случае, если пользователь имеет административные права,
//	то допускается поиск любого пользователя. Если пользователь не имеет
//	административных прав, то допускается поиск только того пользователя,
//	под которым данный пользователь авторизовался.
//
Функция НайтиПоИмени(знач ИмяПользователяИБ) Экспорт
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

// Функция СформироватьДанныеВыбораПользователя возвращает список
// пользователей, групп пользователей, внешних пользователей и групп внешних пользователей
// не помеченных на удаление.
//  Используется в обработчиках событий ОкончаниеВводаТекста и АвтоПодбор.
//
// Параметры:
//  Текст        - Строка, символы введенные пользователем.
//  ВключаяГруппы - Булево, если Истина, включать группы пользователей и внешних пользователей.
//                  Если ФО ИспользоватьГруппыПользователей отключена, параметр игнорируется.
//  ВключаяВнешнихПользователей - Неопределено, Ложь, Истина,
//                 когда Неопределено, взять значение ВнешниеПользователи.ИспользоватьВнешнихПользователей().
//  БезПользователей - Булево, если Истина, то элементы справочника Пользователи исключаются из результата.
//
Функция СформироватьДанныеВыбораПользователя(Знач Текст, Знач ВключаяГруппы = Истина, Знач ВключаяВнешнихПользователей = Неопределено, БезПользователей = Ложь) Экспорт
	
	ВключаяГруппы = ВключаяГруппы И ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ВключаяГруппы", ВключаяГруппы);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Ссылка,
	|	"""" КАК Наименование,
	|	-1 КАК НомерКартинки
	|ГДЕ
	|	ЛОЖЬ";
	
	Если НЕ БезПользователей Тогда
		Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ " +
		"ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.Наименование,
		|	ВЫБОР
		|		КОГДА Пользователи.ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
		|			ТОГДА 4
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК НомерКартинки
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	(НЕ Пользователи.ПометкаУдаления)
		|	И Пользователи.Наименование ПОДОБНО &Текст
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка,
		|	ГруппыПользователей.Наименование,
		|	3
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыПользователей
		|ГДЕ
		|	&ВключаяГруппы
		|	И (НЕ ГруппыПользователей.ПометкаУдаления)
		|	И ГруппыПользователей.Наименование ПОДОБНО &Текст";
	КонецЕсли;
	
	//Если ТипЗнч(ВключаяВнешнихПользователей) <> Тип("Булево") Тогда
	//	ВключаяВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	//КонецЕсли;
	ВключаяВнешнихПользователей = Ложь;//ВключаяВнешнихПользователей И ПравоДоступа("Чтение", Метаданные.Справочники.ВнешниеПользователи);
	
	Если ВключаяВнешнихПользователей Тогда
		Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ " +
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка,
		|	ВнешниеПользователи.Наименование,
		|	ВЫБОР
		|		КОГДА ВнешниеПользователи.ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
		|			ТОГДА 10
		|		ИНАЧЕ 7
		|	КОНЕЦ КАК НомерКартинки
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	(НЕ ВнешниеПользователи.ПометкаУдаления)
		|	И ВнешниеПользователи.Наименование ПОДОБНО &Текст
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыВнешнихПользователей.Ссылка,
		|	ГруппыВнешнихПользователей.Наименование,
		|	9
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
		|ГДЕ
		|	&ВключаяГруппы
		|	И (НЕ ГруппыВнешнихПользователей.ПометкаУдаления)
		|	И ГруппыВнешнихПользователей.Наименование ПОДОБНО &Текст";
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование, , БиблиотекаКартинок["ПиктограммыПользователя" + Формат(Выборка.НомерКартинки + 1, "ЧЦ=2; ЧВН=; ЧГ=")]);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Процедура ЗаполнитьНомераКартинокПользователей заполняет номера картинок
// пользователей, групп пользователей, внешних пользователей и групп внешних пользователей.
// 
// Параметры:
//  Таблица      - ДанныеФормыКоллекция, ДанныеФормыДерево.
//  ИмяПоляПользователь - Строка, имя поля содержащего ссылку на пользователя, группу пользователей,
//                 внешнего пользователя или группу внешних пользователей.
//  ИмяПоляНомераКартинки - Строка, имя поля содержащего номер картинки, который нужно установить.
//  ИдентификаторСтроки  - Неопределено, Число, идентификатор строки (не порядковый номер),
//                 когда Неопределено, заполнить картинки для всех строк таблицы.
//
Процедура ЗаполнитьНомераКартинокПользователей(Знач Таблица, Знач ИмяПоляПользователь, Знач ИмяПоляНомераКартинки, Знач ИдентификаторСтроки = Неопределено, Знач ОбработатьИерархиюВторогоИТретьегоУровней = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		МассивСтрок = Неопределено;
	Иначе
		ВыбраннаяСтрока = Таблица.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ВыбраннаяСтрока);
	КонецЕсли;
	
	Если ТипЗнч(Таблица) = Тип("ДанныеФормыДерево") Тогда
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = Таблица.ПолучитьЭлементы();
		КонецЕсли;
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для каждого Строка Из МассивСтрок Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
			Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
				Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
					ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка2[ИмяПоляПользователь];
					Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
						ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка3[ИмяПоляПользователь];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаПользователей = Таблица.Выгрузить(МассивСтрок, ИмяПоляПользователь);
		МассивСтрок = Таблица;
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.ИмяПоляПользователь КАК Пользователь
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	&Пользователи КАК Пользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Пользователь,
	|	ВЫБОР
	|		КОГДА Пользователи.Пользователь = НЕОПРЕДЕЛЕНО
	|			ТОГДА -1
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.Пользователи)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.Пользователи).ПометкаУдаления
	|						ТОГДА 0
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.Пользователи).ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
	|								ТОГДА 4
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыПользователей)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыПользователей).ПометкаУдаления
	|						ТОГДА 2
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ВнешниеПользователи).ПометкаУдаления
	|						ТОГДА 6
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ВнешниеПользователи).ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
	|								ТОГДА 10
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыВнешнихПользователей).ПометкаУдаления
	|						ТОГДА 8
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ -2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	Пользователи КАК Пользователи", "ИмяПоляПользователь", ИмяПоляПользователь));
	Запрос.УстановитьПараметр("Пользователи", ТаблицаПользователей);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	НомераКартинок = Запрос.Выполнить().Выгрузить();
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Для каждого Строка Из МассивСтрок Цикл
			Строка[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка[ИмяПоляПользователь], "Пользователь").НомерКартинки;
			Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
				Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
					Строка2[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка2[ИмяПоляПользователь], "Пользователь").НомерКартинки;
					Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
						Строка3[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка3[ИмяПоляПользователь], "Пользователь").НомерКартинки;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВыбраннаяСтрока[ИмяПоляНомераКартинки] = НомераКартинок.Найти(ВыбраннаяСтрока[ИмяПоляПользователь], "Пользователь").НомерКартинки;
		Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
			Для каждого Строка2 Из ВыбраннаяСтрока.ПолучитьЭлементы() Цикл
				Строка2[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка2[ИмяПоляПользователь], "Пользователь").НомерКартинки;
				Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
					Строка3[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка3[ИмяПоляПользователь], "Пользователь").НомерКартинки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура ПриНаличииГруппПользователейУстановитьИспользование
// используется, как процедура обновления в прикладном решении.
//  При наличии групп пользователей или групп внешних пользователей
// устанавливается константа/функциональная опция ИспользоватьГруппыПользователей.
//
Процедура ПриНаличииГруппПользователейУстановитьИспользование() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	|ГДЕ
	|	ГруппыВнешнихПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи)");
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Константы.ИспользоватьГруппыПользователей.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы для внутренних нужд

// Функция ПрочитатьПользователяИБ считывает свойства пользователя
// информационной базы по строковому или уникальному идентификатору.
//
// Параметры:
//  Идентификатор - Неопределено, Строка, УникальныйИдентификатор (идентификатор пользователя).
//  Свойства     - Структура:
//                 ПользовательИнфБазыУникальныйИдентификатор   - УникальныйИдентификатор
//                 ПользовательИнфБазыИмя                       - Строка
//                 ПользовательИнфБазыПолноеИмя                 - Строка
//
//                 ПользовательИнфБазыАутентификацияСтандартная - Булево
//                 ПользовательИнфБазыПоказыватьВСпискеВыбора   - Булево
//                 ПользовательИнфБазыПароль                    - Неопределено
//                 ПользовательИнфБазыСохраняемоеЗначениеПароля - Строка
//                 ПользовательИнфБазыПарольУстановлен          - Булево
//                 ПользовательИнфБазыЗапрещеноИзменятьПароль   - Булево
//
//                 ПользовательИнфБазыАутентификацияОС          - Булево
//                 ПользовательИнфБазыПользовательОС            - Строка
//
//                 ПользовательИнфБазыОсновнойИнтерфейс         - Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//                 ПользовательИнфБазыРежимЗапуска              - Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//                 ПользовательИнфБазыЯзык                      - Строка (имя языка из коллекции Метаданные.Языки)
//
//  Роли           - Массив значений типа Строка (имена ролей из коллекции Метаданные.Роли)
//  
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ПрочитатьПользователяИБ(Знач Идентификатор, Свойства = Неопределено, Роли = Неопределено, ОписаниеОшибки = "", ПользовательИБ = Неопределено) Экспорт
	
	// Подготовка структур возвращаемых данных
	Свойства = Новый Структура;
	Свойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор",   Новый УникальныйИдентификатор);
	Свойства.Вставить("ПользовательИнфБазыИмя",                       "");
	Свойства.Вставить("ПользовательИнфБазыПолноеИмя",                 "");
	Свойства.Вставить("ПользовательИнфБазыАутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПользовательИнфБазыПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыПароль",                    Неопределено);
	Свойства.Вставить("ПользовательИнфБазыСохраняемоеЗначениеПароля", "");
	Свойства.Вставить("ПользовательИнфБазыПарольУстановлен",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыПользовательОС",            "");
	Свойства.Вставить("ПользовательИнфБазыОсновнойИнтерфейс",         ?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	Свойства.Вставить("ПользовательИнфБазыРежимЗапуска",              "Авто");
	Свойства.Вставить("ПользовательИнфБазыЯзык",                      ?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Роли = Новый Массив;
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пользователь информационной базы ""%1""' не найден!"), Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	Свойства.ПользовательИнфБазыУникальныйИдентификатор     = ПользовательИБ.УникальныйИдентификатор;
	Свойства.ПользовательИнфБазыИмя                         = ПользовательИБ.Имя;
	Свойства.ПользовательИнфБазыПолноеИмя                   = ПользовательИБ.ПолноеИмя;
	Свойства.ПользовательИнфБазыАутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
	Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора     = ПользовательИБ.ПоказыватьВСпискеВыбора;
	Свойства.ПользовательИнфБазыСохраняемоеЗначениеПароля   = ПользовательИБ.СохраняемоеЗначениеПароля;
	Свойства.ПользовательИнфБазыПарольУстановлен            = ПользовательИБ.ПарольУстановлен;
	Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль     = ПользовательИБ.ЗапрещеноИзменятьПароль;
	Свойства.ПользовательИнфБазыАутентификацияОС            = ПользовательИБ.АутентификацияОС;
	Свойства.ПользовательИнфБазыПользовательОС              = ПользовательИБ.ПользовательОС;
	Свойства.ПользовательИнфБазыОсновнойИнтерфейс           = ?(ПользовательИБ.ОсновнойИнтерфейс = Неопределено, "", ПользовательИБ.ОсновнойИнтерфейс.Имя);
	Свойства.ПользовательИнфБазыРежимЗапуска                = ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение,
	                                                            "ОбычноеПриложение",
	                                                            ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение,
	                                                              "УправляемоеПриложение",
	                                                              "Авто"));
	Свойства.ПользовательИнфБазыЯзык                        = ?(ПользовательИБ.Язык = Неопределено, "", ПользовательИБ.Язык.Имя);
	
	Для каждого Роль Из ПользовательИБ.Роли Цикл
		Роли.Добавить(Роль.Имя);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция ЗаписатьПользователяИБ
// либо перезаписывает свойства пользователяИБ,
//      найденного по строковому или уникальному идентификатору,
// либо создает нового пользователяИБ, когда задано создать,
//      при этом, если пользовательИБ найден будет ошибка
//
// Параметры:
//  Идентификатор - Строка, УникальныйИдентификатор (идентификатор пользователя).
//  НовыеСвойства - Структура (свойство может быть не задано,
//                            тогда используется прочитанное или начальное значение)
//                 ПользовательИнфБазыУникальныйИдентификатор   - Неопределено (задается после записи пользователя ИБ)
//                 ПользовательИнфБазыИмя                       - Неопределено, Строка
//                 ПользовательИнфБазыПолноеИмя                 - Неопределено, Строка
//
//                 ПользовательИнфБазыАутентификацияСтандартная - Неопределено, Булево
//                 ПользовательИнфБазыПоказыватьВСпискеВыбора   - Неопределено, Булево
//                 ПользовательИнфБазыПароль                    - Неопределено, Строка
//                 ПользовательИнфБазыСохраняемоеЗначениеПароля - Неопределено, Строка
//                 ПользовательИнфБазыПарольУстановлен          - Неопределено, Булево
//                 ПользовательИнфБазыЗапрещеноИзменятьПароль   - Неопределено, Булево
//
//                 ПользовательИнфБазыАутентификацияОС          - Неопределено, Булево
//                 ПользовательИнфБазыПользовательОС            - Неопределено, Строка
//
//                 ПользовательИнфБазыОсновнойИнтерфейс         - Неопределено, Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//                 ПользовательИнфБазыРежимЗапуска              - Неопределено, Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//                 ПользовательИнфБазыЯзык                      - Неопределено, Строка (имя языка из коллекции Метаданные.Языки)
//
//  НовыеРоли      - Неопределено, Массив значений типа Строка (имена ролей из коллекции Метаданные.Роли)
//
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ЗаписатьПользователяИБ(Знач Идентификатор, Знач НовыеСвойства, Знач НовыеРоли, Знач СоздатьНового = Ложь, ОписаниеОшибки = "") Экспорт
	
	ПользовательИБ = Неопределено;
	СтарыеСвойства = Неопределено;
	СтарыеРоли     = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	ПредварительноеЧтение = ПрочитатьПользователяИБ(Идентификатор, СтарыеСвойства, СтарыеРоли, ОписаниеОшибки);
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ) ИЛИ НЕ ПредварительноеЧтение Тогда
		
		Если СоздатьНового Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СоздатьНового Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно создать пользователя информационной базы ""%1""
		                                        |так как он уже существует!'"),
				Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	// Подготовка новых значений свойств
	Для каждого КлючИЗначение Из Свойства Цикл
		Если НовыеСвойства.Свойство(КлючИЗначение.Ключ) И НовыеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
			Свойства[КлючИЗначение.Ключ] = НовыеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеРоли <> Неопределено Тогда
		Роли = НовыеРоли;
	КонецЕсли;
	
	// Установка новых значений свойств
	
	ПользовательИБ.Имя                         = Свойства.ПользовательИнфБазыИмя;
	ПользовательИБ.ПолноеИмя                   = Свойства.ПользовательИнфБазыПолноеИмя;
	ПользовательИБ.АутентификацияСтандартная   = Свойства.ПользовательИнфБазыАутентификацияСтандартная;
	ПользовательИБ.ПоказыватьВСпискеВыбора     = Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора;
	Если Свойства.ПользовательИнфБазыПароль <> Неопределено Тогда
		ПользовательИБ.Пароль                  = Свойства.ПользовательИнфБазыПароль;
	КонецЕсли;
	ПользовательИБ.ЗапрещеноИзменятьПароль     = Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль;
	ПользовательИБ.АутентификацияОС            = Свойства.ПользовательИнфБазыАутентификацияОС;
	ПользовательИБ.ПользовательОС              = Свойства.ПользовательИнфБазыПользовательОС;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыОсновнойИнтерфейс) Тогда
	    ПользовательИБ.ОсновнойИнтерфейс       = Метаданные.Интерфейсы[Свойства.ПользовательИнфБазыОсновнойИнтерфейс];
	Иначе
	    ПользовательИБ.ОсновнойИнтерфейс       = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыРежимЗапуска) Тогда
	    ПользовательИБ.РежимЗапуска            = РежимЗапускаКлиентскогоПриложения[Свойства.ПользовательИнфБазыРежимЗапуска];
	КонецЕсли;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыЯзык) Тогда
	    ПользовательИБ.Язык                    = Метаданные.Языки[Свойства.ПользовательИнфБазыЯзык];
	Иначе
	    ПользовательИБ.Язык                    = Неопределено;
	КонецЕсли;
	
	ПользовательИБ.Роли.Очистить();
	Для каждого Роль Из Роли Цикл
		ПользовательИБ.Роли.Добавить(Метаданные.Роли[Роль]);
	КонецЦикла;
	
	// Добавление роли ПолныеПрава, при попытке создать первого пользователя с пустым списком ролей
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 И
	     НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
	КонецЕсли;
	
	// Попытка записи нового или измененного пользователяИБ
	Попытка
		ПользовательИБ.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ИнформацияОбОшибке.Причина = Неопределено Тогда
			ОписаниеОшибки = ИнформацияОбОшибке.Описание;
		Иначе
			ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
		КонецЕсли;
		ОписаниеОшибки = НСтр("ru = 'Ошибка при записи пользователя информационной базы:'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
	КонецПопытки;
	
	НовыеСвойства.ПользовательИнфБазыУникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор;
	
	ПользователиПереопределяемый.ПриЗаписиПользователяИнформационнойБазы(СтарыеСвойства, Свойства);
	
	Возврат Истина;
	
КонецФункции

// Функция удаляет пользователя информационной базы
// по строковому или уникальному идентификатору.
//
// Параметры:
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция УдалитьПользователяИБ(Знач Идентификатор, ОписаниеОшибки = "") Экспорт
	
	ПользовательИБ = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ) Тогда
		Возврат Ложь;
	Иначе
		Попытка
			ПользовательИБ.Удалить();
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка при удалении пользователя информационной базы:'") + Символы.ПС + ИнформацияОбОшибке().Причина.Описание;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ПользователиПереопределяемый.ПослеУдаленияПользователяИнформационнойБазы(Свойства);
	
	Возврат Истина;
	
КонецФункции

// Функция проверяет существования пользователя информационной базы
// Параметры
// Идентификатор - УникальныйИдентификатор, Строка
//                 УИД пользователяИБ или Имя пользователяИБ
//
// Возвращаемое значение:
//  Булево
//
Функция ПользовательИБСуществует(Знач Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура, определяет пользователя, под которым запущен сеанс и пытается
// найти соответсвие ему в справочнике Пользователи. Если соответствие
// не найдено - создается новый элемент. Параметр сеанса ТекущийПользователь
// устанавливается как ссылка на найденный (созданный) элемент справочника.
//
Процедура ОпределитьТекущегоПользователя(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяПараметра <> "ТекущийПользователь" И ИмяПараметра <> "ТекущийВнешнийПользователь" Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательНеНайден = Ложь;
	СоздатьПользователя  = Ложь;
	
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
		
		Если ЭтоПолноправныйПользовательИБ() Тогда
			ПараметрыСеанса.ТекущийВнешнийПользователь = Справочники.ВнешниеПользователи.ПустаяСсылка();
			
			ИмяПользователя       = ПолноеИмяНеУказанногоПользователя();
			ПолноеИмяПользователя = ПолноеИмяНеУказанногоПользователя();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Наименование = &ПолноеИмяПользователя";
			
			Запрос.Параметры.Вставить("ПолноеИмяПользователя", ПолноеИмяПользователя);
			
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				ПользовательНеНайден = Истина;
				СоздатьПользователя  = Истина;
				ИдентификаторПользователяИБ = "";
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ПараметрыСеанса.ТекущийПользователь = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			ПользовательНеНайден = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		Запрос = Новый Запрос;
		Запрос.Параметры.Вставить("ИдентификаторПользователяИБ ", ИдентификаторПользователяИБ);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		РезультатПользователи = Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВнешниеПользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		РезультатВнешниеПользователи = Запрос.Выполнить();
		
		Если НЕ РезультатВнешниеПользователи.Пустой() Тогда
			
			Выборка = РезультатВнешниеПользователи.Выбрать();
			Выборка.Следующий();
			ПараметрыСеанса.ТекущийПользователь        = Справочники.Пользователи.ПустаяСсылка();
			ПараметрыСеанса.ТекущийВнешнийПользователь = Выборка.Ссылка;
			
			Если НЕ ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
			
				ТекстСообщенияОбОшибке = НСтр("ru = 'Внешние пользователи отключены!'");
				ВызватьИсключение ТекстСообщенияОбОшибке;
			КонецЕсли;
		Иначе
			ПараметрыСеанса.ТекущийВнешнийПользователь = Справочники.ВнешниеПользователи.ПустаяСсылка();
			
			Если РезультатПользователи.Пустой() Тогда
				Если ЭтоПолноправныйПользовательИБ() Тогда
					
					ТекущийПользователь         = ПользователиИнформационнойБазы.ТекущийПользователь();
					ИмяПользователя             = ТекущийПользователь.Имя;
					ПолноеИмяПользователя       = ТекущийПользователь.ПолноеИмя;
					ИдентификаторПользователяИБ = ТекущийПользователь.УникальныйИдентификатор;
					ПользовательПоНаименованию  = СсылкаПользователяПоПолномуНаименованию(ПолноеИмяПользователя);
					
					Если ПользовательПоНаименованию = Неопределено Тогда
						ПользовательНеНайден = Истина;
						СоздатьПользователя  = Истина;
					Иначе
						ПараметрыСеанса.ТекущийПользователь = ПользовательПоНаименованию;
					КонецЕсли;
				Иначе
					ПользовательНеНайден = Истина;
				КонецЕсли;
			Иначе
				Выборка = РезультатПользователи.Выбрать();
				Выборка.Следующий();
				ПараметрыСеанса.ТекущийПользователь = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьПользователя Тогда
		СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		ПараметрыСеанса.ТекущийПользователь = СсылкаНового;
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
		НовыйПользователь.Наименование                = ПолноеИмяПользователя;
		НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
		
		Попытка
			НовыйПользователь.Записать();
		Исключение
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                           НСтр("ru = 'Авторизация не выполнена.
			                                      |Пользователь: %1 не найден в справочнике ""Пользователи"".
			                                      |
			                                      |Обратитесь к администратору.
			                                      |Возникла ошибка при добавлении пользователя в справочник.
			                                      |%2'"),
			                           ИмяПользователя,
			                           КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецПопытки;
	
	ИначеЕсли ПользовательНеНайден Тогда
		ВызватьИсключение ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя);
	КонецЕсли;
	
	УстановленныеПараметры.Добавить(ИмяПараметра);
	
КонецПроцедуры

// Функция определяет наличие элемента в справочнике Пользователи
// или ВнешниеПользователи по уникальному идентификатору
// пользователя информационной.
//  Функция используется для проверки связи пользователяИБ только
// с одним элементом справочников Пользователи, ВнешниеПользователи.
//
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор пользователя ИБ
//  СсылкаНаТекущего - СправочникСсылка.Пользователи
//                     СправочникСсылка.ВнешниеПользователи
//                     Неопределено, - когда параметр задан
//                     указанная ссылка исключается из поиска,
//                     т.е. может быть найден только другой элемент.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор, СсылкаНаТекущего = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	               |	И Пользователи.Ссылка <> &СсылкаНаТекущего
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ИСТИНА
	               |ИЗ
	               |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	               |ГДЕ
	               |	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	               |	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущего";
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция проверяет связан ли пользовательИБ с указанным
// именем с элементом справочника Пользователи или
// элементом справочника ВнешниеПользователи
//  Если пользователь не найден, значит тоже не связан
// 
// Параметры:
//  ИмяПользователя - Строка
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательИБНеЗанят(знач ИмяПользователя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли
	
КонецФункции

// Процедура ОбновитьСоставГруппПользователей обновляет в регистре сведений
// "Состав групп пользователей" соответствие групп пользователей и пользователей
// с учетом иерархии групп пользователей (родитель включает пользователей порожденных групп).
//  Эти данные требуются для формы списка и формы выбора пользователей.
//  Данные регистра могут быть применены в других целях для повышения производительности,
// т.к. не требуется работать с иерархией на языке запросов.
//
// Параметры:
//  ГруппаПользователей - СправочникСсылка.ГруппыПользователей
//
Процедура ОбновитьСоставГруппПользователей(Знач ГруппаПользователей) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка групп родителей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаГруппРодителей.Родитель,
	|	ТаблицаГруппРодителей.Ссылка
	|ПОМЕСТИТЬ ТаблицаГруппРодителей
	|ИЗ
	|	&ТаблицаГруппРодителей КАК ТаблицаГруппРодителей");
	Запрос.УстановитьПараметр("ТаблицаГруппРодителей", ТаблицаГруппРодителей("Справочник.ГруппыПользователей"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Выполнение для текущий группы и каждой группы-родителя.
	Пока НЕ ГруппаПользователей.Пустая() Цикл
		
		Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
		
		Если ГруппаПользователей <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
			// Удаление связей для удаленных пользователей.
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоставГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГруппРодителей КАК ТаблицаГруппРодителей
			|			ПО (ТаблицаГруппРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
			|				И (ТаблицаГруппРодителей.Родитель = &ГруппаПользователей)
			|		ПО (СоставГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
			|			И СоставГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь
			|ГДЕ
			|	СоставГруппПользователей.ГруппаПользователей = &ГруппаПользователей
			|	И ГруппыПользователейСостав.Ссылка ЕСТЬ NULL ";
			ПользователиУдаленныеИзГруппы = Запрос.Выполнить().Выбрать();
			МенеджерЗаписи = РегистрыСведений.СоставГруппПользователей.СоздатьМенеджерЗаписи();
			Пока ПользователиУдаленныеИзГруппы.Следующий() Цикл
				МенеджерЗаписи.ГруппаПользователей = ГруппаПользователей;
				МенеджерЗаписи.Пользователь        = ПользователиУдаленныеИзГруппы.Пользователь;
				МенеджерЗаписи.Удалить();
			КонецЦикла;
		КонецЕсли;
		
		// Добавление связей для добавленных пользователей.
		Если ГруппаПользователей = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи) КАК ГруппаПользователей,
			|	Пользователи.Ссылка КАК Пользователь
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
			|		ПО (СоставГруппПользователей.ГруппаПользователей = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
			|			И (СоставГруппПользователей.Пользователь = Пользователи.Ссылка)
			|ГДЕ
			|	СоставГруппПользователей.Пользователь ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Пользователи.Ссылка,
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
			|		ПО (СоставГруппПользователей.ГруппаПользователей = Пользователи.Ссылка)
			|			И (СоставГруппПользователей.Пользователь = Пользователи.Ссылка)
			|ГДЕ
			|	СоставГруппПользователей.Пользователь ЕСТЬ NULL ";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ГруппаПользователей КАК ГруппаПользователей,
			|	ГруппыПользователейСостав.Пользователь
			|ИЗ
			|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГруппРодителей КАК ТаблицаГруппРодителей
			|		ПО (ТаблицаГруппРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
			|			И (ТаблицаГруппРодителей.Родитель = &ГруппаПользователей)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
			|		ПО (СоставГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
			|			И (СоставГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь)
			|ГДЕ
			|	СоставГруппПользователей.Пользователь ЕСТЬ NULL ";
		КонецЕсли;
		ПользователиДобавленныеВГруппу = Запрос.Выполнить().Выгрузить();
		Если ПользователиДобавленныеВГруппу.Количество() > 0 Тогда
			НаборЗаписей = РегистрыСведений.СоставГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(ПользователиДобавленныеВГруппу);
			НаборЗаписей.Записать(Ложь); // Добавление недостающих записей связей.
		КонецЕсли;
		
		ГруппаПользователей = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ГруппаПользователей, "Родитель");
	КонецЦикла;
	
КонецПроцедуры

// Функция ТаблицаГруппРодителей используется в процедурах ОбновитьСоставГруппПользователей,
// ОбновитьСоставГруппВнешнихПользователей.
//
Функция ТаблицаГруппРодителей(Таблица) Экспорт
	
	// Подготовка состава групп родителей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыТаблицы.Ссылка,
	|	ГруппыТаблицы.Родитель
	|ИЗ
	|	" + Таблица + " КАК ГруппыТаблицы");
	ТаблицаЭлементов = Запрос.Выполнить().Выгрузить();
	ТаблицаЭлементов.Индексы.Добавить("Родитель");
	ТаблицаГруппРодителей = ТаблицаЭлементов.Скопировать(Новый Массив);
	
	Для каждого ОписаниеЭлемента Из ТаблицаЭлементов Цикл
		ОписаниеГруппыРодителя = ТаблицаГруппРодителей.Добавить();
		ОписаниеГруппыРодителя.Родитель = ОписаниеЭлемента.Ссылка;
		ОписаниеГруппыРодителя.Ссылка   = ОписаниеЭлемента.Ссылка;
		ЗаполнитьГруппыРодителя(ОписаниеЭлемента.Ссылка, ОписаниеЭлемента.Ссылка, ТаблицаЭлементов, ТаблицаГруппРодителей);
	КонецЦикла;
	
	Возврат ТаблицаГруппРодителей;
	
КонецФункции

Процедура ЗаполнитьГруппыРодителя(Знач Родитель, Знач ТекущийРодитель, Знач ТаблицаЭлементов, Знач ТаблицаРодителей)
	
	ОписанияГруппРодителя = ТаблицаЭлементов.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));
	Для каждого ОписаниеГруппы Из ОписанияГруппРодителя Цикл
		ОписаниеГруппыРодителя = ТаблицаРодителей.Добавить();
		ОписаниеГруппыРодителя.Родитель = Родитель;
		ОписаниеГруппыРодителя.Ссылка   = ОписаниеГруппы.Ссылка;
		ЗаполнитьГруппыРодителя(Родитель, ОписаниеГруппы.Ссылка, ТаблицаЭлементов, ТаблицаРодителей);
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при начале работы системы
// чтобы проверить возможность выполнения авторизации
// и вызвать заполнение значений параметров сеанса
// ТекущийПользователь и ВнешнийПользователь
//
// Возвращаемое значение:
//  Строка - если не пустая строка, значит ошибка авторизации, следует завершить работу 1С:Предприятия
//
Функция ОшибкаАвторизации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя)
	 ИЛИ ПользовательПоИдентификаторуСуществует(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор) Тогда
		// Авторизуется пользователь по умолчанию
		// или пользовательИБ найден в справочнике
		Возврат "";
	КонецЕсли;
	
	// Требуется, либо создать администратора, либо сообщить об отказе авторизации
	
	ТекстСообщенияОбОшибке = "";
	ТребуетсяСоздатьАдминистратора = Ложь;
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Если ПользователиИБ.Количество() = 1
	 ИЛИ ПравоДоступа("Администрирование", Метаданные, ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда
		// Авторизуется администратор, созданный в конфигураторе
		ТребуетсяСоздатьАдминистратора = Истина;
	Иначе
		// Авторизуется обычный пользователь, созданный в конфигураторе
		ТекстСообщенияОбОшибке = ТекстСообщенияПользовательНеНайденВСправочнике(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	КонецЕсли;
	
	Если ТребуетсяСоздатьАдминистратора Тогда
		//
		Если РольДоступна("ПолныеПрава") Тогда
			//
			Пользователь = СоздатьПервогоАдминистратора(ПользователиИнформационнойБазы.ТекущийПользователь());
			//
			Комментарий = НСтр("ru = 'Обнаружено, что пользователь информационной базы
			                         |с ролью ""Полные права"" был создан в Конфигураторе:
			                         |
			                         |- пользователь не найден в справочнике Пользователи,
			                         |- пользователь зарегистрирован в справочнике Пользователи.
			                         |
			                         |Пользователей информационной базы следует создавать в режиме 1С:Предприятия.'");
			ПользователиПереопределяемый.ПослеЗаписиАдминистратораПриАвторизации(Комментарий);
			ЗаписьЖурналаРегистрации(
					"Пользователи.Администратор зарегистрирован в справочнике Пользователи",
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Справочники.Пользователи,
					Пользователь,
					Комментарий);
		Иначе
			ТекстСообщенияОбОшибке = НСтр("ru = 'Обнаружено, что пользователь информационной базы
			                                    |с правом Администрирование был создан в Конфигураторе.
			                                    |
			                                    |Для входа администратору требуется роль ""Полные права"".
			                                    |
			                                    |Пользователей информационной базы следует создавать в режиме 1С:Предприятия.
			                                    |
			                                    |Работа системы будет завершена.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

Функция ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	
	//Если ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
	//	ТекстСообщенияОбОшибке = НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.
	//										|
	//										|Пользователь ""%1"" не найден в справочниках
	//										|""Пользователи"" и ""Внешние пользователи"".
	//										|
	//										|Обратитесь к администратору.'");
	//Иначе
		ТекстСообщенияОбОшибке = НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.
		                                    |
		                                    |Пользователь ""%1"" не найден в справочнике ""Пользователи"".
		                                    |
		                                    |Обратитесь к администратору.'");
	//КонецЕсли;
	
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ИмяПользователя);
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры-обработчики обновления данных подсистемы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2";
	Обработчик.Процедура = "Пользователи.ЗаполнитьИдентификаторыПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.15";
	Обработчик.Процедура = "Пользователи.ЗаполнениеРегистраСоставГруппПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.5";
	Обработчик.Процедура = "ВнешниеПользователи.ЗаполнитьСоставГруппВнешнихПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.5";
	Обработчик.Процедура = "ВнешниеПользователи.ДляВнешнихПользователейСоздатьПользователейИБ";
	
КонецПроцедуры	

Функция СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Пользователи КАК Пользователи
					|ГДЕ
					|	Пользователи.Наименование = &ПолноеИмя";
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Пользователь = Выборка.Ссылка;
	
	Если ПользовательИБНеЗанят(Пользователь.ИдентификаторПользователяИБ) Тогда
		Возврат Пользователь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура вызывается при обновлении конфигурации на версию 1.0.5.2
// Выполняет попытку сопоставления / заполнения реквизита "ИдентификаторПользователяИБ"
// для каждого элемента справочника Пользователи.
//
Процедура ЗаполнитьИдентификаторыПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокПользователей = Справочники.Пользователи.Выбрать();
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Пока СписокПользователей.Следующий() Цикл
		Пользователь = СписокПользователей.Ссылка;
		Если Не ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
			И НРег(СокрЛП(Пользователь.Наименование)) <> НРег(ПолноеИмяНеУказанногоПользователя()) Тогда
			ПолноеИмяПользователя = СокрЛП(Пользователь.Наименование);
			Для Каждого ПользовательИБ Из ПользователиИБ Цикл
				Если ПолноеИмяПользователя = СокрЛП(Лев(ПользовательИБ.ПолноеИмя, Метаданные.Справочники.Пользователи.ДлинаНаименования))
				   И Не ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор) Тогда
					ОбъектПользователь = Пользователь.ПолучитьОбъект();
					ОбъектПользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
					ОбъектПользователь.Записать();
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при обновлении конфигурации на версию 1.0.5.15
// Выполняется перезапись всех пользователей.
// Возможен вызов с любой версии начиная с 1.0.5.15.
//
Процедура ЗаполнениеРегистраСоставГруппПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Справочники.Пользователи.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
