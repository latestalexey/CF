&НаКлиенте
Процедура ПоляГруппировкиНедоступны()
	
	Элементы.СтраницыПолейГруппировки.ТекущаяСтраница = Элементы.НедоступныеНастройкиПолейГруппировки;
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляДоступны(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеВыбораУЭлемента(ЭлементСтруктуры) Тогда
				
		ЛокальныеВыбранныеПоля = Истина;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
			
	Иначе
			
		ЛокальныеВыбранныеПоля = Ложь;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиВыбранныхПолей;
			
	КонецЕсли;
		
	Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Ложь;
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляНедоступны()
	
	ЛокальныеВыбранныеПоля = Ложь;
	Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Истина;
	Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НедоступныеНастройкиВыбранныхПолей;
					
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоступен(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеОтбораУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальныйОтбор = Истина;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
			
	Иначе
		
		ЛокальныйОтбор = Ложь;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиОтбора;
			
	КонецЕсли;
			
	Элементы.ЛокальныйОтбор.ТолькоПросмотр = Ложь;
	
КонецПроцедуры
		
&НаКлиенте
Процедура ОтборНедоступен()
	
	ЛокальныйОтбор = Ложь;
	Элементы.ЛокальныйОтбор.ТолькоПросмотр = Истина;
	Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НедоступныеНастройкиОтбора;
		
КонецПроцедуры

&НаКлиенте
Процедура ПорядокДоступен(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеПорядкаУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальныйПорядок = Истина;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
					
	Иначе
		
		ЛокальныйПорядок = Ложь;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПорядка;
					
	КонецЕсли;
			
	Элементы.ЛокальныйПорядок.ТолькоПросмотр = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПорядокНедоступен()
	
	ЛокальныйПорядок = Ложь;
	Элементы.ЛокальныйПорядок.ТолькоПросмотр = Истина;
	Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НедоступныеНастройкиПорядка;
		
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеДоступно(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеУсловногоОформленияУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальноеУсловноеОформление = Истина;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
					
	Иначе
		
		ЛокальноеУсловноеОформление = Ложь;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.ОтключенныеНастройкиУсловногоОформления;
					
	КонецЕсли;
			
	Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеНедоступно()
	
	ЛокальноеУсловноеОформление = Ложь;
	Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Истина;
	Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НедоступныеНастройкиУсловногоОформления;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыводаДоступны(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеПараметровВыводаУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальныеПараметрыВывода = Истина;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
					
	Иначе
		
		ЛокальныеПараметрыВывода = Ложь;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПараметровВывода;
					
	КонецЕсли;
			
	Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыводаНедоступны()
	
	ЛокальныеПараметрыВывода = Ложь;
	Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Истина;
	Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НедоступныеНастройкиПараметровВывода;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПриАктивизацииПоля(Элемент)
		
	Перем ВыбраннаяСтраница;
	
	Если Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеВыбора" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПолейВыбора;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеОтбора" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаОтбора;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеПорядка" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПорядка;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеУсловногоОформления" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаУсловногоОформления;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеПараметровВывода" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПараметровВывода;
		
	КонецЕсли;
	
	Если ВыбраннаяСтраница <> Неопределено Тогда
		
		Элементы.СтраницыНастроек.ТекущаяСтраница = ВыбраннаяСтраница;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПриАктивизацииСтроки(Элемент)
	
	ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
	ТипЭлемента = ТипЗнч(ЭлементСтруктуры); 
	
	Если ТипЭлемента = Неопределено  ИЛИ
		 ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") ИЛИ
		 ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		 
		ПоляГруппировкиНедоступны();
		ВыбранныеПоляНедоступны();
		ОтборНедоступен();
		ПорядокНедоступен();
		УсловноеОформлениеНедоступно();
		ПараметрыВыводаНедоступны();
		
	ИначеЕсли ТипЭлемента = Тип("НастройкиКомпоновкиДанных") ИЛИ
		 	  ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		
		ЛокальныеВыбранныеПоля = Истина;
		Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Истина;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
		
		ЛокальныйОтбор = Истина;
		Элементы.ЛокальныйОтбор.ТолькоПросмотр = Истина;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
		
		ЛокальныйПорядок = Истина;
		Элементы.ЛокальныйПорядок.ТолькоПросмотр = Истина;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
		
		ЛокальноеУсловноеОформление = Истина;
		Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Истина;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
		
		ЛокальныеПараметрыВывода = Истина;
		Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Истина;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
		
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") ИЛИ
		 	  ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") ИЛИ
		 	  ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		 
		Элементы.СтраницыПолейГруппировки.ТекущаяСтраница = Элементы.НастройкиПолейГруппировки;
			
		ВыбранныеПоляДоступны(ЭлементСтруктуры);
		ОтборДоступен(ЭлементСтруктуры);
		ПорядокДоступен(ЭлементСтруктуры);
		УсловноеОформлениеДоступно(ЭлементСтруктуры);
		ПараметрыВыводаДоступны(ЭлементСтруктуры);
		
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") ИЛИ
		      ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		ВыбранныеПоляДоступны(ЭлементСтруктуры);
		ОтборНедоступен();
		ПорядокНедоступен();
		УсловноеОформлениеДоступно(ЭлементСтруктуры);
		ПараметрыВыводаДоступны(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОтчету(Элемент)
	
	ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
	НастройкиЭлемента =  КомпоновщикНастроек.Настройки.НастройкиЭлемента(ЭлементСтруктуры);
	Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока = КомпоновщикНастроек.Настройки.ПолучитьИдентификаторПоОбъекту(НастройкиЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныеВыбранныеПоляПриИзменении(Элемент)
	
	Если ЛокальныеВыбранныеПоля Тогда
		
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
			
	Иначе
		
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиВыбранныхПолей;

		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьВыборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныйОтборПриИзменении(Элемент)
	
	Если ЛокальныйОтбор Тогда
		
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
			
	Иначе
		
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиОтбора;

		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьОтборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныйПорядокПриИзменении(Элемент)
	
	Если ЛокальныйПорядок Тогда
		
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
					
	Иначе
		
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПорядка;
					
		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьПорядокЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЛокальноеУсловноеОформлениеПриИзменении(Элемент)

	Если ЛокальноеУсловноеОформление Тогда
		
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
					
	Иначе
		
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.ОтключенныеНастройкиУсловногоОформления;
					
		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьУсловноеОформлениеЭлемента(ЭлементСтруктуры);
					
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныеПараметрыВыводаПриИзменении(Элемент)
	
	Если ЛокальныеПараметрыВывода Тогда
		
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
					
	Иначе
		
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПараметровВывода;
					
		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьПараметрыВыводаЭлемента(ЭлементСтруктуры);
	КонецЕсли;
			
КонецПроцедуры

//////////// Отчет
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Список = Новый СписокЗначений;
	Для Каждого Элемент Из Метаданные.РегистрыНакопления Цикл
		Если ПравоДоступа("Просмотр", Элемент) Тогда
			Список.Добавить(Элемент.Имя, Элемент.Синоним, (Элемент.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки));
		КонецЕсли;
	КонецЦикла;
	
	Если Список.Количество() = 0 Тогда
		Отказ = Истина;
	Иначе
		Список.СортироватьПоПредставлению();
		СписокНаФорме = Элементы.ПараметрыРегистра.СписокВыбора;
		Для Каждого Элемент Из Список Цикл
			Если Элемент.Пометка Тогда
				СписокНаФорме.Добавить(Элемент.Значение+".ОстаткиИОбороты", Элемент.Представление + " (остатки и обороты)");
				СписокНаФорме.Добавить(Элемент.Значение+".Обороты", Элемент.Представление + " (обороты)");
				СписокНаФорме.Добавить(Элемент.Значение+".Остатки", Элемент.Представление + " (остатки)");
			Иначе
			    СписокНаФорме.Добавить(Элемент.Значение+".Обороты", Элемент.Представление, Элемент.Пометка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		Если Параметры.ЭтоРасшифровка Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(Параметры.Настройки);
			Параметры.Свойство("ТекущийВариант", ТекущийВариант);
			Параметры.Свойство("ПараметрыРегистра", ПараметрыРегистра);
			Параметры.Свойство("Период", Период);
		Иначе
			ПараметрыРегистра = ХранилищеСистемныхНастроек.Загрузить("Универсальный отчет", "Параметры регистра");
			ТекущийВариант = ХранилищеСистемныхНастроек.Загрузить("Универсальный отчет", "Текущий вариант");
			Если ПустаяСтрока(ТекущийВариант) Тогда
				ТекущийВариант = "Основной";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРегистра) Тогда
		ПараметрыРегистра = Элементы.ПараметрыРегистра.СписокВыбора.Получить(0).Значение;
	КонецЕсли;

	ПриИзмененииРегистра();
	
	Если Параметры.ЭтоРасшифровка Тогда	
		ВывестиОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСКД()
	
	ПозицияТочки = Найти(ПараметрыРегистра, ".");
	ИмяРегистра = Лев(ПараметрыРегистра, ПозицияТочки-1);
	ИмяВиртуальнойТаблицы = Сред(ПараметрыРегистра, ПозицияТочки+1);
	
	Если ИмяВиртуальнойТаблицы = "Остатки" Тогда
		НовыйПериод = ТекущаяДата();
		Если ТипЗнч(Период) = Тип("СтандартныйПериод") Тогда
			НовыйПериод = Период.ДатаОкончания;
		ИначеЕсли ТипЗнч(Период) = Тип("Дата") Тогда
			НовыйПериод = Период;
		КонецЕсли;
		Элементы.Период.ОграничениеТипа = Новый ОписаниеТипов("Дата");
		Если ТипЗнч(НовыйПериод) = Тип("Дата") Тогда
			Период = НовыйПериод;
		КонецЕсли;
	Иначе
		НовыйПериод = Новый СтандартныйПериод;
		Если ТипЗнч(Период) = Тип("Дата") Тогда
			Если НачалоДня(ТекущаяДата()) = Период Тогда
				НовыйПериод.Вариант = ВариантСтандартногоПериода.Сегодня;
			Иначе
				НовыйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
				НовыйПериод.ДатаНачала = Период;
				НовыйПериод.ДатаОкончания = КонецДня(Период);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Период) = Тип("СтандартныйПериод") Тогда
			НовыйПериод = Период;
		КонецЕсли;
		Элементы.Период.ОграничениеТипа = Новый ОписаниеТипов("СтандартныйПериод");
		Если ТипЗнч(НовыйПериод) = Тип("СтандартныйПериод") Тогда
			Период = НовыйПериод;
		КонецЕсли;
	КонецЕсли;

	
	Если ЭтоАдресВременногоХранилища(АдресСКД) Тогда
		СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	Иначе
		СКД = Новый СхемаКомпоновкиДанных;
		АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	КонецЕсли;
	
	СКД.ВложенныеСхемыКомпоновкиДанных.Очистить();
	СКД.МакетыГруппировок.Очистить();
	СКД.МакетыЗаголовковГруппировок.Очистить();
	СКД.МакетыПолей.Очистить();
	СКД.МакетыПолейИтога.Очистить();
	СКД.Макеты.Очистить();
	СКД.ВычисляемыеПоля.Очистить();
	СКД.Параметры.Очистить();
	СКД.ПоляИтога.Очистить();
	СКД.СвязиНаборовДанных.Очистить();	
	СКД.НаборыДанных.Очистить();
	СКД.ИсточникиДанных.Очистить();
		
	Если НЕ Параметры.ЭтоРасшифровка Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Новый НастройкиКомпоновкиДанных);
	КонецЕсли;
	
	
	ИД = СКД.ИсточникиДанных.Добавить();
	ИД.Имя = "ИсточникДанных";
	ИД.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "ОсновнойНабор";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	
	ПоляОтчета = НаборДанных.Поля;
	ПоляПорядкаИзмерений = Новый Структура;
	
	МетаРегистр = Метаданные.РегистрыНакопления[ИмяРегистра];
	
	ТекстВыбранныхПолей = "";
	ТекстОписанияОтбора = "";
	ТекстДоступныхПолей = "";
	
	СписокДоступныхГруппировок.Очистить();
	СписокДоступныхПоказателей.Очистить();
	
	Для Каждого Измерение Из МетаРегистр.Измерения Цикл
		
		СписокДоступныхГруппировок.Добавить(Измерение.Имя, Измерение.Синоним);
		
		Если НЕ ПустаяСтрока(ТекстВыбранныхПолей) Тогда
			ТекстВыбранныхПолей = ТекстВыбранныхПолей + ",";
		КонецЕсли;
		ТекстВыбранныхПолей = ТекстВыбранныхПолей + Символы.ПС + Символы.Таб
		+ ИмяВиртуальнойТаблицы + "." + Измерение.Имя + " КАК " + Измерение.Имя;
		
		Если НЕ ПустаяСтрока(ТекстДоступныхПолей) Тогда
			ТекстДоступныхПолей = ТекстДоступныхПолей + ",";
		КонецЕсли;
        ТекстДоступныхПолей = ТекстДоступныхПолей + Символы.ПС + Символы.Таб + Измерение.Имя + ".*";
		
		
		НовоеПоле = ПоляОтчета.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = Измерение.Имя;
		НовоеПоле.ПутьКДанным = Измерение.Имя;
		НовоеПоле.Заголовок = Измерение.Синоним;
		
		НовоеПоле.Роль.Измерение = Истина;
		//НовоеПоле.Роль.ИгнорироватьЗначенияNULL = Истина;

		Если НЕ ПустаяСтрока(ТекстОписанияОтбора) Тогда
			ТекстОписанияОтбора = ТекстОписанияОтбора + ", ";
		КонецЕсли;
		
		ОписаниеПоляОтбора = Измерение.Имя + ".* КАК " + Измерение.Имя;
		ТекстОписанияОтбора = ТекстОписанияОтбора + ОписаниеПоляОтбора;
				
		Типы = Измерение.Тип.Типы();
		Если Типы.Количество() > 1 Тогда
			
			Для Каждого ТипЗначенияИзмерения Из Типы Цикл
				Если НЕ ПустаяСтрока(ТекстОписанияОтбора) Тогда
					ТекстОписанияОтбора = ТекстОписанияОтбора + ", ";
				КонецЕсли;
		
				МетаТипа = Метаданные.НайтиПоТипу(ТипЗначенияИзмерения);
				
				Если МетаТипа <> Неопределено Тогда // Не включаем в отбор поля простых типов
					
					ИмяТипа = МетаТипа.ПолноеИмя();
					ПсевдонимПоля = Измерение.Имя + МетаТипа.Имя;
					ОписаниеПоляОтбора = "ВЫРАЗИТЬ("+Измерение.Имя + " КАК " + ИмяТипа + ").* КАК " + ПсевдонимПоля;
					ТекстОписанияОтбора = ТекстОписанияОтбора + ОписаниеПоляОтбора;

					НовоеПоле = ПоляОтчета.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
					НовоеПоле.Поле = ПсевдонимПоля;
					НовоеПоле.ПутьКДанным = ПсевдонимПоля;
					НовоеПоле.Заголовок = Измерение.Синоним + " (" + ?(ЗначениеЗаполнено(МетаТипа.ПредставлениеОбъекта), МетаТипа.ПредставлениеОбъекта, МетаТипа.Синоним) + ")";
					
					Если (МетаТипа.Реквизиты.Найти("Порядок") <> Неопределено) Тогда
						ПоляПорядкаИзмерений.Вставить(Измерение.Имя, Измерение.Синоним);
					КонецЕсли;
		    	КонецЕсли;
			КонецЦикла;
       	Иначе
			МетаТипа = Метаданные.НайтиПоТипу(Типы[0]);
			
			Если (МетаТипа <> Неопределено) И Метаданные.Справочники.Содержит(МетаТипа) И (МетаТипа.Реквизиты.Найти("Порядок") <> Неопределено) Тогда
				ПоляПорядкаИзмерений.Вставить(Измерение.Имя, Измерение.Синоним);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокДоступныхГруппировок.Добавить("ПериодДень", "День");
	СписокДоступныхГруппировок.Добавить("ПериодНеделя", "Неделя");
	СписокДоступныхГруппировок.Добавить("ПериодДекада", "Декада");
	СписокДоступныхГруппировок.Добавить("ПериодМесяц", "Месяц");
	СписокДоступныхГруппировок.Добавить("ПериодКвартал", "Квартал");
	СписокДоступныхГруппировок.Добавить("ПериодПолугодие", "Полугодие");
	СписокДоступныхГруппировок.Добавить("ПериодГод", "Год");
	
	
	Для Каждого ПолеПорядка Из ПоляПорядкаИзмерений Цикл

		ПолеОтчета = ПоляОтчета.Найти(Новый ПолеКомпоновкиДанных(ПолеПорядка.Ключ));
		ВыражениеПорядка = ПолеОтчета.ВыраженияУпорядочивания.Добавить();
		ВыражениеПорядка.Выражение = ПолеПорядка.Ключ+".Порядок"
		
	КонецЦикла;
	
	ПоляРесурсов = СКД.ПоляИтога;
		
	СуффиксыПолейРесурсов = Новый Структура;
	
	Если МетаРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Если ИмяВиртуальнойТаблицы = "Обороты" Тогда
			СуффиксыПолейРесурсов.Вставить("Приход", "Приход");
			СуффиксыПолейРесурсов.Вставить("Расход", "Расход");
		ИначеЕсли ИмяВиртуальнойТаблицы = "Остатки" Тогда
			СуффиксыПолейРесурсов.Вставить("Остаток", "");
		Иначе
			СуффиксыПолейРесурсов.Вставить("НачальныйОстаток", "Начальный остаток");
			СуффиксыПолейРесурсов.Вставить("Приход", "Приход");
			СуффиксыПолейРесурсов.Вставить("Расход", "Расход");
			СуффиксыПолейРесурсов.Вставить("КонечныйОстаток", "Конечный остаток");
		КонецЕсли;
	Иначе
		СуффиксыПолейРесурсов.Вставить("Оборот", "");
	КонецЕсли;
	
	Для Каждого Ресурс Из МетаРегистр.Ресурсы Цикл
		СписокДоступныхПоказателей.Добавить(Ресурс.Имя, Ресурс.Синоним);		
		Для Каждого СуффиксПоля Из СуффиксыПолейРесурсов Цикл

			ИмяПоля = Ресурс.Имя + СуффиксПоля.Ключ;

			Если НЕ ПустаяСтрока(ТекстВыбранныхПолей) Тогда
				ТекстВыбранныхПолей = ТекстВыбранныхПолей + ",";
			КонецЕсли;
			ТекстВыбранныхПолей = ТекстВыбранныхПолей + Символы.ПС + Символы.Таб + ИмяВиртуальнойТаблицы + "." + ИмяПоля + " КАК " + ИмяПоля;
			
			НовоеПоле = ПоляОтчета.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле = ИмяПоля;
			НовоеПоле.ПутьКДанным = ИмяПоля;
			Если ЗначениеЗаполнено(СуффиксПоля.Значение) Тогда
				НовоеПоле.Заголовок = СуффиксПоля.Значение + ": " + Ресурс.Синоним;
			Иначе
				НовоеПоле.Заголовок = Ресурс.Синоним;
			КонецЕсли;
			НовоеПоле.ТипЗначения = Ресурс.Тип;
			НовоеПоле.ОграничениеИспользования.Порядок = Истина;
			НовоеПоле.ОграничениеИспользования.Группировка = Истина;
			НовоеПоле.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 12);
			//НовоеПоле.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
			Если Найти(СуффиксПоля.Ключ, "Остаток") > 0 Тогда
				
				НовоеПоле.Роль.Остаток = Истина;
				НовоеПоле.Роль.ГруппаОстатка = Ресурс.Имя;
				Если Найти(СуффиксПоля.Ключ, "Нач") > 0 ИЛИ Найти(СуффиксПоля.Ключ, "Кон") > 0 Тогда
					НовоеПоле.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных[СуффиксПоля.Ключ];
				КонецЕсли;
				
			КонецЕсли;
			
			ПолеИтогаРесурса = ПоляРесурсов.Добавить();
			ПолеИтогаРесурса.ПутьКДанным = ИмяПоля;
			ПолеИтогаРесурса.Выражение = "Сумма("+ИмяПоля+")";
			
			Если НЕ ПустаяСтрока(ТекстДоступныхПолей) Тогда
				ТекстДоступныхПолей = ТекстДоступныхПолей + ",";
			КонецЕсли;
	        ТекстДоступныхПолей = ТекстДоступныхПолей + Символы.ПС + Символы.Таб + ИмяПоля;

		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ИмяВиртуальнойТаблицы = "Остатки" Тогда
		СписокДетальныхПолей = ПолучитьСписокДетальныхПолей();
		Для Каждого ОписаниеДетальногоПоля Из СписокДетальныхПолей Цикл
			ИмяПоля = ОписаниеДетальногоПоля.Имя;

			Если НЕ ПустаяСтрока(ТекстВыбранныхПолей) Тогда
				ТекстВыбранныхПолей = ТекстВыбранныхПолей + ",";
			КонецЕсли;
			ТекстВыбранныхПолей = ТекстВыбранныхПолей + Символы.ПС + Символы.Таб + ИмяВиртуальнойТаблицы + "." + ИмяПоля + " КАК " + ИмяПоля;
			
			НовоеПоле = ПоляОтчета.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле = ИмяПоля;
			НовоеПоле.ПутьКДанным = ИмяПоля;
			НовоеПоле.Заголовок = ОписаниеДетальногоПоля.Представление;
			Если ОписаниеДетальногоПоля.Номер > 2 Тогда
				НовоеПоле.ОграничениеИспользования.Условие = Истина;
				НовоеПоле.ВыражениеПредставления = ОписаниеДетальногоПоля.ВыражениеПредставления;
			КонецЕсли;
			
			НовоеПоле.Роль.НомерПериода = ОписаниеДетальногоПоля.Номер;
			НовоеПоле.Роль.ТипПериода = ?(ОписаниеДетальногоПоля.Дополнительный, ТипПериодаКомпоновкиДанных.Дополнительный, ТипПериодаКомпоновкиДанных.Основной);
			
			Если НЕ ПустаяСтрока(ТекстДоступныхПолей) Тогда
				ТекстДоступныхПолей = ТекстДоступныхПолей + ",";
			КонецЕсли;
			ТекстДоступныхПолей = ТекстДоступныхПолей + Символы.ПС + Символы.Таб + ИмяПоля + ?(ИмяПоля = "Регистратор", ".*", "");
		КонецЦикла;
		
		ИмяПоля = "Комментарий";
		
		ТипыРегистраторов = МетаРегистр.СтандартныеРеквизиты.Регистратор.Тип.Типы();
		
		ТекстВыборкиПоля = "";
		
		Для Каждого ТипЗначенияРегистратора Из ТипыРегистраторов Цикл
			
			МетаТипа = Метаданные.НайтиПоТипу(ТипЗначенияРегистратора);
			МетаРеквизита = МетаТипа.Реквизиты.Найти(ИмяПоля);
			Если МетаРеквизита <> Неопределено И ПравоДоступа("Просмотр", МетаРеквизита) Тогда
				
				Если НЕ ПустаяСтрока(ТекстВыборкиПоля) Тогда
					ТекстВыборкиПоля = ТекстВыборкиПоля + Символы.ПС;
				КонецЕсли;
			
				ИмяТипа = МетаТипа.ПолноеИмя();
				ТекстВыборкиПоля = ТекстВыборкиПоля + "		КОГДА "+ИмяВиртуальнойТаблицы+".Регистратор ССЫЛКА "+ИмяТипа+"
				|			ТОГДА ВЫРАЗИТЬ("+ИмяВиртуальнойТаблицы+".Регистратор КАК "+ИмяТипа+")."+ИмяПоля;
				
			КонецЕсли;

		КонецЦикла;
		
		
		Если НЕ ПустаяСтрока(ТекстВыборкиПоля) Тогда
			ТекстВыборкиПоля = "	ВЫБОР
			|" + ТекстВыборкиПоля + "
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК " + ИмяПоля;
			
			ТекстВыбранныхПолей = ТекстВыбранныхПолей + ",
			|"+ТекстВыборкиПоля;
			ТекстДоступныхПолей = ТекстДоступныхПолей + ",
			|	"+ИмяПоля;
		КонецЕсли;
    КонецЕсли;
	
	Если ИмяВиртуальнойТаблицы = "Обороты" Тогда
		ТекстОтбораПоТипуРегистратора = "";
		СписокДоступныхЗначенийОтбораПоВиду = Новый СписокЗначений;
		
		Для Каждого ТипЗначенияРегистратора Из ТипыРегистраторов Цикл
			МетаТипа = Метаданные.НайтиПоТипу(ТипЗначенияРегистратора);
			Если ПравоДоступа("Просмотр", МетаТипа) Тогда				
				Если НЕ ПустаяСтрока(ТекстОтбораПоТипуРегистратора) Тогда
					ТекстОтбораПоТипуРегистратора = ТекстОтбораПоТипуРегистратора + Символы.ПС;
				КонецЕсли;
			
				ИмяТипа = МетаТипа.ПолноеИмя();
				ТекстОтбораПоТипуРегистратора = ТекстОтбораПоТипуРегистратора + "		КОГДА "+ИмяВиртуальнойТаблицы+".Регистратор ССЫЛКА "+ИмяТипа+"
				|			ТОГДА """+МетаТипа.Имя+"""";
				СписокДоступныхЗначенийОтбораПоВиду.Добавить(МетаТипа.Имя, МетаТипа.Синоним);
			КонецЕсли;
		
		КонецЦикла;
		СписокДоступныхЗначенийОтбораПоВиду.СортироватьПоПредставлению();
		
		Если НЕ ПустаяСтрока(ТекстОтбораПоТипуРегистратора) Тогда
			ТекстОтбораПоТипуРегистратора = "	ВЫБОР
			|" + ТекстОтбораПоТипуРегистратора + "
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ВидДокументаДвижения";
			
		КонецЕсли;
		
		НовоеПоле = ПоляОтчета.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = "ВидДокументаДвижения";
		НовоеПоле.ПутьКДанным = "ВидДокументаДвижения";
		НовоеПоле.Заголовок = "Вид документа движения";
		НовоеПоле.УстановитьДоступныеЗначения(СписокДоступныхЗначенийОтбораПоВиду);

		СписокДоступныхГруппировок.Добавить("ВидДокументаДвижения", "Вид документа движения");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстВыбранныхПолей + ?(ЗначениеЗаполнено(ТекстОтбораПоТипуРегистратора), ", 
		|	"+ТекстОтбораПоТипуРегистратора, "") + "
		|{ВЫБРАТЬ" + ТекстДоступныхПолей + ?(ЗначениеЗаполнено(ТекстОтбораПоТипуРегистратора), ", 
		|	ВидДокументаДвижения", "") + "}
		|
		|ИЗ
		|	" + МетаРегистр.ПолноеИмя() + ".Обороты(&ДатаНачала, &ДатаОкончания, Авто, {" + ТекстОписанияОтбора + "}) КАК "+ИмяВиртуальнойТаблицы+"
		|{ГДЕ
		|	Регистратор.*
		|"+?(ЗначениеЗаполнено(ТекстОтбораПоТипуРегистратора), ",
		|	"+ТекстОтбораПоТипуРегистратора, "")+"}";
		
	ИначеЕсли ИмяВиртуальнойТаблицы = "ОстаткиИОбороты" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстВыбранныхПолей + "
		|{ВЫБРАТЬ" + ТекстДоступныхПолей + "}
		|
		|ИЗ
		|	" + МетаРегистр.ПолноеИмя() + ".ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, , {" + ТекстОписанияОтбора + "}) КАК "+ИмяВиртуальнойТаблицы+"
		|{ГДЕ
		|	Регистратор.*}";
	ИначеЕсли ИмяВиртуальнойТаблицы = "Остатки" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстВыбранныхПолей + "
		|{ВЫБРАТЬ" + ТекстДоступныхПолей + "}
		|
		|ИЗ
		|	" + МетаРегистр.ПолноеИмя() + ".Остатки(&Период, {" + ТекстОписанияОтбора + "}) КАК "+ИмяВиртуальнойТаблицы;

	КонецЕсли;
	
    НаборДанных.Запрос = ТекстЗапроса;
	
	КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	Если ИмяВиртуальнойТаблицы = "Остатки" Тогда
		НовыйПараметр = СКД.Параметры.Добавить();
		НовыйПараметр.ВключатьВДоступныеПоля = Ложь;
		НовыйПараметр.Имя = "Период";
		НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("Дата",,,КД);
		НовыйПараметр.ОграничениеИспользования = Ложь;
		НовыйПараметр.Заголовок = "Момент времени";
	Иначе
		НовыйПараметр = СКД.Параметры.Добавить();
		НовыйПараметр.ВключатьВДоступныеПоля = Ложь;
		НовыйПараметр.Имя = "Период";
		НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СтандартныйПериод");
		НовыйПараметр.ОграничениеИспользования = Ложь;
		
		НовыйПараметр = СКД.Параметры.Добавить();
		НовыйПараметр.ВключатьВДоступныеПоля = Ложь;
		НовыйПараметр.Имя = "ДатаНачала";
		НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("Дата",,,КД);
		НовыйПараметр.ОграничениеИспользования = Истина;
		НовыйПараметр.Выражение = "&Период.ДатаНачала";
		
		НовыйПараметр = СКД.Параметры.Добавить();
		НовыйПараметр.ВключатьВДоступныеПоля = Ложь;
		НовыйПараметр.Имя = "ДатаОкончания";
		НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("Дата",,,КД);
		НовыйПараметр.ОграничениеИспользования = Истина;
		НовыйПараметр.Выражение = "&Период.ДатаОкончания";
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СКД, АдресСКД);
	
	идн = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	КомпоновщикНастроек.Инициализировать(идн);
	
	Если Не Параметры.ЭтоРасшифровка Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Новый НастройкиКомпоновкиДанных);

		ОпределитьСтруктуруОтчета();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДетальныхПолей()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя");
	Таблица.Колонки.Добавить("Представление");
	Таблица.Колонки.Добавить("ВыражениеПредставления");
	Таблица.Колонки.Добавить("Номер");
	Таблица.Колонки.Добавить("Дополнительный");
	
	с = Таблица.Добавить();
	с.Имя = "НомерСтроки";
	с.Представление = "Запись";
	с.Номер = 1;
	с.Дополнительный = Ложь;
	
	с = Таблица.Добавить();
	с.Имя = "Регистратор";
	с.Представление = "Документ движения";
	с.Номер = 2;
	с.Дополнительный = Ложь;
	
	с = Таблица.Добавить();
	с.Имя = "ПериодСекунда";
	с.Представление = "Дата, время";
	с.ВыражениеПредставления = "Формат(ПериодСекунда,""ДФ='dd.MM.yyyy, HH:mm'"")";
	с.Номер = 3;
	с.Дополнительный = Ложь;
	
	с = Таблица.Добавить();
	с.Имя = "ПериодДень";
	с.Представление = "День";  
	с.ВыражениеПредставления = "Формат(ПериодДень,""ДФ='д МММ гггг, ддд'"")";
	с.Номер = 6;
	с.Дополнительный = Истина;
	
	с = Таблица.Добавить();
	с.Имя = "ПериодНеделя";
	с.Представление = "Неделя";  
	с.ВыражениеПредставления = "Формат(ПериодНеделя, ""ДФ='dd.MM.yyyy'' - '''"") + Формат(КонецПериода(ПериодНеделя, ""Неделя""), ""ДФ='dd.MM.yyyy'"")";
	с.Номер = 7;
	с.Дополнительный = Истина;
	
	с = Таблица.Добавить();
	с.Имя = "ПериодДекада";
	с.Представление = "Декада";  
	с.ВыражениеПредставления = "Формат(ПериодДекада, ""ДФ='dd.MM.yyyy'' - '''"") + Формат(КонецПериода(ПериодДекада, ""Декада""), ""ДФ='dd.MM.yyyy'"")";
	с.Номер = 8;
	с.Дополнительный = Истина;
	
	с = Таблица.Добавить();
	с.Имя = "ПериодМесяц";
	с.Представление = "Месяц";  
	с.ВыражениеПредставления = "Формат(ПериодМесяц,""ДФ='ММММ гггг'"")";
	с.Номер = 9;
	с.Дополнительный = Истина;
	
	с = Таблица.Добавить();
	с.Имя = "ПериодКвартал";
	с.Представление = "Квартал";  
	с.ВыражениеПредставления = "Формат(ПериодКвартал,""ДФ='к ''квартал'' гггг'"")";
	с.Номер = 10;
	с.Дополнительный = Истина;
	
	с = Таблица.Добавить();
	с.Имя = "ПериодПолугодие";
	с.Представление = "Полугодие";  
	с.ВыражениеПредставления = "выбор когда Квартал(ПериодПолугодие) > 2 Тогда ""2"" иначе ""1"" конец + Формат(ПериодПолугодие,""ДФ=' ''полугодие'' гггг'"")";
	с.Номер = 11;
	с.Дополнительный = Истина;
	
	с = Таблица.Добавить();
	с.Имя = "ПериодГод";
	с.Представление = "Год";  
	с.ВыражениеПредставления = "Формат(ПериодГод,""ДФ='гггг'"")";
	с.Номер = 12;
	с.Дополнительный = Истина;
	
	Возврат Таблица;
КонецФункции

&НаСервере
Процедура ОпределитьСтруктуруОтчета()
	
	Если ЗначениеЗаполнено(ТекущийВариант) Тогда
		Данные = ХранилищеВариантовОтчетов.Загрузить(КлючОбъекта, ТекущийВариант);
	КонецЕсли;
	
	Если Данные = Неопределено Тогда
		// Настройки по умолчанию
		ТекущийВариант = "Основной";
		ЗаполнитьСтруктуруПоУмолчанию();
		СохранитьВариантОтчетаНаСервере();
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруПоУмолчанию()
	
	ПозицияТочки = Найти(ПараметрыРегистра, ".");
	ИмяРегистра = Лев(ПараметрыРегистра, ПозицияТочки-1);
	ИмяВиртуальнойТаблицы = Сред(ПараметрыРегистра, ПозицияТочки+1);
	
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("Заголовок", Заголовок);
	
	СтруктураОтчета = КомпоновщикНастроек.Настройки.Структура;
	СтруктураОтчета.Очистить();
	
	ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор.Элементы;
	ВыбранныеПоля.Очистить();
	
	ПоляПорядка = КомпоновщикНастроек.Настройки.Порядок.Элементы;
	ПоляПорядка.Очистить();
		
	ТекущаяВеткаСтруктуры = СтруктураОтчета;
	
	МетаРегистр = Метаданные.РегистрыНакопления[ИмяРегистра];
	
	ПолеПорядкаГруппировки = ПоляПорядка.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ПолеПорядкаГруппировки.Использование = Истина;
		
	Для Каждого ГруппировкаОтчета Из МетаРегистр.Измерения Цикл
        Если ПравоДоступа("Просмотр", ГруппировкаОтчета) Тогда
			СтрокаИзмерения = ТекущаяВеткаСтруктуры.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			СтрокаИзмерения.Имя = ГруппировкаОтчета.Имя;
			СтрокаИзмерения.Использование = Истина;
			ПолеИзмерения = СтрокаИзмерения.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеИзмерения.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы; 
			ПолеИзмерения.Использование = Истина;
			                    
			Поле = Новый ПолеКомпоновкиДанных(ГруппировкаОтчета.Имя);
			ПолеИзмерения.Поле = Поле;
			
			АвтоПоле = СтрокаИзмерения.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			АвтоПоле.Использование = Истина;
			
			ПолеПорядкаГруппировки = СтрокаИзмерения.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядкаГруппировки.Использование = Истина;		
			
			ТекущаяВеткаСтруктуры = СтрокаИзмерения.Структура;
		КонецЕсли;
	КонецЦикла;
	
	
	СуффиксыПолейРесурсов = Новый Структура;
	
	Если МетаРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Если ИмяВиртуальнойТаблицы = "Обороты" Тогда
			СуффиксыПолейРесурсов.Вставить("Приход", "Приход");
			СуффиксыПолейРесурсов.Вставить("Расход", "Расход");
		ИначеЕсли ИмяВиртуальнойТаблицы = "Остатки" Тогда
			СуффиксыПолейРесурсов.Вставить("Остаток", "");
		Иначе
			СуффиксыПолейРесурсов.Вставить("НачальныйОстаток", "Начальный остаток");
			СуффиксыПолейРесурсов.Вставить("Приход", "Приход");
			СуффиксыПолейРесурсов.Вставить("Расход", "Расход");
			СуффиксыПолейРесурсов.Вставить("КонечныйОстаток", "Конечное остаток");
		КонецЕсли;
	Иначе
		СуффиксыПолейРесурсов.Вставить("Оборот", "");
	КонецЕсли;
	
	ГруппаРесурсы = ВыбранныеПоля.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаРесурсы.Использование = Истина;
	ГруппаРесурсы.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаРесурсы.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
		
	Для Каждого СуффиксПоля Из СуффиксыПолейРесурсов Цикл
		ГруппаСуффикса = ГруппаРесурсы.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаСуффикса.Заголовок = СуффиксПоля.Значение;
		ГруппаСуффикса.Использование = Истина;
		ГруппаСуффикса.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаСуффикса.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;

			
		Для Каждого Ресурс Из МетаРегистр.Ресурсы Цикл
			Если ПравоДоступа("Просмотр", Ресурс) Тогда
				ИмяПоля = Ресурс.Имя + СуффиксПоля.Ключ;
				
				Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

				ВыбранноеПоле = ГруппаСуффикса.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				Если ЗначениеЗаполнено(СуффиксПоля.Значение) Тогда
					ВыбранноеПоле.Заголовок = Ресурс.Синоним; 
				КонецЕсли;
				ВыбранноеПоле.Поле = Поле;
				ВыбранноеПоле.Использование = Истина;
				ВыбранноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;			
		КонецЦикла;
	
	КонецЦикла;
	
	ПараметрыОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	Для Каждого ЭлементПараметр Из ПараметрыОтчета.Элементы Цикл
		ЭлементПараметр.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьКлючОбъекта()
	КлючОбъекта = "УниверсальныйОтчет_"+ПараметрыРегистра;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВариант(Команда)
	Если ВариантМодифицирован Тогда
		Ответ = Вопрос("Текущий вариант отчета был изменен. Сохранить эти изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВариантОтчета(Ложь);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ВыбратьВариантОтчета();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВариант(Команда)
	СохранитьВариантОтчета(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	Если ПроверитьЗаполнение() Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУпрощеннаяНастройка Тогда
			НастроитьСтруктуру();
		КонецЕсли;
		Если ТипЗнч(Период) = Тип("СтандартныйПериод") И Период.ДатаНачала >= Период.ДатаОкончания Тогда
			Предупреждение("Указан некорректный период!");
			Возврат;
		КонецЕсли;
		ВывестиОтчет();
		ПереключитьПанель(Элементы.ГруппаОтчет);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьТекущиеНастройкиВУпрощенномВиде()
	Показатели.Очистить();
	Поля.Очистить();
    Колонки.Очистить();
	Строки.Очистить();
	Детализация = 0;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ПрочитатьВыбранныеПоля(Настройки.Выбор);
	ПрочитатьГруппировки(Настройки.Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьВыбранныеПоля(Коллекция)
		
	Для Каждого _Элемент Из Коллекция.Элементы Цикл
		Если _Элемент.Использование Тогда
			Если ТипЗнч(_Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда 
				СтроковоеПредставление = Строка(_Элемент.Поле);
				СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "Приход", "");
				СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "Расход", "");
				СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "Оборот", "");
				СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "НачальныйОстаток", "");
				СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "КонечныйОстаток", "");
				СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "Остаток", "");
				Если ЗначениеЗаполнено(СтроковоеПредставление) Тогда
					ЭлементПоказатель = СписокДоступныхПоказателей.НайтиПоЗначению(СтроковоеПредставление);
					Если ЭлементПоказатель <> Неопределено Тогда
						Если Показатели.НайтиПоЗначению(СтроковоеПредставление) = Неопределено Тогда
							Показатели.Добавить(ЭлементПоказатель.Значение, ЭлементПоказатель.Представление);
							Если _Элемент.Родитель <> Неопределено Тогда
								Если _Элемент.Родитель.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально Тогда
									ПоказателиГоризонтально = Ложь;
								Иначе
									ПоказателиГоризонтально = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ЭлементПоле = СписокДоступныхГруппировок.НайтиПоЗначению(СтроковоеПредставление);

						Если ЭлементПоле <> Неопределено Тогда
							Если Поля.НайтиПоЗначению(СтроковоеПредставление) = Неопределено Тогда
								Поля.Добавить(ЭлементПоле.Значение, ЭлементПоле.Представление);
							КонецЕсли;
						Иначе
							
							Если СтроковоеПредставление = "ПериодСекунда" Тогда
								
								Если Детализация = 0 Или Детализация >= 6 Тогда
									Детализация = 2;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "Регистратор" Тогда
								
								Если Детализация = 0 Или Детализация >= 6 Тогда
									Детализация = 2;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "НомерСтроки" Тогда
								
								Если Детализация <> 3 И Детализация <> 1 Тогда
									Детализация = 1;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "Комментарий" Тогда
								
								Если Детализация = 1 Тогда
									Детализация = 3;
								ИначеЕсли Детализация <> 3 И Детализация <> 4 Тогда
									Детализация = 4;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "ПериодДень" Тогда
								
								Если Детализация = 0 Или Детализация > 6 Тогда
									Детализация = 6;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "ПериодНеделя" Тогда
								
								Если Детализация = 0 Или Детализация > 7 Тогда
									Детализация = 7;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "ПериодДекада" Тогда
								
								Если Детализация = 0 Или Детализация > 8 Тогда
									Детализация = 8;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "ПериодМесяц" Тогда
								
								Если Детализация = 0 Или Детализация > 9 Тогда
									Детализация = 9;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "ПериодКвартал" Тогда
								
								Если Детализация = 0 Или Детализация > 10 Тогда
									Детализация = 10;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "ПериодПолугодие" Тогда
								
								Если Детализация = 0 Или Детализация > 11 Тогда
									Детализация = 11;
								КонецЕсли;
								
							ИначеЕсли СтроковоеПредставление = "ПериодГод" Тогда
								
								Если Детализация = 0 Или Детализация > 12 Тогда
									Детализация = 12;
								КонецЕсли;
								
							КонецЕсли;
				
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(_Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				ПрочитатьВыбранныеПоля(_Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьГруппировки(Коллекция, ВКолонки = Ложь)
	Для Каждого _Элемент Из Коллекция Цикл
		Если _Элемент.Использование Тогда
			Если ТипЗнч(_Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
				ПрочитатьГруппировки(_Элемент.Строки, Ложь);
				ПрочитатьГруппировки(_Элемент.Колонки, Истина);
			ИначеЕсли ТипЗнч(_Элемент) = Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(_Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				Для Каждого _ПолеГруппировки Из _Элемент.ПоляГруппировки.Элементы Цикл
					Если ТипЗнч(_ПолеГруппировки) <> Тип("АвтоПолеГруппировкиКомпоновкиДанных") И _ПолеГруппировки.Использование Тогда
						СтроковоеПредставление = Строка(_ПолеГруппировки.Поле);
						Если ЗначениеЗаполнено(СтроковоеПредставление) Тогда
							ЭлементГруппировка = СписокДоступныхГруппировок.НайтиПоЗначению(СтроковоеПредставление);
							Если ЭлементГруппировка <> Неопределено Тогда
								Если Строки.НайтиПоЗначению(СтроковоеПредставление) = Неопределено И Колонки.НайтиПоЗначению(СтроковоеПредставление) = Неопределено Тогда
									Если ВКолонки Тогда
										Список = Колонки;
									Иначе
										Список = Строки;
									КонецЕсли;
									Список.Добавить(ЭлементГруппировка.Значение, ЭлементГруппировка.Представление, (_ПолеГруппировки.ТипГруппировки <> ТипГруппировкиКомпоновкиДанных.Элементы));
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ПрочитатьГруппировки(_Элемент.Структура, ВКолонки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьЭлементыСтруктуры(Структура, Список)
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		Если ЭлементСтруктуры.Использование Тогда
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
					ПолучитьЭлементыСтруктуры(ЭлементСтруктуры.Структура, Список);
					Список.Добавить(ЭлементСтруктуры);
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				ПолучитьЭлементыСтруктуры(ЭлементСтруктуры.Строки, Список);
				//ПолучитьЭлементыСтруктуры(ЭлементСтруктуры.Колонки, Список);
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтруктуруДополнительныхПериодов(Структура, КомпоновщикНастроек)
		
	ПолеСекунда = Новый ПолеКомпоновкиДанных("ПериодСекунда");
	ПолеРегистратор = Новый ПолеКомпоновкиДанных("Регистратор");
	ПолеЗапись = Новый ПолеКомпоновкиДанных("НомерСтроки");
		
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		
		естьРегистратор = Ложь;
		естьПериод = Ложь;
		естьЗапись = Ложь;
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			
			// детальные записи
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 ИЛИ (ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 1 И ТипЗнч(ЭлементСтруктуры.ПоляГруппировки.Элементы[0]) = Тип("АвтоПолеГруппировкиКомпоновкиДанных")) Тогда
				ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
				ПроверитьСтруктуруДетальныхПолей(ВыбранныеПоля, естьПериод, естьРегистратор, естьЗапись);
							
				Если естьЗапись и не естьРегистратор Тогда
					НовоеПоле = ВыбранныеПоля.Элементы.Вставить(0, Тип("ВыбранноеПолеКомпоновкиДанных"));
					НовоеПоле.Поле = ПолеРегистратор;
					естьРегистратор = Истина;
				КонецЕсли;
				
				Если естьРегистратор И НЕ естьПериод Тогда
					НовоеПоле = ВыбранныеПоля.Элементы.Вставить(0, Тип("ВыбранноеПолеКомпоновкиДанных"));
					НовоеПоле.Поле = ПолеСекунда;
				КонецЕсли;
				
			// группировки
			Иначе
				
				Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					
					Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
						
						Если ПолеГруппировки.Поле = ПолеСекунда Тогда
							естьПериод = Истина;
						ИначеЕсли ПолеГруппировки.Поле = ПолеРегистратор Тогда
	                       	естьРегистратор = Истина;
						ИначеЕсли ПолеГруппировки.Поле = ПолеЗапись Тогда
							естьЗапись = Истина;
						КонецЕсли;

					КонецЕсли;
					
				КонецЦикла;
				
				Если естьЗапись И Не естьРегистратор Тогда
					НовоеПоле = ЭлементСтруктуры.ПоляГруппировки.Элементы.Вставить(0, Тип("ПолеГруппировкиКомпоновкиДанных"));
					НовоеПоле.Поле = ПолеРегистратор;
					естьРегистратор = Истина;
				КонецЕсли;
				
				Если естьРегистратор И НЕ естьПериод Тогда
					НовоеПоле = ЭлементСтруктуры.ПоляГруппировки.Элементы.Вставить(0, Тип("ПолеГруппировкиКомпоновкиДанных"));
					НовоеПоле.Поле = ПолеСекунда;
				КонецЕсли;

			КонецЕсли;
			
			// Удалить любой отбор по регистратору 
			Для Каждого ЭлементОтбора Из ЭлементСтруктуры.Отбор.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ЭлементОтбора.ЛевоеЗначение = ПолеРегистратор Тогда
						ЭлементСтруктуры.Отбор.Элементы.Удалить(ЭлементОтбора);									
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
				
			Если естьРегистратор Тогда
				ЭлементОтбора = ЭлементСтруктуры.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
				ЭлементОтбора.ЛевоеЗначение = ПолеРегистратор;
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				
				ЭлементСтруктуры.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
			КонецЕсли;
			
			ПроверитьСтруктуруДополнительныхПериодов(ЭлементСтруктуры.Структура, КомпоновщикНастроек);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ПроверитьСтруктуруДополнительныхПериодов(ЭлементСтруктуры.Строки, КомпоновщикНастроек);
			ПроверитьСтруктуруДополнительныхПериодов(ЭлементСтруктуры.Колонки, КомпоновщикНастроек);
		КонецЕсли;		
	КонецЦикла;
	    
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтруктуруДетальныхПолей(Коллекция, естьПериод, естьРегистратор, естьЗапись)
	ПолеСекунда = Новый ПолеКомпоновкиДанных("ПериодСекунда");
	ПолеРегистратор = Новый ПолеКомпоновкиДанных("Регистратор");
	ПолеЗапись = Новый ПолеКомпоновкиДанных("НомерСтроки");
	
	Для Каждого ВыбранноеПоле Из Коллекция.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если ВыбранноеПоле.Поле = ПолеСекунда Тогда
				естьПериод = Истина;
			ИначеЕсли ВыбранноеПоле.Поле = ПолеРегистратор Тогда
				естьРегистратор = Истина;
			ИначеЕсли ВыбранноеПоле.Поле = ПолеЗапись Тогда
			    естьЗапись = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеПоле) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ПроверитьСтруктуруДетальныхПолей(ВыбранноеПоле, естьПериод, естьРегистратор, естьЗапись);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиОтчет()
	Если ЭтоАдресВременногоХранилища(АдресСКД) Тогда
		СКД = ПолучитьИзВременногоХранилища(АдресСКД);
		Если СКД.ИсточникиДанных.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не инициализирован набор данных!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не инициализирована схема компоновки данных!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
		

	СтруктураОтчета = КомпоновщикНастроек.Настройки.Структура;
	
	ПроверитьСтруктуруДополнительныхПериодов(СтруктураОтчета, КомпоновщикНастроек);
		
	СписокГрупировок = Новый Массив;
	ПолучитьЭлементыСтруктуры(СтруктураОтчета, СписокГрупировок);
		
	ЦветаГруппировок = Новый Массив;
	ЦветаГруппировок.Добавить(WebЦвета.Белый);
	Если СписокГрупировок.Количество() > 7 Тогда
		ЦветаГруппировок.Добавить(WebЦвета.Лазурный);
		ЦветаГруппировок.Добавить(WebЦвета.Кремовый);
		ЦветаГруппировок.Добавить(WebЦвета.АкварельноСиний);
	КонецЕсли;
	ЦветаГруппировок.Добавить(WebЦвета.АнтикБелый);
	ЦветаГруппировок.Добавить(WebЦвета.БледноЛиловый);
	ЦветаГруппировок.Добавить(WebЦвета.СветлоНебесноГолубой);
	ЦветаГруппировок.Добавить(WebЦвета.СветлоЗолотистый);
	ЦветаГруппировок.Добавить(WebЦвета.Розовый);
	ЦветаГруппировок.Добавить(WebЦвета.Аквамарин);

	
	КоличествоЦветныхГруппировок = Мин(СписокГрупировок.Количество(), ЦветаГруппировок.Количество());
	
	ШрифтДляГруппировок = Новый Шрифт("Arial", 9, Истина);
	
	Для индекс = 0 По КоличествоЦветныхГруппировок - 1 Цикл
		ЭлементСтруктуры = СписокГрупировок[индекс];
		уо = ЭлементСтруктуры.УсловноеОформление;
		
		Если уо.Элементы.Количество() = 0 Тогда
			
			Если индекс > 0 Тогда
				НовыйЭлементОформления = уо.Элементы.Добавить();
				ЦветГруппировки = ЦветаГруппировок[индекс];
				НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветГруппировки);
				НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтДляГруппировок);
			Иначе
				МассивИерархическихПолей = Новый Массив;
				Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
						Если ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
							ДоступноеПоле = ЭлементСтруктуры.ПоляГруппировки.ДоступныеПоляПолейГруппировок.НайтиПоле(ПолеГруппировки.Поле);
							Типы = ДоступноеПоле.ТипЗначения.Типы();
							Для Каждого _Тип Из Типы Цикл
								МетаТипа = Метаданные.НайтиПоТипу(_Тип);
								Если Метаданные.Справочники.Содержит(МетаТипа) Тогда
									Если МетаТипа.Иерархический Тогда
										МассивИерархическихПолей.Добавить(СКД.НаборыДанных.ОсновнойНабор.Поля.Найти(ПолеГруппировки.Поле).ПутьКДанным);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
                
				Если МассивИерархическихПолей.Количество() > 0 Тогда
					НовыйЭлементОформления = уо.Элементы.Добавить();
					НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтДляГруппировок);
					ГруппаОтбора = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					ГруппаОтбора.Использование = Истина;
					Для Каждого ЭлементМассива Из МассивИерархическихПолей Цикл
						ОтборЭлементаОформления = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ОтборЭлементаОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						ОтборЭлементаОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементМассива+".ЭтоГруппа");
						ОтборЭлементаОформления.ПравоеЗначение = Истина;
						ОтборЭлементаОформления.Использование = Истина;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	
	др = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.Настройки, др);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, др);
	
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ЭтоАдресВременногоХранилища(ДанныеРасшифровки) Тогда
		ПоместитьВоВременноеХранилище(др, ДанныеРасшифровки);
	Иначе
		ДанныеРасшифровки = ПоместитьВоВременноеХранилище(др, УникальныйИдентификатор);
	КонецЕсли;
	
	КоличествоЯчеекСверху = 0;
	
	Для Каждого ЧастьТела Из МакетКомпоновки.Тело Цикл
		Если ТипЗнч(ЧастьТела) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
			КоличествоЯчеекСверху = КоличествоЯчеекСверху + МакетКомпоновки.Макеты[ЧастьТела.Макет].Макет.Количество();
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ФиксацияСверху = КоличествоЯчеекСверху;
		
	Результат.ПовторятьПриПечатиСтроки = Результат.Область("R1:R"+Формат(КоличествоЯчеекСверху, "ЧГ="));
	
	Результат.НижнийКолонтитул.Выводить = Истина;
	Результат.НижнийКолонтитул.ТекстВЦентре = ПолноеИмяПользователя() + " / " + Формат(ТекущаяДата(), "ДЛФ=DDT");
	
	Результат.ВерхнийКолонтитул.Выводить = Истина;
	Результат.ВерхнийКолонтитул.ТекстВЦентре = "Страница [&НомерСтраницы] из [&СтраницВсего]";

	Результат.ПолеСверху = 15;
	Результат.ПолеСнизу = 15;
	
	Результат.АвтоМасштаб = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяНастройка(Команда)
	ПереключитьПанель(Элементы.ГруппаРасширеннаяНастройка);
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьПанель(Панель)
	
	Кнопки = Элементы.Настройки.ПодчиненныеЭлементы;
	Кнопки["УпрощеннаяНастройка"].Пометка = Ложь;
    Кнопки["РасширеннаяНастройка"].Пометка = Ложь;
		
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Панель И Панель <> Элементы.ГруппаОтчет Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтчет;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Панель;
		Если Панель = Элементы.ГруппаРасширеннаяНастройка Тогда
			Кнопки["РасширеннаяНастройка"].Пометка = Истина;
		ИначеЕсли Панель = Элементы.ГруппаУпрощеннаяНастройка Тогда
			Кнопки["УпрощеннаяНастройка"].Пометка = Истина;
			ПрочитатьТекущиеНастройкиВУпрощенномВиде();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Список = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из СписокДоступныхГруппировок Цикл
		Если Строки.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено 
			ИЛИ Колонки.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Список.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	ВыбранныйЭлемент = Список.ВыбратьЭлемент("Выберите группировку");
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Строки.Добавить(ВыбранныйЭлемент.Значение, ВыбранныйЭлемент.Представление);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиПередНачаломИзменения(Элемент, Отказ)
	Отказ = (Найти(Элемент.ТекущийЭлемент.Имя, "Пометка") = 0);
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Список = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из СписокДоступныхГруппировок Цикл
		Если Строки.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено 
			ИЛИ Колонки.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Список.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	ВыбранныйЭлемент = Список.ВыбратьЭлемент("Выберите группировку");
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Колонки.Добавить(ВыбранныйЭлемент.Значение, ВыбранныйЭлемент.Представление);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПередНачаломИзменения(Элемент, Отказ)
	Отказ = (Найти(Элемент.ТекущийЭлемент.Имя, "Пометка") = 0);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Список = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из СписокДоступныхПоказателей Цикл
		Если Показатели.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		Список.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	ВыбранныйЭлемент = Список.ВыбратьЭлемент("Выберите показатель");
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Показатели.Добавить(ВыбранныйЭлемент.Значение, ВыбранныйЭлемент.Представление);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Список = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокДоступныхГруппировок Цикл
		Если Поля.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		Список.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	ВыбранныйЭлемент = Список.ВыбратьЭлемент("Выберите поле");
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Поля.Добавить(ВыбранныйЭлемент.Значение, ВыбранныйЭлемент.Представление);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоляПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаВКолонку(Команда)
	тс = Элементы.Строки.ТекущаяСтрока;
	Если тс <> Неопределено Тогда
		Элемент = Строки.НайтиПоИдентификатору(тс);
		Колонки.Добавить(Элемент.Значение, Элемент.Представление, Элемент.Пометка);
		Строки.Удалить(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КолонкаВСтроку(Команда)
	тс = Элементы.Колонки.ТекущаяСтрока;
	Если тс <> Неопределено Тогда
		Элемент = Колонки.НайтиПоИдентификатору(тс);
		Строки.Добавить(Элемент.Значение, Элемент.Представление, Элемент.Пометка);
		Колонки.Удалить(Элемент);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПриИзменении(Элемент)
	ВариантМодифицирован = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВариантОтчета(ОткрыватьФорму)
	Если ОткрыватьФорму Тогда
		П = Новый Структура;
		П.Вставить("КлючОбъекта", КлючОбъекта);
		П.Вставить("КлючТекущихНастроек", ТекущийВариант);
		ВыборНастроек = ОткрытьФормуМодально("ФормаСохраненияВариантовОтчетов", П);
		
		Если ВыборНастроек <> Неопределено Тогда
			ТекущийВариант = ВыборНастроек.КлючНастроек;
			СохранитьВариантОтчетаНаСервере();
		КонецЕсли;
	Иначе
		СохранитьВариантОтчетаНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьВариантОтчетаНаСервере()
	ХранилищеВариантовОтчетов.Сохранить(КлючОбъекта, ТекущийВариант, КомпоновщикНастроек.ПолучитьНастройки()); 
	ВариантМодифицирован = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВариантОтчета()

	стн = Новый СписокЗначений;
	стн.Добавить("СтандартнаяНастройка", "Стандартная настройка (по умолчанию)");
	П = Новый Структура;
	П.Вставить("КлючОбъекта", КлючОбъекта);
	П.Вставить("КлючТекущихНастроек", ТекущийВариант);
	П.Вставить("СтандартныеНастройки", стн);
	ВыборНастроек = ОткрытьФормуМодально("ФормаЗагрузкиВариантовОтчетов", П);
	
	Если ВыборНастроек <> Неопределено Тогда
		Если ВыборНастроек.КлючНастроек = "СтандартнаяНастройка" Тогда
			ТекущийВариант = "Основной";
			ЗаполнитьСтруктуруПоУмолчанию();
			СохранитьВариантОтчетаНаСервере();
		Иначе
			ТекущийВариант = ВыборНастроек.КлючНастроек;
			СохранитьТекущийВариант();
		КонецЕсли;
		ОпределитьСтруктуруОтчета();
	КонецЕсли;			

КонецПроцедуры

&НаСервере
Процедура СохранитьТекущийВариант()
	ХранилищеСистемныхНастроек.Сохранить("Универсальный отчет", "Текущий вариант", ТекущийВариант);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ВариантМодифицирован Тогда
		Ответ = Вопрос("Текущий вариант отчета был изменен. Сохранить эти изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВариантОтчета(Ложь);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("Период", Период);
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие, ПараметрВыполненногоДействия;
	
	Если ЭтоАдресВременногоХранилища(ДанныеРасшифровки) И ЭтоАдресВременногоХранилища(АдресСКД) Тогда
	    СтандартнаяОбработка = Ложь;
		ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));
		
		ДоступныеДействия = Новый Массив;
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
		
		ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыполненногоДействия, ДоступныеДействия);
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			ОткрытьЗначение(ПараметрВыполненногоДействия);
		ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
			Настройки = ПолучитьНастройкиРасшифровкиВХранилище(ПараметрВыполненногоДействия, Расшифровка);
			
			П = Новый Структура;
			П.Вставить("Настройки", Настройки);
			П.Вставить("ТекущийВариант", "Расшифровка");
			П.Вставить("ПараметрыРегистра", ПараметрыРегистра);
			П.Вставить("Период", Период);
			П.Вставить("ЭтоРасшифровка", Истина);
			ОткрытьФорму(ИмяФормы, П, ЭтаФорма, Расшифровка);
		КонецЕсли;

    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиРасшифровкиВХранилище(Парам, ид)
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));
	Возврат ОбработкаРасшифровки.ПрименитьНастройки(ид, Парам);
КонецФункции

&НаКлиенте
Процедура УпрощеннаяНастройка(Команда)
	ПереключитьПанель(Элементы.ГруппаУпрощеннаяНастройка);
КонецПроцедуры

&НаСервере
Процедура НастроитьСтруктуру()
	ПозицияТочки = Найти(ПараметрыРегистра, ".");
	ИмяРегистра = Лев(ПараметрыРегистра, ПозицияТочки-1);
	ИмяВиртуальнойТаблицы = Сред(ПараметрыРегистра, ПозицияТочки+1);
	
	МетаРегистр = Метаданные.РегистрыНакопления[ИмяРегистра];
	
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("Заголовок", Заголовок);
	
	СтруктураОтчета = КомпоновщикНастроек.Настройки.Структура;
	СтруктураОтчета.Очистить();
	
	ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор.Элементы;
	ВыбранныеПоля.Очистить();
	
	ПоляПорядка = КомпоновщикНастроек.Настройки.Порядок.Элементы;
	ПоляПорядка.Очистить();
		
	ПолеПорядкаГруппировки = ПоляПорядка.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ПолеПорядкаГруппировки.Использование = Истина;
		
	Если Колонки.Количество() > 0 Тогда
		ТаблицаОтчета = СтруктураОтчета.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		
		ТекущийНаборКолонок = ТаблицаОтчета.Колонки;
		Для Каждого ГруппировкаКолонки Из Колонки Цикл
			СтрокаИзмерения = ТекущийНаборКолонок.Добавить();
			СтрокаИзмерения.Имя = ГруппировкаКолонки.Значение;
			СтрокаИзмерения.Использование = Истина;
			ПолеИзмерения = СтрокаИзмерения.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеИзмерения.ТипГруппировки = ?(ГруппировкаКолонки.Пометка, ТипГруппировкиКомпоновкиДанных.Иерархия, ТипГруппировкиКомпоновкиДанных.Элементы);
			ПолеИзмерения.Использование = Истина;
			Поле = Новый ПолеКомпоновкиДанных(ГруппировкаКолонки.Значение);
			ПолеИзмерения.Поле = Поле;
			
			АвтоПоле = СтрокаИзмерения.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			АвтоПоле.Использование = Истина;
			
			ПолеПорядкаГруппировки = СтрокаИзмерения.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядкаГруппировки.Использование = Истина;		
			
			ТекущийНаборКолонок = СтрокаИзмерения.Структура;
		КонецЦикла;
		
		ТекущийНаборСтрок = ТаблицаОтчета.Строки;
		Для Каждого ГруппировкаСтроки Из Строки Цикл
			СтрокаИзмерения = ТекущийНаборСтрок.Добавить();
			СтрокаИзмерения.Имя = ГруппировкаСтроки.Значение;
			СтрокаИзмерения.Использование = Истина;
			ПолеИзмерения = СтрокаИзмерения.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеИзмерения.ТипГруппировки = ?(ГруппировкаСтроки.Пометка, ТипГруппировкиКомпоновкиДанных.Иерархия, ТипГруппировкиКомпоновкиДанных.Элементы);
			ПолеИзмерения.Использование = Истина;
			Поле = Новый ПолеКомпоновкиДанных(ГруппировкаСтроки.Значение);
			ПолеИзмерения.Поле = Поле;
			
			АвтоПоле = СтрокаИзмерения.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			АвтоПоле.Использование = Истина;
			
			ПолеПорядкаГруппировки = СтрокаИзмерения.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядкаГруппировки.Использование = Истина;		
			
			ТекущийНаборСтрок = СтрокаИзмерения.Структура;
		КонецЦикла;
		
		// Детали
		Если Детализация > 0 Тогда
			СтрокаИзмерения = ТекущийНаборСтрок.Добавить();
			СтрокаИзмерения.Имя = ?(Строки.Количество()=0,"",ГруппировкаСтроки.Значение);
			СтрокаИзмерения.Использование = Истина;
			ПолеИзмерения = СтрокаИзмерения.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
			ПолеИзмерения.Использование = Истина;
			
			АвтоПоле = СтрокаИзмерения.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			АвтоПоле.Использование = Истина;
			
			ПолеПорядкаГруппировки = СтрокаИзмерения.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядкаГруппировки.Использование = Истина;
		КонецЕсли;
	Иначе
		ТекущийНаборСтрок = СтруктураОтчета;
		Для Каждого ГруппировкаСтроки Из Строки Цикл 
			СтрокаИзмерения = ТекущийНаборСтрок.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			СтрокаИзмерения.Имя = ГруппировкаСтроки.Значение;
			СтрокаИзмерения.Использование = Истина;
			ПолеИзмерения = СтрокаИзмерения.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеИзмерения.ТипГруппировки = ?(ГруппировкаСтроки.Пометка, ТипГруппировкиКомпоновкиДанных.Иерархия, ТипГруппировкиКомпоновкиДанных.Элементы); 
			ПолеИзмерения.Использование = Истина;
								
			Поле = Новый ПолеКомпоновкиДанных(ГруппировкаСтроки.Значение);
			ПолеИзмерения.Поле = Поле;
			
			АвтоПоле = СтрокаИзмерения.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			АвтоПоле.Использование = Истина;
			
			ПолеПорядкаГруппировки = СтрокаИзмерения.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядкаГруппировки.Использование = Истина;		
			
			ТекущийНаборСтрок = СтрокаИзмерения.Структура;
		КонецЦикла;
		// Детали
		Если Детализация > 0 Тогда
			СтрокаИзмерения = ТекущийНаборСтрок.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			СтрокаИзмерения.Имя = ?(Строки.Количество()=0,"",ГруппировкаСтроки.Значение);
			СтрокаИзмерения.Использование = Истина;
			ПолеИзмерения = СтрокаИзмерения.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
			ПолеИзмерения.Использование = Истина;
			
			АвтоПоле = СтрокаИзмерения.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			АвтоПоле.Использование = Истина;
			
			ПолеПорядкаГруппировки = СтрокаИзмерения.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			ПолеПорядкаГруппировки.Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Детализация = 1 Тогда
		
		ДетальноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("ПериодСекунда");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
		ДетальноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("Регистратор");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
		ДетальноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("НомерСтроки");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
	
	ИначеЕсли Детализация = 2 Тогда
		
		ДетальноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("ПериодСекунда");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
		ДетальноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("Регистратор");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
	ИначеЕсли Детализация = 3 Тогда
		
		ДетальноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("ПериодСекунда");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
		ГруппаДеталей = ВыбранныеПоля.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаДеталей.Использование = Истина;
		ГруппаДеталей.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаДеталей.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;

		ГруппаДокумент = ГруппаДеталей.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаДокумент.Использование = Истина;
		ГруппаДокумент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаДокумент.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
		ДетальноеПоле = ГруппаДокумент.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("Регистратор");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
		ДетальноеПоле = ГруппаДокумент.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("НомерСтроки");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
		ДетальноеПоле = ГруппаДеталей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("Комментарий");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	ИначеЕсли Детализация = 4 Тогда
		
		ДетальноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("ПериодСекунда");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
		ГруппаДеталей = ВыбранныеПоля.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаДеталей.Использование = Истина;
		ГруппаДеталей.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаДеталей.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;

		ДетальноеПоле = ГруппаДеталей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("Регистратор");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
		ДетальноеПоле = ГруппаДеталей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных("Комментарий");
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	Иначе
		
		Если Детализация = 6 Тогда
			ИмяПоля = "ПериодДень";
		ИначеЕсли Детализация = 7 Тогда
			ИмяПоля = "ПериодНеделя";
		ИначеЕсли Детализация = 8 Тогда
			ИмяПоля = "ПериодДекада";
		ИначеЕсли Детализация = 9 Тогда
			ИмяПоля = "ПериодМесяц";
		ИначеЕсли Детализация = 10 Тогда
			ИмяПоля = "ПериодКвартал";
		ИначеЕсли Детализация = 11 Тогда
			ИмяПоля = "ПериодПолугодие";
		ИначеЕсли Детализация = 12 Тогда
			ИмяПоля = "ПериодГод";
		КонецЕсли;
		
		ДетальноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПолеПорядкаВыбранногоПоля = ПоляПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядкаВыбранногоПоля.Поле = ДетальноеПоле.Поле;
		ПолеПорядкаВыбранногоПоля.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеПорядкаВыбранногоПоля.Использование = Истина;
		
	КонецЕсли;
	
	Для Каждого ТекущееПоле Из Поля Цикл
		ДетальноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ДетальноеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекущееПоле.Значение);
		ДетальноеПоле.Использование = Истина;
		ДетальноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЦикла;
	
	СуффиксыПолейРесурсов = Новый Структура;
	
	Если МетаРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Если ИмяВиртуальнойТаблицы = "Обороты" Тогда
			СуффиксыПолейРесурсов.Вставить("Приход", "Приход");
			СуффиксыПолейРесурсов.Вставить("Расход", "Расход");
		ИначеЕсли ИмяВиртуальнойТаблицы = "Остатки" Тогда
			СуффиксыПолейРесурсов.Вставить("Остаток", "");
		Иначе
			СуффиксыПолейРесурсов.Вставить("НачальныйОстаток", "Начальный остаток");
			СуффиксыПолейРесурсов.Вставить("Приход", "Приход");
			СуффиксыПолейРесурсов.Вставить("Расход", "Расход");
			СуффиксыПолейРесурсов.Вставить("КонечныйОстаток", "Конечное остаток");
		КонецЕсли;
	Иначе
		СуффиксыПолейРесурсов.Вставить("Оборот", "");
	КонецЕсли;
	
	ГруппаРесурсы = ВыбранныеПоля.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаРесурсы.Использование = Истина;
	ГруппаРесурсы.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаРесурсы.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
		
	Для Каждого СуффиксПоля Из СуффиксыПолейРесурсов Цикл
		ГруппаСуффикса = ГруппаРесурсы.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаСуффикса.Заголовок = СуффиксПоля.Значение;
		ГруппаСуффикса.Использование = Истина;
		ГруппаСуффикса.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаСуффикса.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		
		Если ПоказателиГоризонтально Тогда
			ГруппаСуффикса.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		Иначе
			ГруппаСуффикса.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;
		
		Для Каждого Ресурс Из Показатели Цикл				
			ИмяПоля = Ресурс.Значение + СуффиксПоля.Ключ;
			
			Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

			ВыбранноеПоле = ГруппаСуффикса.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Заголовок = Ресурс.Представление; 
			ВыбранноеПоле.Поле = Поле;
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
					
		КонецЦикла;

			
	КонецЦикла;
	
	
	ВариантМодифицирован = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРегистраПриИзменении(Элемент)
		
	ПриИзмененииРегистра();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУпрощеннаяНастройка Тогда
		ПрочитатьТекущиеНастройкиВУпрощенномВиде();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРегистра()
	ИмяРегистра = Лев(ПараметрыРегистра, Найти(ПараметрыРегистра, ".")-1);
	Мета = Метаданные.РегистрыНакопления[ИмяРегистра];
	Заголовок = Мета.Синоним;
	
	УстановитьКлючОбъекта();
	ПодготовитьСКД();
	
	ХранилищеСистемныхНастроек.Сохранить("Универсальный отчет", "Параметры регистра", ПараметрыРегистра);
	ХранилищеСистемныхНастроек.Сохранить("Универсальный отчет", "Текущий вариант", ТекущийВариант);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Дата") Тогда
		ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыРегистраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВариантМодифицирован Тогда
		Ответ = Вопрос("Текущий вариант отчета был изменен. Сохранить эти изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВариантОтчета(Ложь);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

