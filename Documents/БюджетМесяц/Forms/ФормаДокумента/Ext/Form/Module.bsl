&НаКлиенте
Перем мТекущийМесяц; //на самом деле это текущий день

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Документы.БюджетМесяц.ЗаполнитьСуществующийБюджет(Объект, ДеревоБДРФорма);
		//10 02 14 надо подумать, как лучше сделать
		//Если ЗначениеЗаполнено(Объект.ПредыдущийБюджет) Тогда
		//	ПолучитьОстатокПредыдущегоБюджетаСервер(Объект.ПредыдущийБюджет);
		//КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Документы.БюджетМесяц.ЗаполнитьНовыйКопированием(Параметры.ЗначениеКопирования, ДеревоБДРФорма);				
		Иначе
			Документы.БюджетМесяц.ЗаполнитьНовый(ДеревоБДРФорма);
		КонецЕсли;	
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
	
	ОбновитьТаблицуКэшаСервер();
	
КонецПроцедуры


//пересчитывает итоги по группам дерева
//движение от общих групп к более детальным
&НаСервере
Процедура ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(СтрокиДерева) экспорт
				
	Для Каждого Стр Из СтрокиДерева Цикл

		Если Стр.Строки.Количество() = 0 Тогда
            Продолжить;
		КонецЕсли;
		
        ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(Стр.Строки);
		
		Для сч = 1 по 32 Цикл
			Стр["План"+сч] = Стр.Строки.Итог("План"+сч);
			Стр["Факт"+сч] = Стр.Строки.Итог("Факт"+сч);
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки)
	
	Итого = 0;
	Если Найти(НРег(ИмяКолонки), "план")>0 Тогда
		ИмяКол = "План";
	ИначеЕсли Найти(НРег(ИмяКолонки), "факт")>0 Тогда
		ИмяКол = "Факт";
	Иначе
		Возврат;
	КонецЕсли;
	
	//суммируем все колонки
	Для сч = 1 по 31 Цикл
		Итого = Итого + СтрокаДерева[ИмяКол+Строка(сч)];
	КонецЦикла;
	//и занесем итог в 13-ю
	СтрокаДерева[ИмяКол+"32"] = Итого;
	//пересчитаем итоги по группам в колонке итогов
	ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, ИмяКол+"32");
	
КонецПроцедуры	

//Параметры:
//НачальнаяКолонка - номер колонки
&НаКлиенте
Процедура ПересчитатьОстаткиВДеревеБДРКлиент(НачальнаяКолонка)
	
	//пересчитаем остатки в дереве БДР
	//надо пройтись только по группам вернего уровня (0)
	СтрокиДерева = ДеревоБДР.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//получим нач ост из первой колонки дерева
	НачальныйОстаток = СтрокиДерева.Получить(0)["План"+Строка(НачальнаяКолонка)];
	
	НачальныйОстатокПлан = НачальныйОстаток;
	//заполним нач остаток факт
	НачальныйОстатокФакт = СтрокиДерева.Получить(0)["Факт"+Строка(НачальнаяКолонка)];
	//СтрокиДерева.Получить(0)["Факт1"] = НачальныйОстаток;
	
	Для сч = НачальнаяКолонка по 32 Цикл
			
		ИмяКолонкиПлан = "План"+Строка(сч);
		ИмяКолонкиФакт = "Факт"+Строка(сч);
		
		КонечныйОстатокПлан = НачальныйОстатокПлан;
		КонечныйОстатокФакт = НачальныйОстатокФакт;
		
		//НачальныйОстаток = СтрокиДерева.Получить(0)[ИмяКолонкиПлан];
		//КонечныйОстатокПлан = НачальныйОстаток;
		//КонечныйОстатокФакт = НачальныйОстаток;
		
		//обходим только уровень 0, глубже не надо
		Для Каждого Стр Из СтрокиДерева Цикл
			//если в поле СтатьяДР находится строка, то это нач или кон остаток
			//эту строку надо пропустить
			Если ТипЗнч (Стр.СтатьяДР) = Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;				
			КонечныйОстатокПлан = КонечныйОстатокПлан + Стр[ИмяКолонкиПлан]*Стр.ПриходРасход;
			КонечныйОстатокФакт = КонечныйОстатокФакт + Стр[ИмяКолонкиФакт]*Стр.ПриходРасход;
		КонецЦикла;
		
		//в последнюю строку поместим новый конечный остаток
		СтрокиДерева.Получить(СтрокиДерева.Количество()-1)[ИмяКолонкиПлан] = КонечныйОстатокПлан;
		СтрокиДерева.Получить(СтрокиДерева.Количество()-1)[ИмяКолонкиФакт] = КонечныйОстатокФакт;
		
		//в первую строку следующей колонки поместим новый начальный остаток (конечный ост тек колонки)
		Если сч<31 Тогда
			СтрокиДерева.Получить(0)["План"+Строка(сч+1)] = КонечныйОстатокПлан;
			СтрокиДерева.Получить(0)["Факт"+Строка(сч+1)] = КонечныйОстатокФакт;
			НачальныйОстатокПлан = КонечныйОстатокПлан;
			НачальныйОстатокФакт = КонечныйОстатокФакт;
			
		ИначеЕсли сч=31 Тогда
			//для Итогов нач ост берем из первой ячейки таблицы - ост нач года
			НачальныйОстатокПлан = СтрокиДерева.Получить(0)["План1"];
			НачальныйОстатокФакт = СтрокиДерева.Получить(0)["Факт1"];
			
			СтрокиДерева.Получить(0)["План"+Строка(сч+1)] = НачальныйОстатокПлан; 
			СтрокиДерева.Получить(0)["Факт"+Строка(сч+1)] = НачальныйОстатокФакт;
			
		КонецЕсли;
		
		
	КонецЦикла;
		
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки)
	
	Если Найти(ИмяКолонки, "План")>0 Тогда
		НомерКол = СтрЗаменить(ИмяКолонки, "План","");
	ИначеЕсли Найти(ИмяКолонки, "Факт")>0 Тогда
		НомерКол = СтрЗаменить(ИмяКолонки, "Факт","");
	КонецЕсли;
		
	// Пересчитаем итоги по группам дерева
	//СтрокаДерева - это строка с элементом справочника
	//получим родителя, если он есть - суммируем все значения в дочерних строках
	СтрРод = СтрокаДерева.ПолучитьРодителя(); 
	Пока СтрРод <> Неопределено Цикл
		//получили все дочерние строки
		Строки = СтрРод.ПолучитьЭлементы();
		
		Итого = 0;
		//и по выбранной колонке получим итог
		Для Каждого Стр Из Строки Цикл
			Итого =  Итого + Стр[ИмяКолонки];
		КонецЦикла;
		//запиешм итог в поле родительской строки
		СтрРод[ИмяКолонки] = Итого;
		//для родительской строки попробуем получить родителя и посчитать итог для него
		//в следующей итерации цикла
		СтрРод = СтрРод.ПолучитьРодителя();  
	КонецЦикла;     
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоБДРПриИзменении(Элемент)
	Модифицированность = Истина;
	
	//в этой строке произошло изменение
	СтрокаДерева = Элемент.ТекущиеДанные;
	
	//имя колонки выглядит как Таблица1План4, Элемент.имя = "Таблица1"
	ИмяКолонки = СтрЗаменить(Элемент.ТекущийЭлемент.Имя,Элемент.имя,"");
	
	Если Найти(ИмяКолонки,"План")>0 Тогда
		НомерКолонки = Число(СтрЗаменить(ИмяКолонки,"План",""));
	Иначе
		Возврат;
	КонецЕсли;
	
	//изменилась одна ячейка
	//надо изменить 
	//1. итог план/факт по этой строке
	//2. итоги по группам в этой колонке
	//3. итоги по группам в итогах  - выполняется в пункте 1
	//4. остатки
	//5. выполнение плана - по этой колонке, по колонке итогов, по остаткам
	
	//1. итог план/факт по этой строке
	ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки);
		
	//2. Пересчитаем итоги для вышестоящих элементов (групп) в одной колонке 
	ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки);
	
	//3. пропускаем - выполнено в п.1
	
	//4. пересчитаем остатки по месяцам в дереве БДР (на клиенте) начиная с измененной колонки
	ПересчитатьОстаткиВДеревеБДРКлиент(НомерКолонки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Провести(Неопределено);
	
	Модифицированность = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура Провести(Команда)
	
	СохранитьБюджетС();	

КонецПроцедуры

&НаСервере
Процедура СохранитьБюджетС()
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
		
	Документы.БюджетМесяц.СохранитьБюджетСМенеджер(ДеревоБДРФорма, Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьПроведение(Команда)
	ОтменитьПроведениеСервер();
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеСервер()
	НаборЗаписей = РегистрыНакопления.БДР.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Регистратор.Установить(Объект.Ссылка);
	
	НаборЗаписей.Прочитать();
	Для Каждого Стр Из НаборЗаписей Цикл
		Стр.Активность = Ложь;
	КонецЦикла;

	НаборЗаписей.Записать();
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СохранитьДеревоСервер();
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСервер()
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	Документы.БюджетМесяц.СохранитьДеревоСерверМенеджер(ДеревоБДРФорма, Объект);
КонецПроцедуры



&НаКлиенте
Процедура ДеревоБДРПередНачаломИзменения(Элемент, Отказ)
	//итоги не редактируем
	Если (Найти(Элемент.ТекущийЭлемент.Имя,"План32")>0)
		//ИЛИ (Найти(Элемент.ТекущийЭлемент.Имя,"Факт13")>0) 
		Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Элемент.ТекущиеДанные.СтатьяДР) = Тип("Строка") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоБДРПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОстатокПредыдущегоБюджетаКлиент()

	ПолучитьОстатокПредыдущегоБюджетаСервер(Объект.ПредыдущийБюджет);
	Модифицированность = Истина;

КонецФункции // ПолучитьОстатокПредыдущегоБюджета()

&НаКлиенте
Процедура ПредыдущийБюджет1ПриИзменении(Элемент)
	ПолучитьОстатокПредыдущегоБюджетаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНачОстатокИзПредБюджета(Команда)
	ПолучитьОстатокПредыдущегоБюджетаКлиент();
КонецПроцедуры

//ОПИСАНИЕ
//Параметры:
//	Бюджет - предыдущий бюджет за месяц
//Возвращаемое значение:
//	значение
//
Процедура ПолучитьОстатокПредыдущегоБюджетаСервер(Бюджет)
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	Объект.НачальныйОстаток = Документы.БюджетМесяц.ПолучитьОстатокБюджета(Бюджет);
	
	НовСтр 				= ДеревоБДРФорма.Строки.Получить(0);
	НовСтр["План1"] 	= Объект.НачальныйОстаток;
		
	Документы.БюджетМесяц.ПересчитатьОстаткиВДеревеБДРСервер(ДеревоБДРФорма);
		
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьФакт(Команда)
	//Включить видимость колонок Факт и %
	ВидимостьКолонокФактРезКлиент(,Истина);
КонецПроцедуры

//нужна. включает / выключает видимость колонок Факт, Рез при 
//изменении флажка ПоказыватьФакт
//05 07 11
//эта процедура будет вызываться из команды ПоказатьФакт
//вместо того, чтобы вызываться из обработчика флажка
//ПоказыватьФакт
&НаКлиенте
Процедура ВидимостьКолонокФактРезКлиент(Видимость = Неопределено, Интерактивно = Ложь)
	 //если явно не задана - инвертируем, иначе - просто устанавливаем новую видимость
	Если Видимость = Неопределено Тогда
		//определим видимость первой колонки с фактом и инвертируем
		Видимость = Элементы.ДеревоБДР.ПодчиненныеЭлементы["ДеревоБДРГруппа1"].ПодчиненныеЭлементы["ДеревоБДРФакт1"].Видимость;
		Если Видимость Тогда
			Видимость = Ложь;
			Элементы.кнПоказатьФакт.Заголовок = "Показать факт";
		Иначе
			Видимость = Истина;
			Элементы.кнПоказатьФакт.Заголовок = "Скрыть факт";
		КонецЕсли;
	КонецЕсли;
	
	Для сч = 1 по 32 Цикл
		Группа = Элементы.ДеревоБДР.ПодчиненныеЭлементы["ДеревоБДРГруппа"+сч];
		Группа.Видимость = Истина;
		Группа.ПодчиненныеЭлементы["ДеревоБДРФакт"+сч].Видимость = Видимость;// И ВидимостьПоМесяцам;
	КонецЦикла;
	
	//фиксация колонки 32 (Итого) справа
	Группа = Элементы.ДеревоБДР.ПодчиненныеЭлементы["ДеревоБДРГруппа32"];
	Если Видимость = Ложь Тогда
		Группа.ПодчиненныеЭлементы["ДеревоБДРПлан32"].ФиксацияВТаблице = ФиксацияВТаблице.Право;
	Иначе
		Группа.ПодчиненныеЭлементы["ДеревоБДРПлан32"].ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	КонецЕсли;
	
	ВидимостьКолонокПредыдущихМесяцев();
	
КонецПроцедуры

//CF 2.0
//определяет, по каким месяцам есть обороты факт, а по каким - нет
//и если оборотов нет, то колонки Факт и Рез можно не показывать
//при нажании кнопки ПоказатьФакт
//Возвращает Структуру, есть обороты за месяц - истина, нет оборотов - ложь
//можно сразу использовать значения для метода Видимость()
&НаСервере
Функция ЕстьОборотыПоМесяцам()

	Рез = Новый Структура("_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31");
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	Для Каждого Кол Из ДеревоБДРФорма.Колонки Цикл
		
		ИмяКол = СокрЛП(Кол.Имя);
		Если Найти(НРег(ИмяКол),"факт")>0 Тогда
			Номер = Сред(ИмяКол, 5, СтрДлина(ИмяКол)-4);
			
			//посчитаем Итог по колонке. метод ДеревоБДРФорма.Строки.Итог("факт"+номер) не подходит
			//потому что в остатках есть значения и они посчитаются, а нам это не надо
			ИтогПоКолонке = 0;
			Для Каждого Стр Из ДеревоБДРФорма.Строки Цикл
				
				Если Стр.СтатьяДР = "Нач. остаток" Тогда
					Продолжить;
				ИначеЕсли Стр.СтатьяДР = "Кон. остаток" Тогда
					Продолжить;
				КонецЕсли;
			    ИтогПоКолонке = ИтогПоКолонке + Стр["Факт"+Номер];
			КонецЦикла;
			
			Рез.Вставить("_"+Номер,?(ИтогПоКолонке=0,Ложь, Истина));
		КонецЕсли;
		
	КонецЦикла;

	Возврат Рез;
	
КонецФункции // ЕстьОборотыЗаМесяц()

//нужна. включает / выключает видимость колонок предыдущих месяцев
&НаКлиенте
Процедура ВидимостьКолонокПредыдущихМесяцев()
       
        //Если мСкрыватьПрошлыеМесяцы Тогда //16 09 12 - поменял условие на Пометка
        Если НЕ Элементы.Таблица1ПоказыватьПрошлыеМесяцы.Пометка Тогда
                Для сч = 1 По мТекущийМесяц - 1 Цикл
                        Элементы.ДеревоБДР.ПодчиненныеЭлементы["ДеревоБДРГруппа"+сч].Видимость = Ложь;
                КонецЦикла;
        Иначе//отобразить
                //ВидимостьФакта = Элементы.кнПоказатьФакт.Пометка;
                //12/01/15 надо определять через заголовок кнопки
                ВидимостьФакта =                Элементы.кнПоказатьФакт.Заголовок = "Скрыть факт";
 
                СтруктураВидимостиКолонокПоМесяцам =  ЕстьОборотыПоМесяцам();
                ВидимостьПоМесяцам = Ложь;
               
                Для сч = 1 По мТекущийМесяц - 1 Цикл
                        Группа = Элементы.ДеревоБДР.ПодчиненныеЭлементы["ДеревоБДРГруппа"+сч];
                        Группа.Видимость = Истина;
                       
                        СтруктураВидимостиКолонокПоМесяцам.Свойство("_"+сч,ВидимостьПоМесяцам);
                        //Группа.ПодчиненныеЭлементы["ДеревоБДРФакт"+сч].Видимость = ВидимостьФакта И ВидимостьПоМесяцам;
                        //12/01/15
                        Группа.ПодчиненныеЭлементы["ДеревоБДРФакт"+сч].Видимость = ВидимостьФакта И ИСТИНА;
                       
                КонецЦикла;
 
        КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мТекущийМесяц = День(ТекущаяДата());
	
	
	Элементы.ДеревоБДР.ТолькоПросмотр 		= Объект.ТолькоПросмотр;
	Элементы.ДеревоБДР1.ТолькоПросмотр 		= Объект.ТолькоПросмотр;
	Элементы.Наименование.ТолькоПросмотр 	= Объект.ТолькоПросмотр;
	Элементы.Дата.ТолькоПросмотр 			= Объект.ТолькоПросмотр;
	Элементы.НачальныйОстаток.ТолькоПросмотр = Объект.ТолькоПросмотр;
	
	элементы.кнЗаполнитьФактПрогноз.Доступность = НЕ Объект.ТолькоПросмотр;
	элементы.кнОбновитьГодовойБюджет.Доступность = НЕ Объект.ТолькоПросмотр;
	
	элементы.ЗаполнитьУровеньДокументов.Доступность = НЕ Объект.ТолькоПросмотр;
	элементы.ОчиститьПлан.Доступность = НЕ Объект.ТолькоПросмотр;
	элементы.ЗаполнитьИзГодовогоБюджета.Доступность = НЕ Объект.ТолькоПросмотр;
	элементы.ЗаполнитьПланПрогнозом.Доступность = НЕ Объект.ТолькоПросмотр;
	элементы.ЗаполнитьПланФактом.Доступность = НЕ Объект.ТолькоПросмотр;
	элементы.ЗаполнитьПланФактомБезОч.Доступность = НЕ Объект.ТолькоПросмотр;
	элементы.ОбновитьФакт.Доступность = НЕ Объект.ТолькоПросмотр;
	//цвет фона колонок с выходными днями сделаем светло-зеленым
	ЦветКол = Новый Цвет(242, 255, 242);
	
	Для Каждого Гр Из Элементы.ДеревоБДР.ПодчиненныеЭлементы Цикл
		Если Найти(Гр.Имя, "ДеревоБДРГруппа")>0 Тогда
			
			Для Каждого Кол Из Гр.ПодчиненныеЭлементы Цикл 
				Если Найти(Кол.Имя, "ДеревоБДРПлан")>0 ИЛИ Найти(Кол.Имя, "ДеревоБДРФакт")>0 Тогда
					Если Найти(Кол.Имя, "ДеревоБДРПлан")>0 Тогда
						НомерКол = Число(СтрЗаменить(Кол.Имя, "ДеревоБДРПлан", ""));
					Иначе
						НомерКол = Число(СтрЗаменить(Кол.Имя, "ДеревоБДРФакт", ""));
					КонецЕсли;
					
					Если НомерКол > 31 ИЛИ НомерКол < 1 Тогда
						Продолжить;
					КонецЕсли;
					Если НомерКол > День(КонецМесяца(Объект.Дата)) Тогда
						Продолжить;
					КонецЕсли;
					ТекДата = Дата(Год(Объект.Дата), Месяц(Объект.Дата), НомерКол);
					Д = ДеньНедели(ТекДата);
					Если Д = 6 ИЛИ Д = 7 Тогда
						Кол.ЦветФона = ЦветКол;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	//конец цвет фона колонок с выходными днями сделаем розовым
	
	
	//16 03 14
	//чтение настроек видимости из РС "НастройкаОтображенияБюджета"
	СтруктураНастроек = ПолучитьНастройкиОтображения();
	//детализация
	//НастройкаПриОткрытииДетализация = СтруктураНастроек.ПоказыватьДетализацию;
	//Элементы.Группа2.Видимость = НастройкаПриОткрытииДетализация;
	//Элементы.ТабДетализации.Видимость = НастройкаПриОткрытииДетализация;
	//Элементы.ФормаПоказыватьДетализацию.Пометка = НастройкаПриОткрытииДетализация;
	//прошлое. !!! порядок получения свойств СкрыватьПрошлыеМесяцы и ПоказыватьФакт менять нельзя!
	//мСкрыватьПрошлыеМесяцы = Объект.СкрыватьПрошлыеМесяцы;
	НастройкаПриОткрытииПрошлыеМесяцы = СтруктураНастроек.СкрыватьПрошлыеМесяцы;
	Элементы.Таблица1ПоказыватьПрошлыеМесяцы.Пометка = НЕ НастройкаПриОткрытииПрошлыеМесяцы;
	
	ВидимостьКолонокФактРезКлиент(Ложь);//скрыть Факт

	вер838_ШиринаКолонок1_12 = 6;
	
	вер838_УстановитьШиринуКолонок1_12_сервер(вер838_ШиринаКолонок1_12);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиОтображения()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаОтображенияБюджета.ПоказыватьДетализацию,
		|	НастройкаОтображенияБюджета.ПоказыватьФакт,
		|	НастройкаОтображенияБюджета.СкрыватьПрошлыеМесяцы
		|ИЗ
		|	РегистрСведений.НастройкаОтображенияБюджета КАК НастройкаОтображенияБюджета
		|ГДЕ
		|	НастройкаОтображенияБюджета.Бюджет = &Бюджет";

	Запрос.УстановитьПараметр("Бюджет", Объект.Ссылка);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	СтруктураНастроек = Новый Структура;
	Если Выборка.Следующий() Тогда
		СтруктураНастроек.Вставить("ПоказыватьДетализацию",Выборка.ПоказыватьДетализацию);
		СтруктураНастроек.Вставить("ПоказыватьФакт",Выборка.ПоказыватьФакт);
		СтруктураНастроек.Вставить("СкрыватьПрошлыеМесяцы",Выборка.СкрыватьПрошлыеМесяцы);
	Иначе
		СтруктураНастроек.Вставить("ПоказыватьДетализацию",Ложь);
		СтруктураНастроек.Вставить("ПоказыватьФакт",Ложь);
		СтруктураНастроек.Вставить("СкрыватьПрошлыеМесяцы",Ложь);
	КонецЕсли;

	Возврат СтруктураНастроек;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИзГодовогоБюджета(Команда)
	
	БюджетГод = "";
	Если Объект.БДР.Количество()>0 Тогда
		Если Вопрос("Заполнить документ? Текущие данные будут удалены!",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет)=КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВвестиЗначение(БюджетГод, "Выберите годовой бюджет",Тип("ДокументСсылка.БюджетГод"))=Истина Тогда
		НаКакоеЧислоМесяца = Неопределено;
		Если ВвестиЗначение(НаКакоеЧислоМесяца, "На какое число заполнить",Тип("Число"))=Истина Тогда
			ЗаполнитьИзГодовогоБюджетаСервер(БюджетГод, НаКакоеЧислоМесяца);
			//Модифицированность = Истина;
		КонецЕсли;
		
		//ЗаполнитьИзГодовогоБюджетаСервер(БюджетГод, НаКакоеЧислоМесяца);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзГодовогоБюджетаСервер(БюджетГод, НаКакоеЧислоМесяца =  Неопределено)
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	Если Объект.БДР.Количество()>0 Тогда
		Объект.БДР.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК СтатьяДР,
	|	БДР.СуммаПлан КАК План1
	|ИЗ
	|	Справочник.СтатьиДоходовРасходов КАК Спр
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			БДР.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|			БДР.СуммаПлан КАК СуммаПлан
	|		ИЗ
	|			РегистрНакопления.БДР КАК БДР
	|		ГДЕ
	|			БДР.Регистратор = &БюджетГод
	|			И БДР.Период = &БюджетПериод) КАК БДР
	|		ПО (БДР.СтатьяДоходовРасходов = Спр.Ссылка)";
	  
	Запрос.УстановитьПараметр("БюджетГод",БюджетГод);
	БюджетПериод = Дата(Год(Объект.Дата),Месяц(Объект.Дата),1);
	Запрос.УстановитьПараметр("БюджетПериод",БюджетПериод);
	Запрос.Выполнить();	
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьИзГодовогоБюджетаСерверРекурсивно(ТЗ, ДеревоБДРФорма, НаКакоеЧислоМесяца);
	
	ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(ДеревоБДРФорма.Строки);
	
	Документы.БюджетМесяц.ПересчитатьОстаткиВДеревеБДРСервер(ДеревоБДРФорма);		
	
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзГодовогоБюджетаСерверРекурсивно(ТЗ, СтрокаДереваФормы, НаКакоеЧислоМесяца =  Неопределено)
	
	Для каждого Стр Из СтрокаДереваФормы.Строки Цикл
		
		СтрокаТЗ = ТЗ.Найти(Стр.СтатьяДР,"СтатьяДР");
		Если СтрокаТЗ<>Неопределено Тогда
			Если НаКакоеЧислоМесяца =  Неопределено Тогда
				Стр.План1 = СтрокаТЗ.План1;
			Иначе
				Стр["План"+Строка(НаКакоеЧислоМесяца)] = СтрокаТЗ.План1;
			КонецЕсли;
			Стр.План32= СтрокаТЗ.План1;
		КонецЕсли;
		
		ЗаполнитьИзГодовогоБюджетаСерверРекурсивно(ТЗ, Стр, НаКакоеЧислоМесяца);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НачальныйОстатокПриИзменении(Элемент)
	СтрокиДерева = ДеревоБДР.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокиДерева.Получить(0)["План1"]=ОБъект.НачальныйОстаток;
	
	ПересчитатьОстаткиВДеревеБДРКлиент(1)
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьПлан(Команда)
	Если Вопрос("Очистить план?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ОчиститьПланСервер();
	Модифицированность=Истина;
КонецПроцедуры

&НаСервере
Процедура ОчиститьПланСервер()
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	Документы.БюджетМесяц.ОчиститьПланСерверМенеджер(ДеревоБДРФорма);
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБДР1ПриИзменении(Элемент)
	
	//в этой строке произошло изменение
	СтрокаДерева = Элемент.ТекущиеДанные;
	
	//имя колонки выглядит как Таблица1План4, Элемент.имя = "Таблица1"
	ИмяКолонки = СтрЗаменить(Элемент.ТекущийЭлемент.Имя,Элемент.имя,"");
	
	Если Найти(ИмяКолонки,"План")>0 Тогда
		НомерКолонки = Число(СтрЗаменить(ИмяКолонки,"План",""));
	ИначеЕсли Найти(ИмяКолонки,"Факт")>0 Тогда
		НомерКолонки = Число(СтрЗаменить(ИмяКолонки,"Факт",""));
	Иначе
		Возврат;
	КонецЕсли;
	
	//изменилась одна ячейка
	//надо изменить 
	//1. итог план/факт по этой строке
	//2. итоги по группам в этой колонке
	//3. итоги по группам в итогах  - выполняется в пункте 1
	//4. остатки
	//5. выполнение плана - по этой колонке, по колонке итогов, по остаткам
	
	//1. итог план/факт по этой строке
	ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки);
		
	//2. Пересчитаем итоги для вышестоящих элементов (групп) в одной колонке 
	ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки);
	
	//3. пропускаем - выполнено в п.1
	
	//4. пересчитаем остатки по месяцам в дереве БДР (на клиенте) начиная с измененной колонки
	ПересчитатьОстаткиВДеревеБДРКлиент(НомерКолонки);
	
	//пересчитаем выполнение плана
	//выполнение плана по всему дереву пересчитывается очень долго, поэтому надо его оптимизировать
	//как вариант, надо пересчитывать выполнение при совпадении условий
	// поменяли колонку План и есть данные в колонке Факт ИЛИ поменяли колонку Факт и есть данные в колонке План
	// надо пересчитать план для родительских строк дерева только по этой колонке
	// потом надо пересчитать выполнение плана по всем остаткам от тек месяца и до конца
	// и последнее - пересчитать итоги
	СтрокиДерева = ДеревоБДР.ПолучитьЭлементы();
	
	//5. пересчет выполнения плана в тек колонке и в кол Итого
	//ПересчитатьВыполнениеПланаОднаКолонкаРекурсивноКлиент(СтрокиДерева, НомерКолонки);
	
	Модифицированность = Истина;

КонецПроцедуры


        
&НаКлиенте
Процедура ЗаполнитьПланФактом(Команда)
	
	Перем ПериодМес;
	ПериодМес=НачалоМесяца(Объект.Дата);
	Если НЕ ВвестиЗначение(ПериодМес,"Выберите месяц",тип("Дата")) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПланСервер();
	
	ЗаполнитьПланПрогнозомСервер(ПериодМес, "Факт", Истина);

	Модифицированность=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланПрогнозом(Команда)
	Перем ПериодМес;
	ПериодМес=НачалоМесяца(Объект.Дата);
	Если НЕ ВвестиЗначение(ПериодМес,"Выберите месяц",тип("Дата")) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПланСервер();
	
	ЗаполнитьПланПрогнозомСервер(ПериодМес, "Прогноз", Истина);
	
	Модифицированность=Истина;

КонецПроцедуры

//после начала месяца можно заполнить часть плана из факта (до текущей даты)
//а после текущей даты - прогнозом
&НаКлиенте
Процедура ЗаполнитьПланПрогнозомИФактом(Команда)
	Перем ПериодМес;
	ПериодМес=НачалоМесяца(Объект.Дата);
	Если НЕ ВвестиЗначение(ПериодМес,"Выберите месяц",тип("Дата")) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПланСервер();
	
	ЗаполнитьПланПрогнозомСервер(ПериодМес, "ПрогнозФакт", Истина);
	
	Модифицированность=Истина;

КонецПроцедуры

//Заполняет дерево бюджет фактом или прогнозом с заменой текущих данных или без нее
//Параметры:
//	ПериодМес - дата, для использования в условии запроса
//	ПрогнозИлиФакт - строка "Прогноз" или "Факт" - какое поле брать из выборки
//	Замещать - булево, определяет надо ли замещать текущие данные, даже если в выборке ноль
//Возвращаемое значение:
//	нет
//
&НаСервере
Процедура ЗаполнитьПланПрогнозомСервер(ПериодМес, ПрогнозИлиФакт="Прогноз", Замещать = Ложь)
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	Документы.БюджетМесяц.ЗаполнитьПланПрогнозомСерверМенеджер(ДеревоБДРФорма, ПериодМес, ПрогнозИлиФакт, Замещать);

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	БДР.СтатьяДоходовРасходов КАК СтатьяДР,
	//	|	СУММА(БДР.СуммаФактПрогноз) КАК Прогноз,
	//	|	СУММА(БДР.СуммаФакт) КАК Факт,
	//	|	СУММА(БДР.СуммаПлан) КАК План,
	//	|	СУММА(БДР.СуммаФакт+БДР.СуммаФактПрогноз) КАК ПрогнозФакт,
	//	|	НАЧАЛОПЕРИОДА(БДР.Период, ДЕНЬ) КАК День
	//	|ИЗ
	//	|	РегистрНакопления.БДР КАК БДР
	//	|ГДЕ
	//	|	НЕ БДР.Регистратор ССЫЛКА Документ.БюджетГод
	//	|	И НЕ БДР.Регистратор ССЫЛКА Документ.БюджетМесяц
	//	|	И БДР.Период МЕЖДУ &НачПериод И &КонПериод
	//	|	И НЕ БДР.СтатьяДоходовРасходов.ЭтоГруппа
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	БДР.СтатьяДоходовРасходов,
	//	|	НАЧАЛОПЕРИОДА(БДР.Период, ДЕНЬ)";

	//Запрос.УстановитьПараметр("НачПериод", НачалоМесяца(ПериодМес));
	//Запрос.УстановитьПараметр("КонПериод", КонецМесяца(ПериодМес));

	//Результат = Запрос.Выполнить();

	//Выборка = Результат.Выбрать();
	//
	//тззззззззз = Результат.Выгрузить();

	//Пока Выборка.Следующий() Цикл
	//	
	//	ПоискСтроки = ДеревоБДРФорма.Строки.Найти(Выборка.СтатьяДР,"СтатьяДР",Истина);
	//	
	//	Если ПоискСтроки=Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если Замещать Тогда
	//		ПоискСтроки["План"+День(Выборка.День)]=Выборка[ПрогнозИлиФакт];
	//	Иначе
	//		Если Выборка[ПрогнозИлиФакт] <> 0 Тогда
	//			ПоискСтроки["План"+День(Выборка.День)]=Выборка[ПрогнозИлиФакт];
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ПоискСтроки["План32"]=0;
	//	
	//	Для сч=1 по 31 Цикл
	//		ПоискСтроки["План32"]=ПоискСтроки["План32"]+ПоискСтроки["План"+сч];
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//		
	//ОбщийМодуль1Сервер.ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(ДеревоБДРФорма.Строки,32);
	//
	//Документы.БюджетМесяц.ПересчитатьОстаткиВДеревеБДРСервер(ДеревоБДРФорма);
	
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланФактомБезОч(Команда)
	
	Перем ПериодМес;
	ПериодМес=НачалоМесяца(Объект.Дата);
	Если НЕ ВвестиЗначение(ПериодМес,"Выберите месяц",тип("Дата")) Тогда
		Возврат;
	КонецЕсли;
	
	//ОчиститьПланСервер();
	
	ЗаполнитьПланПрогнозомСервер(ПериодМес, "Факт", Ложь);

	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДругойПериод(Команда)
	//1. сформировать список доступных дней (для простоты - все дни месяца)
	//2. пользователь выбирает день и нажимает ОК
	
	//проверка строки документа
	Если Элементы.ДеревоБДР.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//группы статей не переносим
	Если СтатьяДРЭтоГруппаСервер(Элементы.ДеревоБДР.ТекущиеДанные.статьядр) Тогда
		Возврат;
	КонецЕсли;
	
	//ПланХХ
	ИмяКолонки = Элементы.ДеревоБДР.ТекущийЭлемент.Имя;
	
	//если нажали Перенести в колонке Факт или другой, отличной от Плана, то ничего не делаем
	Если Найти(Элементы.ДеревоБДР.ТекущийЭлемент.Имя, "План") = 0 Тогда
		Возврат;
	КонецЕсли;

	//вырезать слово План и оставить только число
	НомерКолонки = ПолучитьНомерКолонкиКлиент(ИмяКолонки);//это будет период
	
	//это итоговая колонка, номер 32, ее не переносим
	Если НомерКолонки > 31 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПериодов = Новый СписокЗначений;
	
	Для сч = 1 По 31 Цикл
		
		//Если сч = НомерКолонки Тогда
		//	Продолжить;
		//КонецЕсли;
		
		СписокПериодов.Добавить(Строка(сч));
										   
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("ТекМесяц",НачалоМесяца(Объект.Дата));
	ДеньМесяца = ОткрытьФормуМодально("Документ.БюджетМесяц.Форма.ФормаПереноса", ПараметрыФормы, ЭтаФорма);
	Если ДеньМесяца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//сохраним значения из старой колонки
	План = Элементы.ДеревоБДР.ТекущиеДанные["План"+НомерКолонки];
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("СтатьяДР", Элементы.ДеревоБДР.ТекущиеДанные["СтатьяДР"]);
	ПараметрыОтбора.Вставить("Период", НомерКолонки);
	НайденныеСтроки = Объект.Детализация.НайтиСтроки(ПараметрыОтбора);
	
	//очистим данные в колонке из которой переносим
	Элементы.ДеревоБДР.ТекущиеДанные["План"+НомерКолонки] = 0;
	//запишем данные в колонку куда переносим
	НомерКолонкиКуда = День(ДеньМесяца);
	Элементы.ДеревоБДР.ТекущиеДанные["План"+НомерКолонкиКуда] = План;
	//если есть детализация, надо ее переписать на новый месяц
	Для каждого Стр Из НайденныеСтроки Цикл
		Стр.Период = НомерКолонкиКуда;
	КонецЦикла;
	
	Модифицированность = Истина;

	ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(Элементы.ДеревоБДР.ТекущиеДанные,"План"+НомерКолонки);
	//старая колонка (откуда перенесли)
	ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(Элементы.ДеревоБДР.ТекущиеДанные,"План"+НомерКолонки);
	//новая колонка (куда перенесли)
	ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(Элементы.ДеревоБДР.ТекущиеДанные,"План"+НомерКолонкиКуда);
	//остатки
	ПересчитатьОстаткиВДеревеБДРКлиент(1);	
КонецПроцедуры



&НаСервереБезКонтекста
Функция СтатьяДРЭтоГруппаСервер(Статья)
	Возврат Статья.ЭтоГруппа;
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ПолучитьНомерКолонкиКлиент(ИмяКолонки)

	Если Найти(ИмяКолонки,"План")>0 Тогда
		НомерКолонки =СтрЗаменить(ИмяКолонки, "ДеревоБДРПлан","");
	ИначеЕсли Найти(ИмяКолонки,"Факт")>0 Тогда
		НомерКолонки =СтрЗаменить(ИмяКолонки, "ДеревоБДРФакт","");
	ИначеЕсли Найти(ИмяКолонки,"Рез")>0 Тогда
		НомерКолонки =СтрЗаменить(ИмяКолонки, "ДеревоБДРРез","");
	Иначе
		Возврат 999;
	КонецЕсли;	
	Возврат Число(НомерКолонки);

КонецФункции

&НаКлиенте
Процедура ДеревоБДРПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьГодовойБюджет(Команда)
	Период = Дата( СтрЗаменить(Год(Объект.Дата), Символы.НПП, ""), Строка(Месяц(Объект.Дата)), "1");
	
	ТекстВопроса = "Подтвердите обновление годового бюджета";
	Если ЗначениеЗаполнено(Объект.ГодовойБюджет) Тогда
		ТекстВопроса = ТекстВопроса+" "+Строка(Объект.ГодовойБюджет);
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.Отмена) = КодВозвратаДиалога.Отмена тогда
			Возврат;
		КонецЕсли;
		ОбновитьГодовойБюджетС(Период, Объект.ГодовойБюджет);		
		Возврат;
	КонецЕсли;
	
	х=Неопределено;
	Если НЕ ВвестиЗначение(х, "Выберите годовой бюджет", Тип("ДокументСсылка.БюджетГод")) Тогда
		Возврат
	КонецЕсли;
	
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.Отмена) = КодВозвратаДиалога.Отмена тогда
		Возврат;
	КонецЕсли;
	ОбновитьГодовойБюджетС(Период, х);
КонецПроцедуры

//Параметры
//	Бюджет - годовой бюджет
&НаСервере
Процедура ОбновитьГодовойБюджетС(Период, Бюджет)
	
	//месяц в годовом бюджете определяем по дате этого документа (месячного бюджета)
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	Документы.БюджетМесяц.ОбновитьГодовойБюджетСМенеджер(Период, ДеревоБДРФорма, Бюджет);
		
КонецПроцедуры


&НаКлиенте
Процедура ДеревоБДР1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		СтрокаДерева = ДеревоБДР.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ СтрокаДерева.ЭтоГруппа Тогда
		////показать  список транзакций по выбранной статье ДДС
		//СформироватьСписокТранзакций(Элемент.ТекущиеДанные.Категория, мМесяцБюджета);
		//
		////показать нужную страницу
		//УправлениеВидимостьюКлиент(2);
		
	Иначе
		
		Если Элемент.Развернут(ВыбраннаяСтрока) Тогда
			Элемент.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элемент.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоБДРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		СтрокаДерева = ДеревоБДР.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ СтрокаДерева.ЭтоГруппа Тогда
		////показать  список транзакций по выбранной статье ДДС
		//СформироватьСписокТранзакций(Элемент.ТекущиеДанные.Категория, мМесяцБюджета);
		//
		////показать нужную страницу
		//УправлениеВидимостьюКлиент(2);
		
	Иначе
		
		Если Элемент.Развернут(ВыбраннаяСтрока) Тогда
			Элемент.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элемент.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПоказыватьПрошлыеМесяцы(Команда)
	Элементы.Таблица1ПоказыватьПрошлыеМесяцы.Пометка = Не Элементы.Таблица1ПоказыватьПрошлыеМесяцы.Пометка;
	ВидимостьКолонокПредыдущихМесяцев();
КонецПроцедуры

//Параметры:
//ИмяНастройки - имя ресурса РС "НастройкаОтображенияБюджета"
//Значение - Ложь или Истина
&НаСервере
Процедура УстановитьНастройку(ИмяНастройки, Значение)
	МенеджерЗаписи = РегистрыСведений.НастройкаОтображенияБюджета.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Бюджет = Объект.Ссылка;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Бюджет = Документы.БюджетГод.ПустаяСсылка() Тогда
		//еще нет записей по этому бюджету
	КонецЕсли;
	МенеджерЗаписи.Бюджет = Объект.Ссылка;
	МенеджерЗаписи[ИмяНастройки] = Значение;
	МенеджерЗаписи.Записать();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПриОткрытииПрошлыеМесяцыПриИзменении(Элемент)
	УстановитьНастройку("СкрыватьПрошлыеМесяцы", НастройкаПриОткрытииПрошлыеМесяцы);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуКэша(Команда)
	ОбновитьТаблицуКэшаСервер();
КонецПроцедуры


Функция ОбновитьТаблицуКэшаСервер()

	//------------------------------------------------
	//получаем дерево с формы
	ДеревоКэшаФорма = ДанныеФормыВЗначение(ДеревоКэша,Тип("ДеревоЗначений"));
	ДеревоКэшаФорма.Строки.Очистить();
	
	РеглВал = ОбщийМодуль1Сервер.ПолучитьРеглВалюту();
	
	//------------------------------------------------
	//заполняем строки в дереве движений кэша по кошелькам
	
	Для Каждого Стр Из Объект.ОстаткиКэша Цикл
		НовСтр = ДеревоКэшаФорма.Строки.Добавить();
		НовСтр.Кошелек = Стр.Кошелек;
		
		НовСтр2 = НовСтр.Строки.Добавить();
		НовСтр2.Кошелек = Перечисления.ВидСуммыКэша.НачОст;
		НовСтр2.План1 = Стр.Сумма;
		
		НовСтр2 = НовСтр.Строки.Добавить();
		НовСтр2.Кошелек = Перечисления.ВидСуммыКэша.Приход;
		НовСтр2 = НовСтр.Строки.Добавить();
		НовСтр2.Кошелек = Перечисления.ВидСуммыКэша.Расход;
		НовСтр2 = НовСтр.Строки.Добавить();
		НовСтр2.Кошелек = Перечисления.ВидСуммыКэша.КонОст;
	КонецЦикла;
	
	
	//------------------------------------------------
	//заполняем движения
	
	//нужно выбрать документы факт+прогноз (проведенные) и сгруппировать их по:
	//дата
	//кошелек
	
	//расход средств
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Дата,
	|	Док.Кошелек КАК Кошелек,
	|	СУММА(ВЫБОР
	|			КОГДА Рег.СуммаРегл = 0
	|				ТОГДА Рег.СуммаПрогнозРегл
	|			ИНАЧЕ Рег.СуммаРегл
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства КАК Рег
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходСредств КАК Док
	|		ПО (Док.Ссылка = Рег.Регистратор)
	|ГДЕ
	|	Рег.Период Между &ДатаДок И &ДатаДок2
	|	И Рег.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Дата,
	|	Док.Кошелек";

	Запрос.УстановитьПараметр("ДатаДок", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаДок2", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		
		Стр = ДеревоКэшаФорма.Строки.НайтиСтроки(Новый Структура("Кошелек", Выборка.Кошелек));
		Если Стр.Количество()>0 Тогда
			
			стр2 = Стр[0].Строки.НайтиСтроки(Новый Структура("Кошелек", Перечисления.ВидСуммыКэша.Расход));
			стр2[0]["План"+Строка(День(Выборка.Дата))] = стр2[0]["План"+Строка(День(Выборка.Дата))] + Выборка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//приход средств
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Дата,
	|	Док.Кошелек КАК Кошелек,
	|	СУММА(ВЫБОР
	|			КОГДА Рег.СуммаРегл = 0
	|				ТОГДА Рег.СуммаПрогнозРегл
	|			ИНАЧЕ Рег.СуммаРегл
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства КАК Рег
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеСредств КАК Док
	|		ПО (Док.Ссылка = Рег.Регистратор)
	|ГДЕ
	|	Рег.Период Между &ДатаДок И &ДатаДок2
	|	И Рег.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Дата,
	|	Док.Кошелек";	

	Запрос.УстановитьПараметр("ДатаДок", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаДок2", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		
		Стр = ДеревоКэшаФорма.Строки.НайтиСтроки(Новый Структура("Кошелек", Выборка.Кошелек));
		Если Стр.Количество()>0 Тогда
			
			стр2 = Стр[0].Строки.НайтиСтроки(Новый Структура("Кошелек", Перечисления.ВидСуммыКэша.Приход));
			стр2[0]["План"+Строка(День(Выборка.Дата))] = стр2[0]["План"+Строка(День(Выборка.Дата))] + Выборка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	//Перемещение расход средств
	
	//берем одну из сумм - прогноз/факт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Дата,
	|	Док.Кошелек КАК Кошелек,
	|	СУММА(ВЫБОР
	|			КОГДА Рег.СуммаРегл = 0
	|				ТОГДА Рег.СуммаПрогнозРегл
	|			ИНАЧЕ Рег.СуммаРегл
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства КАК Рег
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеСредств КАК Док
	|		ПО (Док.Ссылка = Рег.Регистратор)
	|ГДЕ
	|	Рег.Период Между &ДатаДок И &ДатаДок2
	|	И Рег.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Дата,
	|	Док.Кошелек";

	Запрос.УстановитьПараметр("ДатаДок", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаДок2", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		
		Стр = ДеревоКэшаФорма.Строки.НайтиСтроки(Новый Структура("Кошелек", Выборка.Кошелек));
		Если Стр.Количество()>0 Тогда
			
			стр2 = Стр[0].Строки.НайтиСтроки(Новый Структура("Кошелек", Перечисления.ВидСуммыКэша.Расход));
			стр2[0]["План"+Строка(День(Выборка.Дата))] = стр2[0]["План"+Строка(День(Выборка.Дата))] + Выборка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Перемещение приход средств
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Дата,
	|	Док.КошелекПриемник КАК Кошелек,
	|	СУММА(ВЫБОР
	|			КОГДА Рег.СуммаРегл = 0
	|				ТОГДА Рег.СуммаПрогнозРегл
	|			ИНАЧЕ Рег.СуммаРегл
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства КАК Рег
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеСредств КАК Док
	|		ПО (Док.Ссылка = Рег.Регистратор)
	|ГДЕ
	|	Рег.Период Между &ДатаДок И &ДатаДок2
	|	И Рег.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Дата,
	|	Док.КошелекПриемник";	

	Запрос.УстановитьПараметр("ДатаДок", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаДок2", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		
		Стр = ДеревоКэшаФорма.Строки.НайтиСтроки(Новый Структура("Кошелек", Выборка.Кошелек));
		Если Стр.Количество()>0 Тогда
			
			стр2 = Стр[0].Строки.НайтиСтроки(Новый Структура("Кошелек", Перечисления.ВидСуммыКэша.Приход));
			стр2[0]["План"+Строка(День(Выборка.Дата))] = стр2[0]["План"+Строка(День(Выборка.Дата))] + Выборка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	//------------------------------------------------
	//пересчитать остатки, перенести на следующий день
	
	для сч = 1 по 31 Цикл
	
		Для Каждого Стр Из ДеревоКэшаФорма.Строки Цикл
			
			
			стр2 = Стр.Строки.НайтиСтроки(Новый Структура("Кошелек", Перечисления.ВидСуммыКэша.НачОст));
			НачОст = стр2[0]["План"+сч];
			
			стр2 = Стр.Строки.НайтиСтроки(Новый Структура("Кошелек", Перечисления.ВидСуммыКэша.Приход));
			НачОст = НачОст + стр2[0]["План"+сч];
			
			стр2 = Стр.Строки.НайтиСтроки(Новый Структура("Кошелек", Перечисления.ВидСуммыКэша.Расход));
			НачОст = НачОст - стр2[0]["План"+сч];
			
			стр2 = Стр.Строки.НайтиСтроки(Новый Структура("Кошелек", Перечисления.ВидСуммыКэша.КонОст));
			стр2[0]["План"+сч] = НачОст;
			
			Если сч<31 Тогда
				//переносим остаток на следующую дату
				стр2 = Стр.Строки.НайтиСтроки(Новый Структура("Кошелек", Перечисления.ВидСуммыКэша.НачОст));
				стр2[0]["План"+Строка(сч+1)] = НачОст;
			КонецЕсли;
			
			//------------------------------------------------
			//конечные остатки поместить в итоги по кошелькам
			
			Стр["План"+сч] = НачОст; //это конечный остаток
		КонецЦикла;
		
	КонецЦикла;	
	
	
		
	
	
	//------------------------------------------------
	//отправляем обновленное дерево на форму
	ЗначениеВДанныеФормы(ДеревоКэшаФорма, ДеревоКэша);
	
	
КонецФункции

//версия 8.3.8

//настройка ширины колонок

//колонки 1-12 (т.е. месяцы, без итоговой колонки и колонки со статьями)

&НаСервере
Процедура вер838_УстановитьШиринуКолонок1_12НаСервере()
	
	вер838_УстановитьШиринуКолонок1_12_сервер(вер838_ШиринаКолонок1_12);
	
КонецПроцедуры

&НаКлиенте
Процедура вер838_УстановитьШиринуКолонок1_12(Команда)
	вер838_УстановитьШиринуКолонок1_12НаСервере();
КонецПроцедуры

&НаСервере
Процедура вер838_УвелШирКолНаСервере()
	//используется реквизит формы "вер838_ШиринаКолонок1_12". начальное значение, равное 6, устанавливается в ПриОткрытии
	
	вер838_ШиринаКолонок1_12 = вер838_ШиринаКолонок1_12 + 1;
	
	вер838_УстановитьШиринуКолонок1_12_сервер(вер838_ШиринаКолонок1_12);
	
КонецПроцедуры

&НаКлиенте
Процедура вер838_УвелШирКол(Команда)
	вер838_УвелШирКолНаСервере();
КонецПроцедуры

&НаСервере
Процедура вер838_УменьшШирКолНаСервере()
	//используется реквизит формы "вер838_ШиринаКолонок1_12". начальное значение, равное 6, устанавливается в ПриОткрытии
	
	вер838_ШиринаКолонок1_12 = вер838_ШиринаКолонок1_12 - 1;
	Если вер838_ШиринаКолонок1_12 <=4 Тогда
		вер838_ШиринаКолонок1_12 = 4;
		//Возврат;
	КонецЕсли;
	
	вер838_УстановитьШиринуКолонок1_12_сервер(вер838_ШиринаКолонок1_12);
	
КонецПроцедуры

&НаКлиенте
Процедура вер838_УменьшШирКол(Команда)
	вер838_УменьшШирКолНаСервере();
КонецПроцедуры

&НаСервере
Процедура вер838_УстановитьШиринуКолонок1_12_сервер(Ширина)
	Для сч = 1 по 31 Цикл
	
		Элементы.ДеревоКэша.ПодчиненныеЭлементы["ДеревоКэшаПлан"+сч].Ширина = Ширина;
		Элементы.ДеревоКэша.ПодчиненныеЭлементы["ДеревоКэшаФакт"+сч].Ширина = Ширина;
		
	КонецЦикла;	
	//Элементы.НадписьШиринаКолонок1_12.Заголовок = "ширина"+Ширина;
	
	//колонка с итогами
	вер838_УстановитьШиринуКолонок13_сервер(Ширина);
	
	//Элементы.ДеревоКэша.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура вер838_УстановитьШиринуКолонок13_сервер(Ширина)
	//сч = 13;
	//Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч].ПодчиненныеЭлементы["Таблица1План"+сч].Ширина = Ширина;
	//
	//Если Элементы.кнПоказатьФакт.Пометка = ЛОЖЬ Тогда
	//	//факт не показываем
	//	Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч].ПодчиненныеЭлементы["Таблица1Факт"+сч].Ширина = 1;
	//	Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч].ПодчиненныеЭлементы["Таблица1Рез"+сч].Ширина  = 1;
	//Иначе
	//	Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч].ПодчиненныеЭлементы["Таблица1Факт"+сч].Ширина = Ширина+2;
	//	Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч].ПодчиненныеЭлементы["Таблица1Рез"+сч].Ширина  = Ширина-5;
	//КонецЕсли;
	//
	//Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч].Ширина  = Ширина+2;
	//Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч].РастягиватьПоГоризонтали = Ложь;
	//
	
	
КонецПроцедуры



