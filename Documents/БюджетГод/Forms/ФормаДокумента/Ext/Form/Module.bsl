//при открытии любого документа - новый или записанный
//надо заполнить рекв формы ДеревоБДР данными из спр
//Статьи доходов и расходов

//////////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем мТекущийМесяц;







//////////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (НА СЕРВЕРЕ)

//следующие две процедуры работают "ПередЗаписью"


//21 03 14 служебная. вызывается из "СохранитьДеревоБДРвТаблицуДокументаСервер()"
//рекурсивно обходит строки дерева и добавляе запись в набор записей регистра накопления БДР
//Параметры:
//	СтрокиДереваФормы - коллекция строк дерева значений
//	НаборЗаписей - набор записей регистра накопления БДР с отбором по регистратору
//	_год - строка, номер года, например "2012"
//Возвращаемое значение:
//	нет
//
&НаСервере
Процедура СохранитьДеревоБДРвТаблицуДокументаРекурсивноСервер(СтрокиДереваФормы, НаборЗаписей, _год)
	
	Для Каждого Стр Из СтрокиДереваФормы Цикл
		
		Если Стр.ЭтоГруппа Тогда 
			СохранитьДеревоБДРвТаблицуДокументаРекурсивноСервер(Стр.Строки, НаборЗаписей, _год);
		Иначе
			//пропустим строки, в которых Итого - пусто (значит и в других колонках пусто)
			Если Стр.План13 = 0 Тогда
				Продолжить;
			КонецЕсли;

			//цикл по колонкам - месяцам. 13-я колонка не нужна, она не хранится, а вычисляется в дереве
			Для сч = 1 по 12 Цикл
				
				Если Стр["План"+сч] = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				//первое число месяца
				ДатаДвижения = Дата(_год, Строка(сч), "1");
				
				//сразу пишем в регистр накопления БДР
				Запись 				= НаборЗаписей.Добавить();
				Запись.Активность 	= Истина;
				Запись.Период 		= ДатаДвижения;
				Запись.СтатьяДоходовРасходов = Стр.СтатьяДР;
				Запись.СуммаПлан 	= Стр["План"+сч];
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры
        

//21 03 14записывает данные из элемента формы ДеревоБДР в таблицу документа только элементы, без групп
//вызывается из ПослеЗаписи()
//Параметры:
//	нет
//Возвращаемое значение:
//	нет
//
&НаСервере
Процедура СохранитьДеревоБДРвТаблицуДокументаСервер()
	
	//получить объект ДеревоЗначений
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
		
	НаборЗаписей = РегистрыНакопления.БДР.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.Регистратор.Установить(Объект.Ссылка);
	
	//удалим 1-ю и последнюю строки, там Нач ост и Кон ост
	ДеревоБДРФорма.Строки.Удалить(ДеревоБДРФорма.Строки[0]);
	ДеревоБДРФорма.Строки.Удалить(ДеревоБДРФорма.Строки[ДеревоБДРФорма.Строки.Количество()-1]);
	
	_год = СтрЗаменить(Год(Объект.Дата), Символы.НПП, "");
	
	СохранитьДеревоБДРвТаблицуДокументаРекурсивноСервер(ДеревоБДРФорма.Строки, НаборЗаписей, _год);	
	
	НаборЗаписей.Записать();
	
	//07 09 14
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НаборЗаписей = РегистрыСведений.ОпцииБюджета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Бюджет.Установить(Объект.Ссылка);
		
		для каждого стр из ТабОпции цикл
			новстр = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, стр);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
	

КонецПроцедуры


//21 03 14 обработчик команды Обновить факт
&НаСервере
Процедура ОбновитьФактСервер()
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	//заполнить факт 
	//пересчитать итоги по факту
	//пересчитать выполнение плана
	ОбщийМодуль1Сервер.ЗаполнитьФактСервер(ДеревоБДРФорма, Объект.Дата, Объект.Дата);
	//посчитать итоги по группам 
	ОбщийМодуль1Сервер.ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(ДеревоБДРФорма.Строки);
	//пересчет остатков по месяцам
	ОбщийМодуль1Сервер.ПересчитатьОстаткиВДеревеБДРСервер(ДеревоБДРФорма);
	//выполение плана сервер (только верний уровень)
	ОбщийМодуль1Сервер.ПересчитатьВыполнениеПланаСервер(ДеревоБДРФорма.Строки);
	
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
	
КонецПроцедуры	//ОбновитьФактСервер

//21 03 14 добавляет еще один уровень строк в дерево - документы. команда вызывается из контекстного меню дерева.
&НаСервере
Процедура ЗаполнитьДеревоДокументамиСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БДР.СтатьяДоходовРасходов КАК СтатьяДР,
	|	БДР.Регистратор КАК Регистратор,
	|	БДР.Регистратор.Дата КАК ДатаДок,
	|	БДР.СуммаФакт
	|ИЗ
	|	РегистрНакопления.БДР КАК БДР
	|ГДЕ
	|	БДР.СуммаФакт <> 0
	|	И БДР.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ)";

	_год = СтрЗаменить(Год(Объект.Дата), Символы.НПП, "");
	НачалоПериода = Дата(_год, "01", "01");
	КонецПериода = КонецГода(НачалоПериода);
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);

	Результат = Запрос.Выполнить();
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР, Тип("ДеревоЗначений"));
	
	ТЗДок = Результат.Выгрузить();
	ТЗДок.Индексы.Добавить("СтатьяДР");
	
	ЗаполнитьДеревоДокументамиСерверРекурсивно(ДеревоБДРФорма.Строки, ТЗДок);
	
	//вернуть дерево из объекта в форму
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
	
КонецПроцедуры

//21 03 14 добавляет еще один уровень строк в дерево - документы. вызывается из ЗаполнитьДеревоДокументамиСервер()
//Параметры:
//	Строки - коллекция строк дерева
//	ТЗДок - таб значений с документами, проиндексированная по стате ДР
//Возвращаемое значение:
//	нет
//
&НаСервере
Процедура ЗаполнитьДеревоДокументамиСерверРекурсивно(Строки, ТЗДок)
	
	СтрОтбор = Новый Структура("СтатьяДР", Неопределено);
	
	Для каждого Стр Из Строки Цикл
		
		Если Стр.ЭтоГруппа Тогда
			//идем вниз
			ЗаполнитьДеревоДокументамиСерверРекурсивно(Стр.Строки, ТЗДок)
		КонецЕсли;
		
		СтрОтбор.Вставить("СтатьяДР", Стр.СтатьяДР);
		ПоискСтрок = ТЗДок.НайтиСтроки(СтрОтбор);
		Для Каждого Эл Из ПоискСтрок Цикл
			НовСтр 			= Стр.Строки.Добавить();
			НовСтр.СтатьяДР = Эл.Регистратор;
			НовСтр["Факт"+Строка(Месяц(Эл.ДатаДок))] = Эл.СуммаФакт;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНачОстПоДатеСервер()
	Возврат ОбщийМодуль1Сервер.ВернутьОстатокСредствСервер(Дата(СтрЗаменить(Год(Объект.Дата), Символы.НПП, ""),1,1,0,0,0));
КонецФункции

// Выполняет отчет РасшифровкаБюджета
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ОбработатьРасшифровку(Отчет, Результат)
	ОтчетОбъект = ДанныеФормыВЗначение(Отчет, Тип("ОтчетОбъект.РасшифровкаБюджета"));
	ОтчетОбъект.СкомпоноватьРезультат(Результат);
	Возврат Результат;
КонецФункции // ОбработатьРасшифровку()

//CF 2.0
//Обработчик команды
&НаСервере
Процедура ОчиститьНеиспользуемыеДетализацииСервер()
	//прог 25 10 11
	//надо сделать очистку детализаций, чтобы не занимали место
	//если в плане сумма = 0
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	~НачалоЦикла:
	Для Каждого Стр Из Объект.Детализация Цикл
		
		//ПараметрыОтбора = Новый Структура;
		//ПараметрыОтбора.Вставить("СтатьяДР",Стр.СтатьяДР);
		//ПараметрыОтбора.Вставить("План"+Стр.Период,Стр.Сумма); //это не надо, сумма в детализации может отличаться от плана
		НайденнаяСтрока = ДеревоБДРФорма.Строки.Найти(Стр.СтатьяДР,"СтатьяДР",Истина);
		
		Если НайденнаяСтрока = Неопределено Тогда
			//статьи в плане нет, а детализация есть
			//надо удалить детализацию
			Объект.Детализация.Удалить(Объект.Детализация.Индекс(Стр));
			Модифицированность = Истина;
			Перейти ~НачалоЦикла;
			//сообщить("неопределено");
			//Продолжить;
		КонецЕсли;
		
		//если сумма в плане = 0 , то надо удалить детализацию
		Если НайденнаяСтрока["План"+Стр.Период] = 0 Тогда
			Объект.Детализация.Удалить(Объект.Детализация.Индекс(Стр));
			Модифицированность = Истина;
			Перейти ~НачалоЦикла;
			//сообщить("сумма 0");
		КонецЕсли;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

//CF 2.0
//обработчик команды
&НаСервере
Процедура ИсключитьСтатьюСервер(СтатьяДР)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//это новый
		Возврат;
	КонецЕсли;
	
	//ПараметрыФормы.Отбор.Вставить("Бюджет", Объект.Ссылка);
	
	//ПараметрыФормы.Отбор.Вставить("Период", Новый СтандартныйПериод(СтруктураПериод.НачалоПериода,СтруктураПериод.КонецПериода));
	//ПараметрыФормы.Отбор.Вставить("НачалоПериода", СтруктураПериод.НачалоПериода);
	//ПараметрыФормы.Отбор.Вставить("КонецПериода", СтруктураПериод.КонецПериода);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиДоходовРасходов.Ссылка
		|ИЗ
		|	Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
		|ГДЕ
		|	СтатьиДоходовРасходов.Ссылка В ИЕРАРХИИ(&Ссылка)
		|	И СтатьиДоходовРасходов.ЭтоГруппа = ЛОЖЬ";

	Запрос.УстановитьПараметр("Ссылка", СтатьяДР);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ИсключаемыеСтатьи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВариантБюджета.Установить(Объект.Ссылка);		
		НаборЗаписей.Отбор.СтатьяДР.Установить(ВыборкаДетальныеЗаписи.Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ВариантБюджета = Объект.Ссылка;
		НоваяЗапись.СтатьяДР = ВыборкаДетальныеЗаписи.Ссылка;
		НаборЗаписей.Записать();
	КонецЦикла;

	

КонецПроцедуры

//CF 2.0
&НаСервере
Процедура СоздатьНакоплениеСервер(СтатьяДР)

	

КонецПроцедуры 

//CF 2.0
&НаСервере
Процедура СоздатьРасходСервер(СтатьяДР)

	

КонецПроцедуры 

//CF 2.0	
&НаСервере
Процедура СоздатьПоступлениеСервер(СтатьяДР)

	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеСредств КАК Док
		|ГДЕ
		|	Док.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Док.СтатьяДР = &СтатьяДР";

	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СтатьяДР", СтатьяДР);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	СписокДокументов = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//если есть такой документ, то его надо открыть
		//если есть более одного документа, то покажем список с выбором
		СписокДокументов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		//создать  новый
		Док = Документы.ПоступлениеСредств.СоздатьДокумент();
		НовСтр = Док.ДоходыРасходы.Добавить();
		НовСтр.СтатьяДР = СтатьяДР;
		Док.ПолучитьФорму("ФормаДокумента").Открыть();
		
	ИначеЕсли СписокДокументов.Количество() = 1 Тогда
		Док = СписокДокументов.Получить(0);
		Док.ПолучитьФорму("ФормаДокумента").Открыть();
	Иначе
	КонецЕсли;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецПроцедуры 




//////////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (НА СЕРВЕРЕ БЕЗ КОНТЕКСТА)

&НаСервереБезКонтекста
Функция СтатьяДРЭтоГруппаСервер(Статья)
	Возврат Статья.ЭтоГруппа;
КонецФункции

//CF 2.0
&НаСервереБезКонтекста
Функция ПолучитьУчетнуюЗаписьПочтыПоУмолчанию()

	ДоступныеУчетныеЗаписи = ЭлектроннаяПочта.ПолучитьДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены доступные учетные записи электронной почты, обратитесь к администратору системы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Истина);
		Возврат Неопределено;
	КонецЕсли;
	Возврат ДоступныеУчетныеЗаписи[0].Ссылка;
	
КонецФункции // ПолучитьАдресДляЗаметокПоУмолчанию()

//CF 2.0
&НаСервереБезКонтекста
Функция ПолучитьАдресДляЗаметокПоУмолчанию()

	Возврат Константы.EmailДляЗаметок.Получить();	

КонецФункции // ПолучитьАдресДляЗаметокПоУмолчанию()



//////////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (НА КЛИЕНТЕ)

//Пересчитывает остатки в ДеревеБДР, которое находится на форме
//выполняется пересчет конечных остатков по месяцам
//а также пересчитывает итоги
//Параметры:
//	НачальнаяКолонка - число, номер колонки
&НаКлиенте
Процедура ПересчитатьОстаткиВДеревеБДРКлиент(НачальнаяКолонка)
	
	//пересчитаем остатки в дереве БДР
	//надо пройтись только по группам вернего уровня (0)
	СтрокиДерева = ДеревоБДР.ПолучитьЭлементы();
	
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	//получим нач ост из первой колонки дерева
	
	КонечныйОстатокПлан = СтрокиДерева[0]["План"+Строка(НачальнаяКолонка)];
	КонечныйОстатокФакт = СтрокиДерева[0]["Факт"+Строка(НачальнаяКолонка)];
	
	Для сч = НачальнаяКолонка по 12 Цикл
			
		ИмяКолонкиПлан = "План"+Строка(сч);
		ИмяКолонкиФакт = "Факт"+Строка(сч);
		
		//исключим из пересчета первую и последнюю строку, это НачОст и КонОст, нумерация начинается с нуля
		Для сч2 = 1 По СтрокиДерева.Количество()-2 Цикл
			
			Стр=СтрокиДерева[сч2];
			КонечныйОстатокПлан = КонечныйОстатокПлан + (Стр[ИмяКолонкиПлан]*Стр["ПриходРасход"]);
			КонечныйОстатокФакт = КонечныйОстатокФакт + (Стр[ИмяКолонкиФакт]*Стр["ПриходРасход"]);
			
		КонецЦикла;
		
		//в последнюю строку текущей колонки поместим новый конечный остаток
		СтрокиДерева[СтрокиДерева.Количество()-1][ИмяКолонкиПлан] = КонечныйОстатокПлан;
		СтрокиДерева[СтрокиДерева.Количество()-1][ИмяКолонкиФакт] = КонечныйОстатокФакт;
		
		//в первую строку следующей колонки поместим новый начальный остаток (конечный ост тек колонки)
		СтрокиДерева[0]["План"+Строка(сч+1)] = КонечныйОстатокПлан;
		СтрокиДерева[0]["Факт"+Строка(сч+1)] = КонечныйОстатокФакт;
					
	КонецЦикла;
	
	
	//расчет колонок ИТОГО
	
	//сначала конечный остаток равен начальному
	КонечныйОстатокПлан = СтрокиДерева[0]["План1"];   
	КонечныйОстатокФакт = СтрокиДерева[0]["Факт1"];   
	
	СтрокиДерева[0]["План13"] = КонечныйОстатокПлан; 
	СтрокиДерева[0]["Факт13"] = КонечныйОстатокФакт;
	
	//а затем прибавим доходы и отнимем расходы
	
	//исключим из пересчета первую и последнюю строку, это НачОст и КонОст, нумерация начинается с нуля
	Для сч2 = 1 По СтрокиДерева.Количество()-2 Цикл
		
		Стр=СтрокиДерева[сч2];
		КонечныйОстатокПлан = КонечныйОстатокПлан + (Стр["План13"]*Стр["ПриходРасход"]);
		КонечныйОстатокФакт = КонечныйОстатокФакт + (Стр["Факт13"]*Стр["ПриходРасход"]);
		
	КонецЦикла;
	
	//в последнюю строку поместим новый конечный остаток
	СтрокиДерева[СтрокиДерева.Количество()-1]["План13"] = КонечныйОстатокПлан;
	СтрокиДерева[СтрокиДерева.Количество()-1]["Факт13"] = КонечныйОстатокФакт;

КонецПроцедуры		

//Пересчитывает одну строку в колонке Итого в ДеревеБДР
//Параметры:
// ИмяКолонки - Имя измененной колонки, требуется для определения
// в какой итог писать новую сумму - в план или факт
&НаКлиенте
Процедура ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки)
	
	//раздельный расчет сделан специально
	
	Итого = 0;
	Если Найти(ИмяКолонки, "План")>0 Тогда
		//суммируем все колонки
		Для сч = 1 по 12 Цикл
			Итого = Итого + СтрокаДерева["План"+Строка(сч)];
		КонецЦикла;
		//и занесем итог в 13-ю
		СтрокаДерева["План13"] = Итого;
		//пересчитаем итоги по группам в колонке итогов
		ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, "План13");
		
	ИначеЕсли Найти(ИмяКолонки, "Факт")>0 Тогда
		//суммируем все колонки
		Для сч = 1 по 12 Цикл
			Итого = Итого + СтрокаДерева["Факт"+Строка(сч)];
		КонецЦикла;
		//занесем итог в 13-ю
		СтрокаДерева["Факт13"] = Итого;
		//пересчитаем итоги по группам в колонке итогов
		ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, "Факт13");
		
	КонецЕсли;	
	
КонецПроцедуры	

//нужна. Пересчитывает итоги по группам в ДеревеБДР по одной колонке,
//после изменения значения в ячейке
&НаКлиенте
Процедура ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки)
	
	Если Найти(ИмяКолонки, "План")>0 Тогда
		НомерКол = СтрЗаменить(ИмяКолонки, "План","");
	ИначеЕсли Найти(ИмяКолонки, "Факт")>0 Тогда
		НомерКол = СтрЗаменить(ИмяКолонки, "Факт","");
	КонецЕсли;
		
	// Пересчитаем итоги по группам дерева
	//СтрокаДерева - это строка с элементом справочника
	//получим родителя, если он есть - суммируем все значения в дочерних строках
	СтрРод = СтрокаДерева.ПолучитьРодителя(); 
	Пока СтрРод <> Неопределено Цикл
		//получили все дочерние строки
		Строки = СтрРод.ПолучитьЭлементы();
		
		Итого = 0;
		//и по выбранной колонке получим итог
		Для Каждого Стр Из Строки Цикл
			Итого =  Итого + Стр[ИмяКолонки];
		КонецЦикла;
		//запиешм итог в поле родительской строки
		СтрРод[ИмяКолонки] = Итого;
		//для родительской строки попробуем получить родителя и посчитать итог для него
		//в следующей итерации цикла
		СтрРод = СтрРод.ПолучитьРодителя();  
	КонецЦикла;     
	
КонецПроцедуры	
 
//нужна. служебная, выполняет рекурсивный пересчет выполнения плана на клиенте
//по измененной колонке и по итогам
&НаКлиенте
Процедура ПересчитатьВыполнениеПланаОднаКолонкаРекурсивноКлиент(СтрокиДерева, НомерКолонки)
	
	Для Каждого Стр Из СтрокиДерева Цикл
		Для сч = НомерКолонки по 13 Цикл
			Стр["Рез"+сч] = ?(Стр["План"+сч] = 0,0,Стр["Факт"+сч]/Стр["План"+сч]*100);
		КонецЦикла;
		
		ПересчитатьВыполнениеПланаОднаКолонкаРекурсивноКлиент(Стр.ПолучитьЭлементы(), НомерКолонки);
	КонецЦикла;	
	
КонецПроцедуры

//нужна. служебная. выполнить пересчет выполнения плана (на клиенте) по всем подчиненным
//строкам относительно разворачиваемой от кол 1 до Итого
&НаКлиенте
Процедура ПересчитатьВыполнениеПланаКлиент(СтрокиДерева)
	
	Для Каждого Стр Из СтрокиДерева Цикл
		Для сч = 1 по 13 Цикл
			Стр["Рез"+сч] = ?(Стр["План"+сч] = 0,0,Стр["Факт"+сч]/Стр["План"+сч]*100);
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

//CF 2.0
//определяет, по каким месяцам есть обороты факт, а по каким - нет
//и если оборотов нет, то колонки Факт и Рез можно не показывать
//при нажании кнопки ПоказатьФакт
//Возвращает Структуру, есть обороты за месяц - истина, нет оборотов - ложь
//можно сразу использовать значения для метода Видимость()
&НаСервере
Функция ЕстьОборотыПоМесяцам()

	Рез = Новый Структура("_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12");
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	Для Каждого Кол Из ДеревоБДРФорма.Колонки Цикл
		
		ИмяКол = СокрЛП(Кол.Имя);
		Если Найти(НРег(ИмяКол),"факт")>0 Тогда
			Номер = Сред(ИмяКол, 5, СтрДлина(ИмяКол)-4);
			
			//посчитаем Итог по колонке. метод ДеревоБДРФорма.Строки.Итог("факт"+номер) не подходит
			//потому что в остатках есть значения и они посчитаются, а нам это не надо
			ИтогПоКолонке = 0;
			Для Каждого Стр Из ДеревоБДРФорма.Строки Цикл
				
				Если Стр.СтатьяДР = "Нач. остаток" Тогда
					Продолжить;
				ИначеЕсли Стр.СтатьяДР = "Кон. остаток" Тогда
					Продолжить;
				КонецЕсли;
			    ИтогПоКолонке = ИтогПоКолонке + Стр["Факт"+Номер];
			КонецЦикла;
			
			Рез.Вставить("_"+Номер,?(ИтогПоКолонке=0,Ложь, Истина));
		КонецЕсли;
		
	КонецЦикла;

	Возврат Рез;
	
КонецФункции // ЕстьОборотыЗаМесяц()

//нужна. включает / выключает видимость колонок Факт, Рез при 
//изменении флажка ПоказыватьФакт
//05 07 11
//эта процедура будет вызываться из команды ПоказатьФакт
//вместо того, чтобы вызываться из обработчика флажка
//ПоказыватьФакт
&НаКлиенте
Процедура ВидимостьКолонокФактРезКлиент(Видимость = Неопределено)
	
	Если Видимость = Неопределено Тогда //если явно не задана - инвертируем, иначе - просто устанавливаем новую видимость
		//определим видимость первой колонки с фактом и инвертируем
		Видимость = Не Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа1"].ПодчиненныеЭлементы["Таблица1Факт1"].Видимость;
				//прог 16 09 12
		//залипание кнопки Факт
		Элементы.кнПоказатьФакт.Пометка = Видимость;

	КонецЕсли;
	
	//26 09 11
	СтруктураВидимостиКолонокПоМесяцам =  ЕстьОборотыПоМесяцам();
		
	Для сч = 1 по 13 Цикл
		Группа = Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч];
		Группа.Видимость = Истина;
		
		//если оборотов за месяц нет - не показываем факт
		//причем, если Интерактивно = Истина, то значит нажали кнопку ПоказатьФакт
		//надо показать факт
		//а если - Ложь, то это программный вызов из ПриОткрытии
		//показывать факт не надо
		ВидимостьПоМесяцам = Ложь;
		СтруктураВидимостиКолонокПоМесяцам.Свойство("_"+сч,ВидимостьПоМесяцам);
		Группа.ПодчиненныеЭлементы["Таблица1Факт"+сч].Видимость = Видимость И ВидимостьПоМесяцам;
		Группа.ПодчиненныеЭлементы["Таблица1Рез"+сч].Видимость = Видимость И ВидимостьПоМесяцам;
		
	КонецЦикла;
	
	ВидимостьКолонокПредыдущихМесяцев();
	
КонецПроцедуры

//нужна. включает / выключает видимость колонок предыдущих месяцев
&НаКлиенте
Процедура ВидимостьКолонокПредыдущихМесяцев()
	
	//Если мСкрыватьПрошлыеМесяцы Тогда //16 09 12 - поменял условие на Пометка
	Если НЕ Элементы.Таблица1ПоказыватьПрошлыеМесяцы.Пометка Тогда
		Для сч = 1 По мТекущийМесяц - 1 Цикл
			Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч].Видимость = Ложь;
		КонецЦикла;
	Иначе//отобразить
		ВидимостьФакта = Элементы.кнПоказатьФакт.Пометка;
		СтруктураВидимостиКолонокПоМесяцам =  ЕстьОборотыПоМесяцам();
		ВидимостьПоМесяцам = Ложь;
		
		Для сч = 1 По мТекущийМесяц - 1 Цикл
			Группа = Элементы.Таблица1.ПодчиненныеЭлементы["Таблица1Группа"+сч];
			Группа.Видимость = Истина;
			
			СтруктураВидимостиКолонокПоМесяцам.Свойство("_"+сч,ВидимостьПоМесяцам);
			Группа.ПодчиненныеЭлементы["Таблица1Факт"+сч].Видимость = ВидимостьФакта И ВидимостьПоМесяцам;
			Группа.ПодчиненныеЭлементы["Таблица1Рез"+сч].Видимость = ВидимостьФакта И ВидимостьПоМесяцам;
			
		КонецЦикла;

	КонецЕсли;
КонецПроцедуры

//CF 2.0
&НаКлиенте
Процедура СравнениеСтатьиПоПериодам(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючНазначенияИспользования = "СравнениеСтатьиПоПериодам";
	ПараметрыФормы.КлючВарианта = "Основной";
	ПараметрыФормы.Отбор = Новый Структура("Бюджет, СтатьяДР",Объект.Ссылка,Элементы.Таблица1.ТекущиеДанные.СтатьяДР);
	
	ОткрытьФорму("Отчет.СравнениеСтатьиПоПериодам.Форма", 
				ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор());		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
Процедура ОткрытьФормуОтладкиКлиент()
	П = Новый Структура("Ключ", Объект.Ссылка);
    Форма = ПолучитьФорму("Документ.БюджетГод.Форма.ФормаДокументаОтл", П);
    Форма.Открыть();	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуДокОтл(Команда)
	ОткрытьФормуОтладкиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланПоФактуСОчисткой(Команда)
	ОбработчикКомандыЗаполнитьПланПоФактуСОчисткойСервер();
	Модифицированность = Истина;
КонецПроцедуры

//21 03 14 вызывается из команды ЗаполнитьПланПоФактуСОчисткой(Команда)
&НаСервере
Процедура ОбработчикКомандыЗаполнитьПланПоФактуСОчисткойСервер()
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	ОбщийМодуль1Сервер.ОчиститьДеревоБДРПланСервер(ДеревоБДРФорма.Строки,);
	ОбщийМодуль1Сервер.ЗаполнитьПланПоФактуБезОчисткиСервер(ДеревоБДРФорма, НачалоГода(Объект.Дата), КонецГода(Объект.Дата));
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
КонецПроцедуры

//заполняетс плановые данные фактическими, не очищая перед этим план
//выбирается большая сумма из плана или факта
&НаКлиенте
Процедура ЗаполнитьПланПоФактуБезОчистки(Команда)
    ОбработчикКомандыЗаполнитьПланПоФактуБезОчисткиСервер();
	Модифицированность = Истина;
КонецПроцедуры

//21 03 14 вызывается из команды ЗаполнитьПланПоФактуБезОчистки(Команда)
&НаСервере
Процедура ОбработчикКомандыЗаполнитьПланПоФактуБезОчисткиСервер()
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	ОбщийМодуль1Сервер.ЗаполнитьПланПоФактуБезОчисткиСервер(ДеревоБДРФорма, НачалоГода(Объект.Дата), КонецГода(Объект.Дата));
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
КонецПроцедуры


//CF 2.0
&НаКлиенте
Функция ВычислитьПериод(ИмяКолонки)
	
	_год = СтрЗаменить(Год(Объект.Дата), Символы.НПП, "");
	Если Найти(ИмяКолонки,"План")>0 Тогда
		НомерКолонки =СтрЗаменить(ИмяКолонки, "Таблица1План","");
		НачалоПериода = Дата(_год, НомерКолонки, "01");
		КонецПериода = КонецМесяца(НачалоПериода);
	ИначеЕсли Найти(ИмяКолонки,"Факт")>0 Тогда
		НомерКолонки =СтрЗаменить(ИмяКолонки, "Таблица1Факт","");
		НачалоПериода = Дата(_год, НомерКолонки, "01");
		КонецПериода = КонецМесяца(НачалоПериода);
	ИначеЕсли Найти(ИмяКолонки,"Рез")>0 Тогда
		НомерКолонки =СтрЗаменить(ИмяКолонки, "Таблица1Рез","");
		НачалоПериода = Дата(_год, НомерКолонки, "01");
		КонецПериода = КонецМесяца(НачалоПериода);
	Иначе		
		// кнопку Расшифровать нажали находясь не в какой-либо колонке План
		НачалоПериода = НачалоГода(Объект.Дата);
		КонецПериода = КонецГода(НачалоПериода);
	КонецЕсли;
	
	Возврат Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	
КонецФункции

//открывает отчет "Ведомость по статьям ДР" для расшифровки текущей ячейки
&НаКлиенте
Процедура Расшифровка(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючНазначенияИспользования = "РасшифровкаСтатьиБюджета";
	ПараметрыФормы.КлючВарианта = "Основной";
	
	СтруктураПериод = ВычислитьПериод(Элементы.Таблица1.ТекущийЭлемент.Имя);
	
	ПараметрыФормы.Отбор = Новый Структура("Бюджет, СтатьяДР, НачалоПериода, КонецПериода");
	ПараметрыФормы.Отбор.Вставить("Бюджет", Объект.Ссылка);
	ПараметрыФормы.Отбор.Вставить("СтатьяДР", Элементы.Таблица1.ТекущиеДанные.СтатьяДР);
	ПараметрыФормы.Отбор.Вставить("НачалоПериода", СтруктураПериод.НачалоПериода);
	ПараметрыФормы.Отбор.Вставить("КонецПериода", СтруктураПериод.КонецПериода);
	
	ОткрытьФорму("Отчет.РасшифровкаБюджета.Форма", ПараметрыФормы,, Новый УникальныйИдентификатор());

КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ПолучитьНомерКолонкиКлиент(ИмяКолонки)

	Если Найти(ИмяКолонки,"План")>0 Тогда
		НомерКолонки =СтрЗаменить(ИмяКолонки, "Таблица1План","");
	ИначеЕсли Найти(ИмяКолонки,"Факт")>0 Тогда
		НомерКолонки =СтрЗаменить(ИмяКолонки, "Таблица1Факт","");
	ИначеЕсли Найти(ИмяКолонки,"Рез")>0 Тогда
		НомерКолонки =СтрЗаменить(ИмяКолонки, "Таблица1Рез","");
	Иначе
		Возврат 999;
	КонецЕсли;	
	Возврат Число(НомерКолонки);

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДетализацииКлиент(СтатьяДР, Сумма, НомерКолонки)
	
	ПараметрыФормы = Новый Структура("СтатьяДР, Детализация,        Период,       Сумма", 
	                                  СтатьяДР, Объект.Детализация, НомерКолонки, Сумма);
	ТаблицаДетализации = ОткрытьФормуМодально("Документ.БюджетГод.Форма.ФормаДетализации", 
	                                           ПараметрыФормы, ЭтаФорма);
	//теперьв ТаблицаДетализации у нас тип ДанныеФормыКоллекция 
	Если ТаблицаДетализации <> Неопределено Тогда
		
		//сначала удалим все детальные записи
		НайденныеСтроки = Объект.Детализация.НайтиСтроки(Новый Структура("СтатьяДР, Период", СтатьяДР,НомерКолонки));

		Для Каждого Стр из НайденныеСтроки Цикл
			 Объект.Детализация.Удалить(Стр);
		КонецЦикла;
		
		//затем добавим новые детали
		Для Каждого Стр Из ТаблицаДетализации Цикл
			НовСтр 				= Объект.Детализация.Добавить();
			НовСтр.СтатьяДР 	= СтатьяДР;
			НовСтр.Комментарий 	= Стр.Комментарий;
			НовСтр.Сумма 		= Стр.Сумма;
			НовСтр.Период 		= НомерКолонки;
		КонецЦикла;
		
		//чтоб системы выдала запрос на сохранение
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияПлана(Команда)
	
	Если Элементы.Таблица1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Элементы.Таблица1.ТекущийЭлемент.Имя;
	НомерКолонки = ПолучитьНомерКолонкиКлиент(ИмяКолонки);//это будет период
	
	Если НомерКолонки >12 Тогда
		Возврат;
	КонецЕсли;
	
	СтатьяДР = Элементы.Таблица1.ТекущиеДанные.СтатьяДР;
	Сумма = Элементы.Таблица1.ТекущиеДанные["План"+НомерКолонки];
	
	ОткрытьФормуДетализацииКлиент(СтатьяДР, Сумма, НомерКолонки);
	
КонецПроцедуры

//обновляет факт. если например док план открыт а факт поменялся
&НаКлиенте
Процедура ОбновитьФакт(Команда)

	ОбновитьФактСервер(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогПоТекущийМесяц(Команда)
	Если Элементы.Таблица1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Элементы.Таблица1.ТекущийЭлемент.Имя;
	НомерКолонки = ПолучитьНомерКолонкиКлиент(ИмяКолонки);//это будет период
	
	Если НомерКолонки >12 Тогда
		Возврат;
	КонецЕсли;
	
	СтатьяДР = Элементы.Таблица1.ТекущиеДанные.СтатьяДР;
	Сумма = 0;//Элементы.Таблица1.ТекущиеДанные["План"+НомерКолонки];
	
	Если Найти(ИмяКолонки,"План")>0 Тогда
		Для сч = 1 по НомерКолонки Цикл
			Сумма = Сумма+Элементы.Таблица1.ТекущиеДанные["План"+сч];
		КонецЦикла;
	ИначеЕсли Найти(ИмяКолонки,"Факт")>0 Тогда
		Для сч = 1 по НомерКолонки Цикл
			Сумма = Сумма+Элементы.Таблица1.ТекущиеДанные["Факт"+сч];
		КонецЦикла;
		
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	//Сообщение.УстановитьДанные(элементы.Таблица1);
	Индекс = Элементы.Таблица1.ТекущаяСтрока;
	Сообщение.Поле = "Таблица1["+индекс+"][план"+НомерКолонки+"]";
	Если Найти(ИмяКолонки,"План")>0 Тогда
		Сообщение.Текст = "Итог план с начала года: "+строка(Сумма);
	ИначеЕсли Найти(ИмяКолонки,"Факт")>0 Тогда
		Сообщение.Текст = "Итог факт с начала года: "+строка(Сумма);
	КонецЕсли;
	Сообщение.Сообщить();
	
	//СообщениеПользователю.Текст = ТекущиеДанные.Пароль;
	//Поле = "УчетныеЗаписи[%НомерСтроки%].Пароль";
	//Поле = СтрЗаменить(Поле, "%НомерСтроки%", ТекущиеДанные.НомерСтроки - 1);
	//СообщениеПользователю.Поле = Поле;
	
КонецПроцедуры

//переносит движение средств на другой месяц
&НаКлиенте
Процедура ПеренестиНаДругойПериод(Команда)
	//1. сформировать список доступных месяцев (если сейчас май - не надо 
	//показывать месяцы с января по апрель), и не надо показывать тот месяц,
	//откуда переносим
	//2. пользователь выбирает месяц и нажимает ОК
	//прог 25 10 11
	//надо учитывать год документа. если находимся в будущем плане,
	//то надо показывать все доступные месяцы того документа
	
	//проверка строки документа
	Если Элементы.Таблица1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//группы статей не переносим
	Если СтатьяДРЭтоГруппаСервер(элементы.таблица1.ТекущиеДанные.статьядр) Тогда
		Возврат;
	КонецЕсли;
	
	//ПланХХ
	ИмяКолонки = Элементы.Таблица1.ТекущийЭлемент.Имя;
	
	//если нажали Перенести в колонке Факт или другой, отличной от Плана, то ничего не делаем
	Если Найти(элементы.таблица1.ТекущийЭлемент.Имя, "План") = 0 Тогда
		Возврат;
	КонецЕсли;

	//вырезать слово План и оставить только число
	НомерКолонки = ПолучитьНомерКолонкиКлиент(ИмяКолонки);//это будет период
	
	//это итоговая колонка, номер 13, ее не переносим
	Если НомерКолонки >12 Тогда
		Возврат;
	КонецЕсли;
	
	СписокМесяцев = Новый СписокЗначений;
	
	//прог 25 10 11
	//проверка года

	ТекущийГод = Год(ТекущаяДата());
	Если Год(Объект.Дата) > Год(ТекущаяДата()) Тогда
		//это будущий год, надо показать все месяцы года,
		//отличные от того, откуда переносим план
		
		ТекМес = 1;
	ИначеЕсли Год(Объект.Дата) < Год(ТекущаяДата()) Тогда
		//в прошлых годах ничего делать не надо
		Возврат;
	Иначе
		//если это текущий год, то надо указать месяцы, расположенные
		//после текущего, ибо переносить план в прошлое не имеет смысла
		ТекМес = Месяц(ТекущаяДата());
	КонецЕсли;
	
	Для сч=ТекМес По 12 Цикл
		
		Если сч = НомерКолонки Тогда
			Продолжить;
		КонецЕсли;
		
		СписокМесяцев.Добавить(ОбщийМодуль2Клиент.ИмяМесяцаПоНомеру(сч));
		                                   
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокМесяцев",СписокМесяцев);
	Месяц = ОткрытьФормуМодально("Документ.БюджетГод.Форма.ФормаПереноса", ПараметрыФормы, ЭтаФорма);
	Если Месяц = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//сохраним значения из старой колонки
	План = Элементы.таблица1.ТекущиеДанные["План"+НомерКолонки];
	НайденныеСтроки = Объект.Детализация.НайтиСтроки(Новый Структура("СтатьяДР,Период", Элементы.Таблица1.ТекущиеДанные["СтатьяДР"], НомерКолонки));
	
	//очистим данные в колонке из которой переносим
	Элементы.таблица1.ТекущиеДанные["План"+НомерКолонки] = 0;
	//запишем данные в колонку куда переносим
	НомерКолонкиКуда = ОбщийМодуль2Клиент.НомерМесяцаПоИмени(Месяц);
	Элементы.Таблица1.ТекущиеДанные["План"+НомерКолонкиКуда] = План;
	//если есть детализация, надо ее переписать на новый месяц
	Для каждого Стр Из НайденныеСтроки Цикл
		Стр.Период = НомерКолонкиКуда;
	КонецЦикла;
	
	Модифицированность = Истина;
	//прог 25 10 11
	ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(Элементы.таблица1.ТекущиеДанные,"План"+НомерКолонки);
	//старая колонка (откуда перенесли)
	ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(Элементы.таблица1.ТекущиеДанные,"План"+НомерКолонки);
	//новая колонка (куда перенесли)
	ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(Элементы.таблица1.ТекущиеДанные,"План"+НомерКолонкиКуда);
	//остатки
	ПересчитатьОстаткиВДеревеБДРКлиент(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУровеньДокументов(Команда)
	//добавляет в дерево еще один уровень строк с документами движения
	ЗаполнитьДеревоДокументамиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФакт(Команда)
	
	Видимость = НЕ Элементы.кнПоказатьФакт.Пометка;
	Элементы.кнПоказатьФакт.Пометка = Видимость;
	ВидимостьКолонокФактРезКлиент(Видимость);//Включить видимость колонок Факт и %
	
	
	
КонецПроцедуры

//CF 2.0
&НаКлиенте
Процедура ОчиститьНеиспользуемыеДетализации(Команда)
	ОчиститьНеиспользуемыеДетализацииСервер();
КонецПроцедуры

//CF 2.0
&НаКлиенте
Процедура ИсключитьСтатью(Команда)
	Если Модифицированность Тогда
		Предупреждение("Сначала сохраните документ!");
		Возврат;
	КонецЕсли;
	//24 01 14 было
	//СтатьяДР = Элементы.Таблица1.ТекущиеДанные.СтатьяДР;
	//ИсключитьСтатьюСервер(СтатьяДР);
	//стало
	Для Каждого Эл Из Элементы.Таблица1.ВыделенныеСтроки Цикл
		СтатьяДР = ДеревоБДР.НайтиПоИдентификатору(Эл).СтатьяДР;
		ИсключитьСтатьюСервер(СтатьяДР);
	КонецЦикла;
	//конец
	
КонецПроцедуры


//команды конец


&НаСервере
Процедура ЗаполнитьКэшДетализаций()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.Ссылка,
		|	Док.СтатьяДР,
		|	Док.Комментарий,
		|	Док.Сумма,
		|	Док.Период
		|ИЗ
		|	Документ.БюджетГод.Детализация КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	КэшТабДетализации.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр  = КэшТабДетализации.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
	КонецЦикла;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ СЕРВЕР

//если документ уже записан, то в реквизит формы ДеревоБДР
//поместим данные из записанного документа
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//05 09 12
	//заполним кэш детализаций
	ЗаполнитьКэшДетализаций();
	//05 09 12 конец
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
				
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//если открывается существующий документ	
		ПарамОбъект = Объект;
		ПарамНачальныйОстаток = Объект.НачальныйОстаток;
	Иначе
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			//если открывается новый документ, созданный копированием
			ПарамОбъект = Параметры.ЗначениеКопирования;
			ПарамНачальныйОстаток = Параметры.ЗначениеКопирования.НачальныйОстаток;
			Объект.ТолькоПросмотр = Ложь;
		Иначе
			//открывается новый документ
			ПарамОбъект = Объект;
			ПарамНачальныйОстаток = 0;
		КонецЕсли;	
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ДеревоБДРФорма, Объект, НачальныйОстатокПлан, НачальныйОстатокФакт",
	ДеревоБДРФорма, ПарамОбъект, ПарамНачальныйОстаток, ПарамНачальныйОстаток);
	
	ОбщийМодуль1Сервер.ЗаполнитьДеревоИзСправочникаСервер(СтруктураПараметров);
	
	//вернем дерево на клиента
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
	
	//07 09 14
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НаборЗаписей = РегистрыСведений.ОпцииБюджета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Бюджет.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		для каждого стр из НаборЗаписей цикл
			новстр = ТабОпции.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, стр);
		КонецЦикла;
	КонецЕсли;

		
КонецПроцедуры
 
//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ КЛИЕНТ

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//проверка, чтобы не записать 2 и более рабочих бюджета
	Отказ = УжеЕстьРабочийБюджет();
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не сохранен по причине: уже есть рабочий бюджет в этом периоде!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УжеЕстьРабочийБюджет()

	Если Объект.ВидБюджета <> Перечисления.ВидыБюджетов.Рабочий Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.БюджетГод КАК Док
		|ГДЕ
		|	Док.ВидБюджета = &ВидБюджета
		|	И Док.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И Док.Ссылка <> &Ссылка";

	Запрос.УстановитьПараметр("ВидБюджета", Перечисления.ВидыБюджетов.Рабочий);
	Запрос.УстановитьПараметр("НачПериода", НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонПериода", КонецГода(Объект.Дата));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущийМесяц = Месяц(ТекущаяДата());
	
	мДетализацияМодифицирована = Ложь;
	
	УправлениеДоступностьюКлиент();
	
	//16 09 12
	//чтение настроек видимости из РС "НастройкаОтображенияБюджета"
	СтруктураНастроек = ПолучитьНастройкиОтображения();
	//детализация
	НастройкаПриОткрытииДетализация = СтруктураНастроек.ПоказыватьДетализацию;
	Элементы.Группа2.Видимость = НастройкаПриОткрытииДетализация;
	Элементы.ТабДетализации.Видимость = НастройкаПриОткрытииДетализация;
	Элементы.ФормаПоказыватьДетализацию.Пометка = НастройкаПриОткрытииДетализация;
	//прошлое. !!! порядок получения свойств СкрыватьПрошлыеМесяцы и ПоказыватьФакт менять нельзя!
	//мСкрыватьПрошлыеМесяцы = Объект.СкрыватьПрошлыеМесяцы;
	НастройкаПриОткрытииПрошлыеМесяцы = СтруктураНастроек.СкрыватьПрошлыеМесяцы;
	Элементы.Таблица1ПоказыватьПрошлыеМесяцы.Пометка = НЕ НастройкаПриОткрытииПрошлыеМесяцы;
	//мСкрыватьПрошлыеМесяцы = НастройкаПриОткрытииПрошлыеМесяцы;
	//факт
	//16 09 12 перемещено ниже по этой процедуре
	//05 07 11 скроем колонки Факт и % (для их отображения есть кнопка  Показать факт)
	//ВидимостьКолонокФактРезКлиент(Ложь);
	НастройкаПриОткрытииФакт = СтруктураНастроек.ПоказыватьФакт;
	Элементы.кнПоказатьФакт.Пометка = НастройкаПриОткрытииФакт;
	ВидимостьКолонокФактРезКлиент(НастройкаПриОткрытииФакт);
    
	//16 09 12 конец
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиОтображения()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаОтображенияБюджета.ПоказыватьДетализацию,
		|	НастройкаОтображенияБюджета.ПоказыватьФакт,
		|	НастройкаОтображенияБюджета.СкрыватьПрошлыеМесяцы
		|ИЗ
		|	РегистрСведений.НастройкаОтображенияБюджета КАК НастройкаОтображенияБюджета
		|ГДЕ
		|	НастройкаОтображенияБюджета.Бюджет = &Бюджет";

	Запрос.УстановитьПараметр("Бюджет", Объект.Ссылка);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	СтруктураНастроек = Новый Структура;
	Если Выборка.Следующий() Тогда
		СтруктураНастроек.Вставить("ПоказыватьДетализацию",Выборка.ПоказыватьДетализацию);
		СтруктураНастроек.Вставить("ПоказыватьФакт",Выборка.ПоказыватьФакт);
		СтруктураНастроек.Вставить("СкрыватьПрошлыеМесяцы",Выборка.СкрыватьПрошлыеМесяцы);
	Иначе
		СтруктураНастроек.Вставить("ПоказыватьДетализацию",Ложь);
		СтруктураНастроек.Вставить("ПоказыватьФакт",Ложь);
		СтруктураНастроек.Вставить("СкрыватьПрошлыеМесяцы",Ложь);
	КонецЕсли;

	Возврат СтруктураНастроек;
	
КонецФункции


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СохранитьДеревоБДРвТаблицуДокументаСервер();
	
	Модифицированность = Ложь;
	
	Оповестить("ИзмененБюджет");
	
	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ШАПКИ

&НаКлиенте
Процедура НачальныйОстатокПриИзменении(Элемент)
	СтрокиДерева = ДеревоБДР.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не заполнен!");
		Возврат;
	КонецЕсли;
	//установим начальный остаток в колонку План1 строки 0
	СтрокиДерева.Получить(0)["План1"] = Объект.НачальныйОстаток;
	ПересчитатьОстаткиВДеревеБДРКлиент(1); //с первой колонки
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоEMAIL(Команда)
	
	//пока не доделано
	
	возврат;
	
	
	//отправка непосредственно из заметки
	Адрес = ПолучитьАдресДляЗаметокПоУмолчанию();
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Предупреждение("Не указан адрес для заметок по умолчанию!",60);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись,Кому,Вложения,УдалятьФайлыПослеОтправки,Тема,Тело,ТипТекста");
	ПараметрыФормы.УчетнаяЗапись = Неопределено;
	ПараметрыФормы.Кому = Адрес;
	ПараметрыФормы.Вложения = Неопределено;
	ПараметрыФормы.УдалятьФайлыПослеОтправки = Неопределено;
	ПараметрыФормы.Тема = "Бюджет на "+Строка(Объект.Дата)+", наименование: "+СокрЛП(Объект.Наименование);
	
	//это надо делать на сервере
	Если ДеревоБДр.Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы.ТипТекста = "HTML";
	
	Тело = "<html><head>"+сокрлп(Объект.Тема)+"</head><body>";
	
	Тело = Тело + "<br>";
	Тело = Тело + "Бюджет доходов и расходов на "+Строка(Объект.Дата)+", наименование: "+СокрЛП(Объект.Наименование);
	Тело = Тело + "<br>";
	
	//добавим таблицу
	
	Табл = "<table border=1>";
	Табл = Табл + "<tr>";
	Табл = Табл + "<td>СтатьяДР</td>";
	Табл = Табл + "<td>План1</td>";
	Табл = Табл + "<td>Факт1</td>";
	Табл = Табл + "<td>Рез1</td>";
	Табл = Табл + "</tr>";
	
	//это надо делать на сервере
	Для Каждого Стр Из ДеревоБДр.Строки Цикл
		
		Табл = Табл + "<tr>";
		Табл = Табл + "<td>"+Стр.СтатьяДР+"</td>";
		Табл = Табл + "<td align=right>"+Стр.План1+"</td>";
		Табл = Табл + "<td align=right>"+Стр.Факт1+"</td>";
		Табл = Табл + "<td align=right>"+Стр.Рез1+"</td>";
		Табл = Табл + "</tr>";
		
	КонецЦикла;
	
	Табл = Табл + "</table>";
	
	Тело = Тело + Табл;
	
	Тело = Тело + "</body></html>";
		
		
	ПараметрыФормы.Тело = Тело;
	
	УчетнаяЗапись = ПолучитьУчетнуюЗаписьПочтыПоУмолчанию();
	Если УчетнаяЗапись <> Неопределено Тогда
		Рез = ЭлектроннаяПочта.ОтправитьСообщение(УчетнаяЗапись,ПараметрыФормы);
	КонецЕсли;
	
	Если Рез <> Неопределено Тогда
		Предупреждение("Сообщение успешно отправлено!",60);
	Иначе
		Предупреждение("Не удалось отправить сообщение!",60);
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Таблица1

//запретим редактировать значения в строках с группами статей
&НаКлиенте
Процедура Таблица1ПередНачаломИзменения(Элемент, Отказ)
	//процент выполнения не редактируем
	Если Найти(Элемент.ТекущийЭлемент.Имя,"Рез")>0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	//итоги не редактируем
	Если (Найти(Элемент.ТекущийЭлемент.Имя,"План13")>0) ИЛИ (Найти(Элемент.ТекущийЭлемент.Имя,"Факт13")>0) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Элемент.ТекущиеДанные.СтатьяДР) = Тип("Строка") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//а если все таки можно редактировать ячейку
	//то сначала запомним число, которое в ней было
	//для того, чтобы выдать предупреждение, если к
	//этой ячейке введена детализация. покажем юзеру
	//новую сумму в модальном окне детализации и по-
	ИмяКолонки=СтрЗаменить(Элемент.Текущийэлемент.Имя, "Таблица1","");
	
	Если ИспользоватьНедельноеПланирование() Тогда
		Отказ = Истина;
		Рез = ОткрытьФормуВводПоНеделям(Неопределено);
		Если Рез <> Неопределено тогда
			НомерКолонки = ПолучитьНомерКолонкиКлиент(Элемент.ТекущийЭлемент.Имя);
			Элемент.ТекущиеДанные["План"+НомерКолонки] = Рез;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ИспользоватьНедельноеПланирование()

	Возврат Объект.НедельноеПланирование;	

КонецФункции // ИспользоватьНедельноеПланирование()


&НаКлиенте
Процедура Таблица1ПриИзменении(Элемент)
	
	//в этой строке произошло изменение
	СтрокаДерева = Элемент.ТекущиеДанные;
	
	//имя колонки выглядит как Таблица1План4, Элемент.имя = "Таблица1"
	ИмяКолонки = СтрЗаменить(Элемент.ТекущийЭлемент.Имя,Элемент.имя,"");
	
	Если Найти(ИмяКолонки,"План")>0 Тогда
		НомерКолонки = Число(СтрЗаменить(ИмяКолонки,"План",""));
	ИначеЕсли Найти(ИмяКолонки,"Факт")>0 Тогда
		НомерКолонки = Число(СтрЗаменить(ИмяКолонки,"Факт",""));
	Иначе
		Возврат;
	КонецЕсли;
	
	//изменилась одна ячейка
	//надо изменить 
	//1. итог план/факт по этой строке
	//2. итоги по группам в этой колонке
	//3. итоги по группам в итогах  - выполняется в пункте 1
	//4. остатки
	//5. выполнение плана - по этой колонке, по колонке итогов, по остаткам
	
	//1. итог план/факт по этой строке
	ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки);
		
	//2. Пересчитаем итоги для вышестоящих элементов (групп) в одной колонке 
	ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(СтрокаДерева, ИмяКолонки);
	
	//3. пропускаем - выполнено в п.1
	
	//4. пересчитаем остатки по месяцам в дереве БДР (на клиенте) начиная с измененной колонки
	ПересчитатьОстаткиВДеревеБДРКлиент(НомерКолонки);
	
	//пересчитаем выполнение плана
	//выполнение плана по всему дереву пересчитывается очень долго, поэтому надо его оптимизировать
	//как вариант, надо пересчитывать выполнение при совпадении условий
	// поменяли колонку План и есть данные в колонке Факт ИЛИ поменяли колонку Факт и есть данные в колонке План
	// надо пересчитать план для родительских строк дерева только по этой колонке
	// потом надо пересчитать выполнение плана по всем остаткам от тек месяца и до конца
	// и последнее - пересчитать итоги
	СтрокиДерева = ДеревоБДР.ПолучитьЭлементы();
	
	//5. пересчет выполнения плана в тек колонке и в кол Итого
	ПересчитатьВыполнениеПланаОднаКолонкаРекурсивноКлиент(СтрокиДерева, НомерКолонки);
	
	Модифицированность = Истина;
		
КонецПроцедуры

//выполнить пересчет выполнения плана (на клиенте) по всем подчиненным
//строкам относительно разворачиваемой от кол 1 до Итого
&НаКлиенте
Процедура Таблица1ПередРазворачиванием(Элемент, Строка, Отказ)
	ПересчитатьВыполнениеПланаКлиент(Элемент.ДанныеСтроки(Строка).ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

//если редактируем факт, то сбросим флаг модифицированности формы
//потому что факт из дерева никуда не сохраняется
&НаКлиенте
Процедура Таблица1ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Вставить содержимое обработчика.
	Если Найти ( Элемент.ТекущийЭлемент.Имя, "Факт" ) > 0 Тогда
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПросмотрПриИзменении(Элемент)
	УправлениеДоступностьюКлиент();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюКлиент()
	//29 12 11
	Элементы.Таблица1.ТолькоПросмотр 		= Объект.ТолькоПросмотр;
	Элементы.Наименование.ТолькоПросмотр 	= Объект.ТолькоПросмотр;
	Элементы.Дата.ТолькоПросмотр 			= Объект.ТолькоПросмотр;
	Элементы.НачальныйОстаток.ТолькоПросмотр = Объект.ТолькоПросмотр;
	Элементы.кнПланВФактБезОчистки.Доступность = НЕ Объект.ТолькоПросмотр;
	Элементы.кнПланВФактСОчисткой.Доступность = НЕ Объект.ТолькоПросмотр;
	Элементы.ОчиститьНеиспользуемыеДетализации.Доступность = НЕ Объект.ТолькоПросмотр;
	Элементы.Комментарий.ТолькоПросмотр = Объект.ТолькоПросмотр;

КонецПроцедуры

&НаКлиенте
Процедура Таблица1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаДерева = ДеревоБДР.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ СтрокаДерева.ЭтоГруппа Тогда
		////показать  список транзакций по выбранной статье ДДС
		//СформироватьСписокТранзакций(Элемент.ТекущиеДанные.Категория, мМесяцБюджета);
		//
		////показать нужную страницу
		//УправлениеВидимостьюКлиент(2);
		
	Иначе
		
		Если Элемент.Развернут(ВыбраннаяСтрока) Тогда
			Элемент.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элемент.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДетализациюСервер(Период=1, СтатьяДР=Неопределено, ПарамСуммаДетал=0)
	ТабДетализации.Очистить();
	МассивСтрок = КэшТабДетализации.НайтиСтроки(Новый Структура("Период,СтатьяДР",Период,СтатьяДР));
	Для каждого Эл Из МассивСтрок Цикл
		НовСтр = ТабДетализации.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Эл);
	КонецЦикла;
	ПарамСуммаДетал = ТабДетализации.Итог("Сумма");
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ПриАктивизацииЯчейки(Элемент)
	
	//если кнопка не нажата, то не будем насиловать систему заполнением невидимой таблицы
	Если НЕ Элементы.ФормаПоказыватьДетализацию.Пометка Тогда
		Возврат;
	КонецЕсли;
	//иногда бывает и так, например после отжатия кнопки Прошлые месяцы
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДетализации = 0;
	
	Период = 0;
	Если Найти(Элемент.ТекущийЭлемент.Имя, "План")>0 Тогда
		Период = Число(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "Таблица1План",""));
	ИначеЕсли Найти(Элемент.ТекущийЭлемент.Имя, "Факт")>0 Тогда
		Период = Число(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "Таблица1Факт",""));		
	ИначеЕсли Найти(Элемент.ТекущийЭлемент.Имя, "Рез")>0 Тогда
		Период = Число(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "Таблица1Рез",""));		
	КонецЕсли;
	ПоказатьДетализациюСервер(Период, Элемент.ТекущиеДанные.СтатьяДР, СуммаДетализации);
  
КонецПроцедуры

&НаКлиенте
Процедура ТабДетализацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьКэшДетализации();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКэшДетализации()
	ИмяКолонки = Элементы.Таблица1.ТекущийЭлемент.Имя;
	ПериодДетализации=ПолучитьНомерКолонкиКлиент(ИмяКолонки);		
	Если ПериодДетализации < 13 Тогда
		//запишем изменения перед отображением новых данных
		//сначала удалим все детальные записи
		ПараметрыОтбора = Новый Структура("СтатьяДР, Период", Элементы.Таблица1.ТекущиеДанные.СтатьяДР, ПериодДетализации);
		НайденныеСтроки = Объект.Детализация.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Стр из НайденныеСтроки Цикл
			 Объект.Детализация.Удалить(Стр);
		КонецЦикла;
		//а еще надо удалить эти строки из кэша детализаций
		НайденныеСтроки = КэшТабДетализации.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Стр из НайденныеСтроки Цикл
			 КэшТабДетализации.Удалить(Стр);
		КонецЦикла;
		
		//затем добавим новые детали
		
		СуммаДетализации = 0;
		Для Каждого Стр Из ТабДетализации Цикл
			НовСтр 				= Объект.Детализация.Добавить();
			НовСтр.СтатьяДР 	= Элементы.Таблица1.ТекущиеДанные.СтатьяДР;
			НовСтр.Комментарий 	= Стр.Комментарий;
			НовСтр.Сумма 		= Стр.Сумма;
			НовСтр.Период 		= ПериодДетализации;
			
			//добавим в кэш-таблицу детализаций обновленные данные
			//так надо , потому что вызывать процедуру ЗаполнитьКэшДетализаций
			//смысла нет - документ еще не записан
			НовСтр 				= КэшТабДетализации.Добавить();
			НовСтр.СтатьяДР 	= Элементы.Таблица1.ТекущиеДанные.СтатьяДР;
			НовСтр.Комментарий 	= Стр.Комментарий;
			НовСтр.Сумма 		= Стр.Сумма;
			НовСтр.Период 		= ПериодДетализации;
            СуммаДетализации = СуммаДетализации+Стр.Сумма;
		КонецЦикла;
		
		//чтоб системы выдала запрос на сохранение
		Модифицированность = Истина;
		
				
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДетализацииПослеУдаления(Элемент)
	ОбновитьКэшДетализации();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьДетализацию(Команда)
	Если Элементы.ТабДетализации.Видимость Тогда
		Элементы.Группа2.Видимость = Ложь;
		Элементы.ТабДетализации.Видимость = Ложь;
		Элементы.ФормаПоказыватьДетализацию.Пометка = Ложь;
	Иначе
		Элементы.Группа2.Видимость = Истина;
		Элементы.ТабДетализации.Видимость = Истина;
		Элементы.ФормаПоказыватьДетализацию.Пометка = Истина;
	КонецЕсли;	
КонецПроцедуры

//Параметры:
//ИмяНастройки - имя ресурса РС "НастройкаОтображенияБюджета"
//Значение - Ложь или Истина
&НаСервере
Процедура УстановитьНастройку(ИмяНастройки, Значение)
	МенеджерЗаписи = РегистрыСведений.НастройкаОтображенияБюджета.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Бюджет = Объект.Ссылка;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Бюджет = Документы.БюджетГод.ПустаяСсылка() Тогда
		//еще нет записей по этому бюджету
	КонецЕсли;
	МенеджерЗаписи.Бюджет = Объект.Ссылка;
	МенеджерЗаписи[ИмяНастройки] = Значение;
	МенеджерЗаписи.Записать();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПриОткрытииДетализацияПриИзменении(Элемент)
	УстановитьНастройку("ПоказыватьДетализацию", НастройкаПриОткрытииДетализация);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПриОткрытииФактПриИзменении(Элемент)
	УстановитьНастройку("ПоказыватьФакт", НастройкаПриОткрытииФакт);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПриОткрытииПрошлыеМесяцыПриИзменении(Элемент)
	УстановитьНастройку("СкрыватьПрошлыеМесяцы", НастройкаПриОткрытииПрошлыеМесяцы);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПрошлыеМесяцы(Команда)
	Элементы.Таблица1ПоказыватьПрошлыеМесяцы.Пометка = Не Элементы.Таблица1ПоказыватьПрошлыеМесяцы.Пометка;
	ВидимостьКолонокПредыдущихМесяцев();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПрогноз(Команда)
	//09 12 12
	//надо пересчитать бюджет с учетом прогнозных движений
	ТекстВопроса = "Добавить данные в план из документов с типом Прогноз?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 60);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПрогнозСервер();
	ВидимостьКолонокФактРезКлиент(Истина);
КонецПроцедуры

&НаСервере
Процедура ПоказатьПрогнозСервер()
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	//заполнить факт 
	//пересчитать итоги по факту
	//пересчитать выполнение плана
	//ОбщийМодуль1Сервер.ЗаполнитьФактСервер(ДеревоБДРФорма, Объект.Дата, Объект.Дата);
	ОбщийМодуль1Сервер.ЗаполнитьФактСПрогнозомСервер(ДеревоБДРФорма, Объект.Дата, Объект.Дата);
	//посчитать итоги по группам 
	ОбщийМодуль1Сервер.ПересчитатьИтогиПоГруппамВДеревеБДРВнизСерверРекурсивно2(ДеревоБДРФорма.Строки);
	//пересчет остатков по месяцам
	ОбщийМодуль1Сервер.ПересчитатьОстаткиВДеревеБДРСервер(ДеревоБДРФорма);
	//выполение плана сервер (только верний уровень)
	ОбщийМодуль1Сервер.ПересчитатьВыполнениеПланаСервер(ДеревоБДРФорма.Строки);
	
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
	
КонецПроцедуры	//ОбновитьФактСервер

&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	СтатьяДР = Элементы.Таблица1.ТекущиеДанные.СтатьяДР;
	ВидДок = ВыполнитьОперациюСервер(СтатьяДР);
	
	ИмяКолонки = СтрЗаменить(Элементы.Таблица1.ТекущийЭлемент.Имя, "Таблица1","");
	ИмяКолонки = СтрЗаменить(ИмяКолонки,"Факт","План");
	ИмяКолонки = СтрЗаменить(ИмяКолонки,"Рез","План");
	
	Если ВидДок = "Доход" Тогда
		Форма = ПолучитьФорму("Документ.ПоступлениеСредств.Форма.ФормаДокумента");
		Форма.Объект.СтатьяДР  = СтатьяДР;
		Форма.Объект.Сумма = Элементы.Таблица1.ТекущиеДанные[ИмяКолонки]; 
	Иначе
		Форма = ПолучитьФорму("Документ.РасходСредств.Форма.ФормаДокумента");		
		//Форма.Объект.СтатьяДР = СтатьяДР;
		Форма.Объект.СтатьяДР = СтатьяДР;
		Форма.Объект.Сумма = Элементы.Таблица1.ТекущиеДанные[ИмяКолонки];
	КонецЕсли;
	
	ДатаДок = ВычислитьПериод(Элементы.Таблица1.ТекущийЭлемент.Имя).НачалоПериода;
	//если ДатаДок находится в текущем месяце, то ставим текущую дату
	//иначе - ДатаДок, потому что это скорее всего прогнозирование (будущая операция)
	Форма.Объект.Дата = ?(Месяц(ДатаДок)=Месяц(ТекущаяДата()), ТекущаяДата(), ДатаДок);
	
	
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Функция ВыполнитьОперациюСервер(СтатьяДР)
	//Сначала определить вид документа
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СтатьиДоходовРасходов.Ссылка В ИЕРАРХИИ (&Доходы)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Доход,
		|	ВЫБОР
		|		КОГДА СтатьиДоходовРасходов.Ссылка В ИЕРАРХИИ (&Расходы)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Расход
		|ИЗ
		|	Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
		|ГДЕ
		|	СтатьиДоходовРасходов.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Доходы", Справочники.СтатьиДоходовРасходов.Доходы);
	Запрос.УстановитьПараметр("Расходы", Справочники.СтатьиДоходовРасходов.Расходы);

	Запрос.УстановитьПараметр("Ссылка", СтатьяДР);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Доход = 1 Тогда
			ВидДок = "Доход";
		Иначе
			ВидДок = "Расход";
		КонецЕсли;
		Возврат ВидДок;
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДоКонцаГода(Команда)
	//заполняет сумму из текущей колонки до конца года
	
	Если Элементы.Таблица1.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ТекКол = Элементы.Таблица1.ТекущийЭлемент.Имя;
	Если Найти(ТекКол, "План")=0 Тогда
		Возврат;
	КонецЕсли;
	
	НачКол = число(СтрЗаменить(ТекКол, "Таблица1План", ""));
	Если НачКол = 12 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = "План"+Строка(НачКол);
	
	Для сч = НачКол+1 По 12 Цикл
		
		Элементы.Таблица1.ТекущиеДанные["План"+Строка(сч)]=Элементы.Таблица1.ТекущиеДанные[ИмяКолонки];
		
	КонецЦикла;
	
	ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(Элементы.Таблица1.ТекущиеДанные, ИмяКолонки);

	Для сч = НачКол+1 По 12 Цикл
		
		ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(Элементы.Таблица1.ТекущиеДанные, "План"+строка(сч));
		
	КонецЦикла;
	
	ПересчитатьОстаткиВДеревеБДРКлиент(НачКол);
	
	СтрокиДерева = ДеревоБДР.ПолучитьЭлементы();
	
	Если Элементы.кнПоказатьФакт.Пометка Тогда 
		Для сч = НачКол+1 По 12 Цикл
			
			ПересчитатьВыполнениеПланаОднаКолонкаРекурсивноКлиент(СтрокиДерева, сч);
			
		КонецЦикла;
	КонецЕсли;	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуВводПоНеделям(Команда)
	Если Элементы.Таблица1.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	Период = ПолучитьНомерКолонкиКлиент(Элементы.Таблица1.ТекущийЭлемент.Имя);
	Если Период < 1 ИЛИ Период > 12 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Форма =ПолучитьФорму("Документ.БюджетГод.Форма.ФормаВводПоНеделям");
	Форма.Дата 			= Объект.Дата;
	Форма.Бюджет 		= Объект.Ссылка;
	Форма.СтатьяДР 		= Элементы.Таблица1.ТекущиеДанные.СтатьяДР;
	Форма.НомерМесяца 	= Период;
	
	Возврат Форма.ОткрытьМодально();
	
КонецФункции

&НаКлиенте
Процедура ОчиститьПланЗаПериод(Команда)
	ПеременнаяТипаСтандартныйПериод = Новый СтандартныйПериод;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ПеременнаяТипаСтандартныйПериод;
	Если Диалог.Редактировать() Тогда 
	    ПеременнаяТипаСтандартныйПериод = Диалог.Период;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПеременнаяТипаСтандартныйПериод.ДатаНачала) Тогда
		Нач = Число(Формат(ПеременнаяТипаСтандартныйПериод.ДатаНачала,"ДФ=ММ"));
	Иначе
		Нач = 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПеременнаяТипаСтандартныйПериод.ДатаОкончания) Тогда
		Кон = Число(Формат(ПеременнаяТипаСтандартныйПериод.ДатаОкончания,"ДФ=ММ"));
	Иначе
		Кон = 12;
	КонецЕсли;
	
	ОбщийМодуль2Клиент.ОчиститьДеревоБДРПланРекурсивноКлиент(ДеревоБДР.ПолучитьЭлементы(), Нач, Кон);

	ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиентРек(ДеревоБДР.ПолучитьЭлементы(), "План"+Нач);
	
	ПересчитатьОстаткиВДеревеБДРКлиент(1);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиентРек(СтрокаД, ИмяНачКол)
	
	Для каждого Стр Из СтрокаД Цикл
		
		ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(Стр, ИмяНачКол);
		
		ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиентРек(Стр.ПолучитьЭлементы(), ИмяНачКол);
		
	КонецЦикла;
	
КонецПроцедуры

//выгрузка в Excel
&НаКлиенте
Функция ВыгрузкаВExcelРекурсивно(СтрокиДерева, Лист, НачСтрока)
	
	Для Каждого Стр Из СтрокиДерева Цикл
		
		НачСтрокаГруппы = Неопределено;
		
		Лист.Cells(НачСтрока,1).value = Строка(Стр.СтатьяДР);
		
		Область = Лист.Range(Лист.Cells(НачСтрока,1),Лист.Cells(НачСтрока, (13*3)+1));
		
		Если Стр.ЭтоГруппа Тогда
			Область.font.bold = true;
			ЗакраситьОбласть(Область);
			НачСтрокаГруппы = НачСтрока;
		Иначе	
			Область.font.bold = false;
		КонецЕсли;	
		
		
		счМ = 2;
		Для сч = 1 по 13 Цикл
			
			Если НЕ Стр.ЭтоГруппа ИЛИ (Стр.СтатьяДР = "Нач. остаток" ИЛИ Стр.СтатьяДР = "Кон. остаток") Тогда
				Лист.Cells(НачСтрока,счМ).value = Стр["План"+Строка(сч)];
				Лист.Cells(НачСтрока,счМ+1).value = Стр["Факт"+Строка(сч)];
				//Лист.Cells(НачСтрока,счМ+2).value = Стр["Рез"+Строка(сч)];
				Лист.Cells(НачСтрока,счМ+2).FormulaR1C1="=IF(RC[-2]=0,0,RC[-1]/RC[-2])";
				Лист.Cells(НачСтрока,счМ+2).Style = "Percent";
			КонецЕсли;	
			
			счМ = счМ+3;
			
		КонецЦикла;
		
		НачСтрока=НачСтрока+1;
		
		ВыгрузкаВExcelРекурсивно(Стр.ПолучитьЭлементы(), Лист, НачСтрока);
		
		////после вывода детальных строк мы знаем их количество и может сделать промежуточный итог
		Если Стр.ЭтоГруппа И НЕ (Стр.СтатьяДР = "Нач. остаток" ИЛИ Стр.СтатьяДР = "Кон. остаток") Тогда
			счМ = 2;
			Для сч = 1 по 13 Цикл
				//Функция ПРОМЕЖУТОЧНЫЕ.ИТОГИ, первый параметр - 9 - это код функции СУММА
				//пример вставки формулы
				//ActiveCell.FormulaR1C1 = "=SUBTOTAL(9,R[1]C:R[415]C)"
				Формула = "=SUBTOTAL(9,R[1]C:R["+Строка(НачСтрока-1-НачСтрокаГруппы)+"]C)";
				Лист.Cells(НачСтрокаГруппы,счМ).FormulaR1C1 = Формула;
				Лист.Cells(НачСтрокаГруппы,счМ+1).FormulaR1C1=Формула;
				//Лист.Cells(НачСтрокаГруппы,счМ+2).formula=?(Лист.Cells(НачСтрокаГруппы,счМ).value=0,0,Лист.Cells(НачСтрокаГруппы,счМ+1).value/Лист.Cells(НачСтрокаГруппы,счМ).value*100);
				Лист.Cells(НачСтрокаГруппы,счМ+2).FormulaR1C1="=IF(RC[-2]=0,0,RC[-1]/RC[-2])";
				Лист.Cells(НачСтрокаГруппы,счМ+2).Style = "Percent";
				счМ = счМ+3;
			КонецЦикла;
		КонецЕсли;	
		
		
			
		////нач и кон остатк
		//Если Стр.СтатьяДР = "Нач. остаток" ИЛИ Стр.СтатьяДР = "Кон. остаток") Тогда
		//Для сч = 0 по СтрокиДерева.Количество() Цикл
		//	Стр
		//КонецЦикла;

		
	КонецЦикла;
	
КонецФункции


&НаКлиенте
Процедура ВыгрузкаВExcel(Команда)
	
	Если Модифицированность Тогда
		Предупреждение("Сначала сохраните изменения!");
		Возврат;
	КонецЕсли;
	
	Ком = Новый COMОбъект("Excel.application");
	Ком.WorkBooks.Add();
	Док = Ком.ActiveWorkBook;
	Лист = Док.Sheets(1);
	
	Ссылка = Объект.Ссылка;

	//здесь у нас есть полностью заполненное и рассчитанное дерево
	
	//шапка
	Лист.Cells(1,1).value = "Статья доходов/расходов";
	Лист.Columns(1).ColumnWidth = 20;//ширина колонки СтатьяДР
	
	//заполним колонки для месяцев
	счМ=2;
	Для сч = 1 по 12 Цикл
		Лист.Cells(1,счМ).value = ОбщийМодуль1Сервер.ИмяМесяцаПоНомеру(сч);
		
		счМ=счМ+3;
		Лист.Cells(2,счМ-3).value = "План";
		Лист.Cells(2,счМ-2).value = "Факт";
		Лист.Cells(2,счМ-1).value = "Рез";
		//Лист.Columns(счМ-1).ColumnWidth = 4;//ширина колонки Рез
		
		Область = Лист.Range(Лист.Cells(1, счМ-3), Лист.Cells(1, счМ-1));
     	Merge(Область);	
	КонецЦикла;
	//итоги
	Лист.Cells(1,счМ).value = "ИТОГО";
	счМ=счМ+3;
	Лист.Cells(2,счМ-3).value = "План";
	Лист.Cells(2,счМ-2).value = "Факт";
	Лист.Cells(2,счМ-1).value = "Рез";
	Область = Лист.Range(Лист.Cells(1, счМ-3), Лист.Cells(1, счМ-1));
 	Merge(Область);	
	//конец шапки
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	НачСтрокаДанных = 3;
	СтрокиДерева = ДеревоБДР.ПолучитьЭлементы();
	ВыгрузкаВExcelРекурсивно(СтрокиДерева, Лист, НачСтрокаДанных);
		
	//конец выгрузки строк
		
	Лист.Outline.AutomaticStyles = False;
    Лист.cells(1,1).AutoOutline();
	
	Ком.Visible = True;
	Лист = "";
	Док = "";
	Ком = "";
	
	
КонецПроцедуры

//объединяет ячейки в таблице Excel
&НаКлиенте
Процедура Merge(Область)
	
	xlCenter = -4108;
	xlBottom = - 4107;
	xlContext = -5002;
	

    Область.HorizontalAlignment = xlCenter;
    Область.VerticalAlignment = xlBottom;
    Область.WrapText = False;
    Область.Orientation = 0;
    Область.AddIndent = False;
    Область.IndentLevel = 0;
    Область.ShrinkToFit = False;
    Область.ReadingOrder = xlContext;
    Область.MergeCells = False;

	Область.Merge();
	
КонецПроцедуры

//заливает ячейки в таблице Excel голубым фоном
&НаКлиенте
Процедура ЗакраситьОбласть(Область)
    xlSolid = 1;
    xlAutomatic = -4105;
	xlThemeColorAccent1 = 5;
	
	Область.Interior.Pattern = xlSolid;
	Область.Interior.PatternColorIndex = xlAutomatic;
	Область.Interior.ThemeColor = xlThemeColorAccent1;
	Область.Interior.TintAndShade = 0.799981688894314;
	Область.Interior.PatternTintAndShade = 0;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьГруппу(Команда)
	
	//очищает план в группе дерева 
	
	Если НЕ Элементы.Таблица1.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ТекКол = Элементы.Таблица1.ТекущийЭлемент.Имя;
	Если Найти(ТекКол, "План")=0 Тогда
		НачКол = 1;
	Иначе
		НачКол = число(СтрЗаменить(ТекКол, "Таблица1План", ""));
	КонецЕсли;
	
	Если НачКол = 13 Тогда
		Возврат;
	КонецЕсли;
		
	СтрокиДерева = Элементы.Таблица1.ТекущиеДанные.ПолучитьЭлементы();
	
	ОчиститьГруппуРекурсивно(СтрокиДерева, НачКол);
	
	ПересчитатьОстаткиВДеревеБДРКлиент(НачКол);
	
	СтрокиДерева = ДеревоБДР.ПолучитьЭлементы();
	
	Если Элементы.кнПоказатьФакт.Пометка Тогда 
		Для сч = НачКол По 12 Цикл
			
			ПересчитатьВыполнениеПланаОднаКолонкаРекурсивноКлиент(СтрокиДерева, сч);
			
		КонецЦикла;
	КонецЕсли;	
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьГруппуРекурсивно(СтрокиДерева, НачКол)
	
	ИмяКолонки = "План"+Строка(НачКол);
	
	Для Каждого Стр Из СтрокиДерева Цикл
		Если Стр.ЭтоГруппа Тогда
			ОчиститьГруппуРекурсивно(Стр.ПолучитьЭлементы(), НачКол);
		КонецЕсли;
		
		Для сч = НачКол По 12 Цикл
			
			Стр["План"+Строка(сч)]=0;
			
		КонецЦикла;
		
		ПересчитатьОднуСтрокуВКолонкеИтогиВДеревеБДРКлиент(Стр, ИмяКолонки);

		Для сч = НачКол По 12 Цикл
			
			ПересчитатьИтогиПоГруппамВДеревеБДРКлиент(Стр, "План"+строка(сч));
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланПоСреднему(Команда)
	Бюдж = Неопределено;
	Если НЕ ВвестиЗначение(Бюдж, "бюджет", Тип("ДокументСсылка.БюджетГод")) Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьПланПоСреднемуС(Бюдж);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланПоСреднемуС(Бюджет)
	
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	ОбщийМодуль1Сервер.ОчиститьДеревоБДРПланСервер(ДеревоБДРФорма.Строки,);
	
	СтруктураПараметров = Новый Структура("ДеревоБДРФорма, Объект, НачальныйОстатокПлан, НачальныйОстатокФакт",
	ДеревоБДРФорма, Бюджет, объект.НачальныйОстаток, объект.НачальныйОстаток);
	
	ОбщийМодуль1Сервер.ЗаполнитьДеревоИзСправочникаСервер(СтруктураПараметров);
	
	//вычисление среднего
	ЗаполнитьПланПоСреднемуСРек(ДеревоБДРФорма.Строки);
	//для Каждого Стр Из ДеревоБДРФорма.Строки Цикл
	//	Для сч = 1 по 12 Цикл
	//		Стр["План"+сч] = Стр["План13"]/12;
	//	КонецЦикла;
	//КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьПланПоСреднемуСРек(Строки)
	
	для Каждого Стр Из Строки Цикл
		Для сч = 1 по 12 Цикл
			Стр["План"+сч] = Стр["План13"]/12;
		КонецЦикла;
		ЗаполнитьПланПоСреднемуСРек(Стр.строки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПриоритет(Команда)
	ПерезаполнитьПриоритетС()
КонецПроцедуры



&НаСервере
Процедура ПерезаполнитьПриоритетС()
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	СтруктураПараметров = Новый Структура("ДеревоБДРФорма, Объект, НачальныйОстатокПлан, НачальныйОстатокФакт",
	ДеревоБДРФорма, Объект, Объект.НачальныйОстаток, Объект.НачальныйОстаток);
	
	ОбщийМодуль2Сервер.ЗаполнитьДеревоИзСправочникаСервер(СтруктураПараметров);
	
	//вернем дерево на клиента
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
КонецПроцедуры


&НаКлиенте
Процедура ПерезаполнитьОбычно(Команда)
	ПерезаполнитьОбычноС()
КонецПроцедуры


&НаСервере
Процедура ПерезаполнитьОбычноС()
	ДеревоБДРФорма = ДанныеФормыВЗначение(ДеревоБДР,Тип("ДеревоЗначений"));
	
	СтруктураПараметров = Новый Структура("ДеревоБДРФорма, Объект, НачальныйОстатокПлан, НачальныйОстатокФакт",
	ДеревоБДРФорма, Объект, Объект.НачальныйОстаток, Объект.НачальныйОстаток);
	
	ОбщийМодуль1Сервер.ЗаполнитьДеревоИзСправочникаСервер(СтруктураПараметров);
	
	//вернем дерево на клиента
	ЗначениеВДанныеФормы(ДеревоБДРФорма, ДеревоБДР);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОпцииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Элемент.ТекущиеДанные.Бюджет = Объект.Ссылка;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтраницаБюджет(Команда)
	Элементы.Страницы.ПодчиненныеЭлементы.стрГод.Видимость = Истина;
	Элементы.Страницы.ПодчиненныеЭлементы.стрЗаполнение.Видимость = Ложь;
	Элементы.Страницы.ПодчиненныеЭлементы.стрРеквизиты.Видимость = Ложь;
	Элементы.Страницы.ПодчиненныеЭлементы.Группа4Опции.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтраницаРеквизиты(Команда)
	Элементы.Страницы.ПодчиненныеЭлементы.стрГод.Видимость = Ложь;
	Элементы.Страницы.ПодчиненныеЭлементы.стрЗаполнение.Видимость = Ложь;
	Элементы.Страницы.ПодчиненныеЭлементы.стрРеквизиты.Видимость = Истина;
	Элементы.Страницы.ПодчиненныеЭлементы.Группа4Опции.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтраницаСервис(Команда)
	Элементы.Страницы.ПодчиненныеЭлементы.стрГод.Видимость = Ложь;
	Элементы.Страницы.ПодчиненныеЭлементы.стрЗаполнение.Видимость = Истина;
	Элементы.Страницы.ПодчиненныеЭлементы.стрРеквизиты.Видимость = Ложь;
	Элементы.Страницы.ПодчиненныеЭлементы.Группа4Опции.Видимость = Ложь;
КонецПроцедуры

//открывает статью ДР
&НаКлиенте
Процедура ОткрытьСтатью(Команда)
	ОткрытьЗначение(Элементы.Таблица1.ТекущиеДанные.СтатьяДР);
КонецПроцедуры

&НаКлиенте
Процедура ШрифтУменьш(Команда)
	Элементы.Таблица1.Шрифт = Новый Шрифт(, 9, , , , );
КонецПроцедуры
