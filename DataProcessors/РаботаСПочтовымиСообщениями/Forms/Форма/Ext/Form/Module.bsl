///////////////////////////////////////////////////////////////////////////////////
// ФОРМА ДЛЯ ДЕМОНСТРАЦИИ ВОЗМОЖНОСТЕЙ ПОДСИСТЕМЫ "РАБОТА С ПОЧТОВЫМИ СООБЩЕНИЯМИ"
//

////////////////////////////////////////////////////////////////////////////////
// СЕКЦИЯ ОБРАБОТЧИКОВ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СистемнаяУчетнаяЗапись = ЭлектроннаяПочта.ПолучитьСистемнуюУчетнуюЗапись();
	
	ЗаполнитьСписокУчетныхЗаписей();
	
	Входящие_ЗаполнитьСписокВыбораУчетныхЗаписей();
	
	Результат = ПолучитьНастройкуРедактироватьИнтерактивно();
	
	Если Результат <> Неопределено Тогда
		РедактировтьИнтерактивно = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкуРедактироватьИнтерактивно(РедактировтьИнтерактивно);
	
КонецПроцедуры

// Получает и возвращает значение реквизита РедактироватьИнтерактивно
// из настроек системного хранилища по текущему пользователю
//
&НаСервереБезКонтекста
Функция ПолучитьНастройкуРедактироватьИнтерактивно()
	
	Значение = ХранилищеОбщихНастроек.Загрузить(
	                        "ФормаПодготовкиНовогоПисьма",
	                        "РедактироватьИнтерактивно",,
	                        ОбщегоНазначения.ТекущийПользователь());
	
	Возврат Значение;
	
КонецФункции

// Получает и возвращает значение реквизита РедактироватьИнтерактивно
// из настроек системного хранилища по текущему пользователю
//
&НаСервереБезКонтекста
Процедура СохранитьНастройкуРедактироватьИнтерактивно(знач Значение = Неопределено)
	
	ХранилищеОбщихНастроек.Сохранить(
	               "ФормаПодготовкиНовогоПисьма",
	               "РедактироватьИнтерактивно",
	               Значение, ,
	               ОбщегоНазначения.ТекущийПользователь());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоВыполнить()
	
	Если КоличествоВыбранныхУчетныхЗаписей() = 0 Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не заданы параметры системной учетной записи'"), ,
					"УчетныеЗаписи");
		Возврат;
	КонецЕсли;
	
	ПодготовленныеДанные = ПодготовитьПараметрыПисьма();
	
	Если ПодготовленныеДанные <> Неопределено Тогда
		
		Если РедактировтьИнтерактивно Тогда
			ОткрытьФорму("ОбщаяФорма.РедактированиеНовогоПисьма", ПодготовленныеДанные);
		Иначе
			ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(ПодготовленныеДанные.УчетнаяЗапись, ПодготовленныеДанные.ПараметрыПисьма);
			Предупреждение(НСтр("ru = 'Сообщение успешно отправлено'"),, НСтр("ru = 'Отправление сообщения'"));
		КонецЕсли;
		
	КонецЕсли;
	
	//прог 170811
	//запишем адрес в адресную книгу, если его там еще нет
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьСистемнуюУчетнуюЗаписьВыполнить()
	
	ОткрытьФормуМодально("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта", 
						Новый Структура("Ключ", СистемнаяУчетнаяЗапись));
	ЗаполнитьСписокУчетныхЗаписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКВложениюОчистка(Элемент, СтандартнаяОбработка)
	
	Вложения.Очистить();
	ПутьКВложению = "";
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПередОтправкойПриИзменении(Элемент)
	
	// для неитерактивной отправки оставляем в таблице учетных записей
	// только одну помеченную
	Если Не РедактировтьИнтерактивно Тогда
		ЗаписьНайдена = Ложь;
		Для Каждого СтрокаУчетнаяЗапись Из УчетныеЗаписи Цикл
			Если СтрокаУчетнаяЗапись.Пометка Тогда
				Если ЗаписьНайдена Тогда
					СтрокаУчетнаяЗапись.Пометка = Ложь;
				Иначе
					ЗаписьНайдена = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиПередНачаломИзменения(Элемент, Отказ)
	
	// для неитерактивной отправки возможна только одна учетная запись
	Если Элемент.ТекущийЭлемент.Имя = "Пометка"
	   И НЕ Элемент.ТекущиеДанные.Пометка
	   И НЕ РедактировтьИнтерактивно Тогда
		Для Каждого СтрокаУчетнаяЗапись Из УчетныеЗаписи Цикл
			Если СтрокаУчетнаяЗапись.Пометка Тогда
				СтрокаУчетнаяЗапись.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕКЦИЯ СЕРВИСНЫХ ФУНКЦИЙ
//

// Подготавливает параметры письма в требуемые
// интерфейсами подсистемы работы с почтовыми сообщениями
//
&НаКлиенте
Функция ПодготовитьПараметрыПисьма()
	
	ПараметрыПисьма = Новый Структура;
	
	Если ЗначениеЗаполнено(ТемаПисьма) Тогда
		ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТелоПисьма) Тогда
		ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПочтовыйАдресПолучателя) Тогда
		ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
	КонецЕсли;
	
	Если РедактировтьИнтерактивно Тогда
		
		Если КоличествоВыбранныхУчетныхЗаписей() = 1 Тогда
			ПараметрыПисьма.Вставить("УчетнаяЗапись", ПолучитьУчетнуюЗаписьИзСписка());
		Иначе
			ПараметрыПисьма.Вставить("УчетнаяЗапись", ПолучитьСписокОтмеченныхУчетныхЗаписей());
		КонецЕсли;
		
		Если Вложения.Количество() >0 Тогда
			ПараметрыПисьма.Вставить("Вложения", Вложения);
		КонецЕсли;
		
		Результат = ПараметрыПисьма;
	Иначе
		Если Вложения.Количество() >0 Тогда
			ВложенияПараметр = Новый Соответствие;
			ВложенияПараметр.Вставить(Вложения[0].Представление, Вложения[0].Значение);
			ПараметрыПисьма.Вставить("Вложения", ВложенияПараметр);
		КонецЕсли;
		Результат = Новый Структура;
		Результат.Вставить("УчетнаяЗапись", ПолучитьУчетнуюЗаписьИзСписка());
		
		Если ПарольЗадан(Результат.УчетнаяЗапись) Тогда
			ПарольПараметр = Неопределено;
		Иначе
			ПарольПараметр = ЗапросПароляДоступаКПочтовомуСерверу(УчетнаяЗаписьВходящие);
			Если ПарольПараметр = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			ПараметрыПисьма.Вставить("Пароль", ПарольПараметр);
		КонецЕсли;
		
		Результат.Вставить("ПараметрыПисьма", ПараметрыПисьма);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет список учетных записей в списке выбора элемента формы
//
&НаСервере
Процедура ЗаполнитьСписокУчетныхЗаписей()
	
	УчетныеЗаписи.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	УчетныеЗаписи.Ссылка,
					|	УчетныеЗаписи.Наименование
					|ИЗ
					|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
					|ГДЕ
					|	УчетныеЗаписи.ИспользоватьДляОтправки
					|	И НЕ УчетныеЗаписи.ПометкаУдаления";
	
	ВыборкаУчетныхЗаписей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаУчетныхЗаписей.Следующий() Цикл
		НоваяСтрока = УчетныеЗаписи.Добавить();
		НоваяСтрока.УчетнаяЗапись = ВыборкаУчетныхЗаписей.Ссылка;
		НоваяСтрока.Наименование  = ВыборкаУчетныхЗаписей.Наименование;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество выбраннных учетных записей
//
&НаКлиенте
Функция КоличествоВыбранныхУчетныхЗаписей()
	
	Результат = 0;
	
	Для Каждого СтрокаУчетнаяЗапись Из УчетныеЗаписи Цикл
		Если СтрокаУчетнаяЗапись.Пометка Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает первую выбранную учетную запись в списке
//
&НаКлиенте
Функция ПолучитьУчетнуюЗаписьИзСписка()
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУчетнаяЗапись Из УчетныеЗаписи Цикл
		Если СтрокаУчетнаяЗапись.Пометка Тогда
			Результат = СтрокаУчетнаяЗапись.УчетнаяЗапись;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает список отмеченных учетных записей
//
// Возвращаемое значение
// Список (тип СписокЗначений)
//        представление - наименование учетной записи
//        значение      - ссылка на учетную запись
//
&НаКлиенте
Функция ПолучитьСписокОтмеченныхУчетныхЗаписей()
	
	Результат = Новый СписокЗначений;
	
	Для Каждого СтрокаУчетнаяЗапись Из УчетныеЗаписи Цикл
		Если СтрокаУчетнаяЗапись.Пометка Тогда
			Результат.Добавить(СтрокаУчетнаяЗапись.УчетнаяЗапись, СтрокаУчетнаяЗапись.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЕКЦИЯ ФУНКЦИЙ ГРУППЫ ПРОВЕРКИ ВХОДЯЩИХ СООБЩЕНИЙ
//

&НаКлиенте
Процедура ПроверитьВходящиеВыполнить()
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьВходящие) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Учетная запись для получения входящих не заполнена.'"));
		Возврат;
	КонецЕсли;
		
	Если ПарольЗадан(УчетнаяЗаписьВходящие) Тогда
		ПарольПараметр = Неопределено;
	Иначе
		ПарольПараметр = ЗапросПароляДоступаКПочтовомуСерверу(УчетнаяЗаписьВходящие);
		Если ПарольПараметр = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Загрузка входящих сообщений.'"),,НСтр("ru = 'Пожалуйста, подождите...'"));
	Попытка
		ЗагрузитьВходящиеСообщения(ПарольПараметр);
		НовыхПисем = ВходящиеСообщения.Количество();
		Если НовыхПисем > 0 Тогда
			Предупреждение(НСтр("ru = 'Получено новых писем: '") + НовыхПисем);
		Иначе
			Предупреждение(НСтр("ru = 'Нет новых писем.'"));
		КонецЕсли;
	Исключение
		Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Оранизует получения пароля для учетной записи, в которой он не задан.
//
&НаКлиенте
Функция ЗапросПароляДоступаКПочтовомуСерверу(УчетнаяЗапись)
	
	ПараметрУчетнаяЗапись = Новый Структура("УчетнаяЗапись", УчетнаяЗапись);
	Пароль = ОткрытьФормуМодально("ОбщаяФорма.ПодтверждениеПароляУчетнойЗаписи",
	                                 ПараметрУчетнаяЗапись);
	Если ТипЗнч(Пароль) = Тип("Строка") Тогда
		Возврат Пароль;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Обрабатывает загрузку почтовых сообщений с сервера.
// В том числе обработка ошибок.
//
&НаСервере
Процедура ЗагрузитьВходящиеСообщения(знач ПарольПараметр = Неопределено)
	
	ПараметрыЗагрузки = Новый Структура;
	
	ПараметрыЗагрузки.Вставить("Колоноки", "ИмяОтправителя, Вложения, Тема, ДатаОтправления, ОбратныйАдрес");
	ПараметрыЗагрузки.Вставить("Пароль", ПарольПараметр);
	
	ТаблицаВходящихСообщений = ЭлектроннаяПочта.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьВходящие, ПараметрыЗагрузки);
	
	ВходящиеСообщения.Очистить();
	
	Для Каждого ЭлементВходящееСообщение Из ТаблицаВходящихСообщений Цикл
		НоваяСтрока = ВходящиеСообщения.Добавить();
		НоваяСтрока.Отправитель     = ЭлементВходящееСообщение.ИмяОтправителя;
		НоваяСтрока.ОбратныйАдрес   = ЭлементВходящееСообщение.ОбратныйАдрес;
		НоваяСтрока.Тема            = ЭлементВходящееСообщение.Тема;
		НоваяСтрока.ДатаОтправления = ЭлементВходящееСообщение.ДатаОтправления;
		Если ЭлементВходящееСообщение.Вложения.Количество() > 0 Тогда
			НоваяСтрока.Вложение = Истина;
		Иначе
			НоваяСтрока.Вложение = Ложь;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Входящие_ЗаполнитьСписокВыбораУчетныхЗаписей()
	
	Элементы.УчетнаяЗаписьВходящие.СписокВыбора.Очистить();
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ПолучитьДоступныеУчетныеЗаписи(, Истина, Истина);
	
	ЕстьПолныеУчетныеЗаписи = Ложь;
	
	Для Каждого СтрУчЗапись Из ДоступныеУчетныеЗаписи Цикл
		ЕстьПолныеУчетныеЗаписи = Истина;
		Элементы.УчетнаяЗаписьВходящие.СписокВыбора.Добавить(
				СтрУчЗапись.Ссылка,
				СтрУчЗапись.Наименование);
	КонецЦикла;
	
	Если ЕстьПолныеУчетныеЗаписи Тогда
		УчетнаяЗаписьВходящие = Элементы.УчетнаяЗаписьВходящие.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, задан ли пароль у учетной записи.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//
// Возвращаемое значение
//  Истина - пароль задан
//  Ложь   - пароль не задан
//
&НаСервере
Функция ПарольЗадан(УчетнаяЗапись)
	
	Если ЗначениеЗаполнено(УчетнаяЗапись.Пароль) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ПутьКВложениюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Перем ПомещенныеФайлы;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		
		ПомещенныеФайлы = Новый Массив;
		Если ПоместитьФайлы(, ПомещенныеФайлы, ДиалогОткрытияФайла) Тогда
			ПутьКВложению = ПомещенныеФайлы[0].Имя;
			ЗаполнитьВложение(Вложения, ПомещенныеФайлы[0]);
		КонецЕсли;
	Иначе
		Предупреждение(НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВложение(Вложения, Описание)
	
	Вложения.Очистить();
	Вложения.Добавить(ПолучитьИзВременногоХранилища(Описание.Хранение), ВыделитьИмяФайлаИзПолногоПути(Описание.Имя));
	УдалитьИзВременногоХранилища(Описание.Хранение);
	
КонецПроцедуры

// Выделяет собственное имя файла из полного пути к файлу
// 
// Параметры:
// ПутьКФайлу    - строка - полный путь к файлу
//
// Возвращаемое значение:
// строка - выделенное имя файла
//
&НаСервереБезКонтекста
Функция ВыделитьИмяФайлаИзПолногоПути(ПутьКФайлу)
	
	Перем Результат;
	
	Индекс = СтрДлина(ПутьКФайлу);
	Найдено = Ложь;
	
	Пока Индекс > 1 Цикл
		Если Сред(ПутьКФайлу, Индекс, 1) = "\" Тогда
			Найдено = Истина;
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если Найдено Тогда
		Результат = Сред(ПутьКФайлу, Индекс+1, СтрДлина(ПутьКФайлу) - Индекс);
	Иначе
		Результат = ПутьКФайлу;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПочтовыйАдресПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Адрес = "";
	Рез = ВвестиЗначение(Адрес,"Выберита получателя",Тип("СправочникСсылка.АдреснаяКнигаЭлектроннойПочты"));
	Если Рез Тогда
		ПочтовыйАдресПолучателя = ПолучитьEMAILИзАдреснойКниги(Адрес);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьEMAILИзАдреснойКниги(Адрес)

	Возврат Адрес.email;

КонецФункции // ПолучитьEMAILИзАдреснойКниги()

