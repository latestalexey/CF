
//из модуля объекта

//возвращает параметры подключения в виде структуры
&НаКлиенте
Функция ПолучитьПараметрыПодключения() Экспорт
	ПараметрыПодключения = Неопределено;

	ГуглАккаунт = СокрЛП(НРег(Объект.Аккаунт));

	Если Не ЗначениеЗаполнено(ГуглАккаунт) Тогда
		Сообщить("Не указан аккаунт Google!");
		Возврат Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Пароль) Тогда
		Сообщить("Не указан пароль!");
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ГуглАккаунт", ГуглАккаунт);
	ПараметрыПодключения.Вставить("Пароль", Объект.Пароль);
	ПараметрыПодключения.Вставить("ПоправкаGMT", Объект.ПоправкаGMT);

	Возврат ПараметрыПодключения;
КонецФункции

//заполняет таблицу событиями календаря (Исполняющая процедура), вызывается из
//ОбновитьСписок() и ПриОткрытии()
&НаКлиенте
Процедура ПрочитатьСобытия() Экспорт
	Перем ПараметрыПодключения, РезультатПолученияТзСобытия;
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	Если ПараметрыПодключения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РезультатПолученияТзСобытия = ВыбратьСобытия(ПараметрыПодключения, Объект.НачПросмотр, Объект.КонПросмотр);
	Если РезультатПолученияТзСобытия="" Тогда
		Объект.ТЗСобытий.Очистить();
		//Для каждого ТекСтрока Из РезультатПолученияТзСобытия Цикл
		Для каждого ТекСтрока Из ТЗСобытия Цикл
			НоваяСтрока = Объект.ТЗСобытий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	Иначе

		Сообщить(РезультатПолученияТзСобытия);
	КонецЕсли;
КонецПроцедуры

//используется в НайтиНажатие(Команда) в качестве параметра функции ВыбратьСобытия()
&НаКлиенте
Функция ПолучитьEscapeПоследовательность(Стр, ВидПоследовательности = "cmd") Экспорт
	РусУкр = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяЁЄІЇёєії";
	Эскейп1 = "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD";
	Эскейп2 = "000000000000000000000000000000000000000000000000111111111111111100001111";
	Эскейп3 = "9999999999999999AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBB888888888888888888889999";
	Эскейп4 = "0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF14671467";

	ХТМЛ1 = "111111111111111111111111111111111111111111111111111111111111111111111111";
	ХТМЛ2 = "000000000000000000000000000000000000000000000000000000000000111100001111";
	ХТМЛ3 = "444444444455555555556666666666777777777788888888889999999999000022330011";
	ХТМЛ4 = "012345678901234567890123456789012345678901234567890123456789012358015801";

	КоличБукв = СтрДлина(РусУкр);
	Для сч = 1 По КоличБукв Цикл
		Если ВидПоследовательности = "cmd" Тогда
			Стр = СтрЗаменить(Стр, Сред(РусУкр, сч, 1), "%" + Сред(Эскейп1, сч, 1) + Сред(Эскейп2, сч, 1) + "%" + Сред(Эскейп3, сч, 1) + Сред(Эскейп4, сч, 1));
		ИначеЕсли ВидПоследовательности = "html" Тогда
			Стр = СтрЗаменить(Стр, Сред(РусУкр, сч, 1), "&#" + Сред(ХТМЛ1, сч, 1) + Сред(ХТМЛ2, сч, 1) + Сред(ХТМЛ3, сч, 1) + Сред(ХТМЛ4, сч, 1) + ";");
		КонецЕсли;
	КонецЦикла;

	Возврат Стр;

КонецФункции

//для заполнения таблицы событий
&НаКлиенте
Функция ВыбратьСобытия(ПараметрыПодключения, ДатаНачала = "", ДатаОкончания = "", СтрокаПоиска = "") Экспорт
	Перем ПроверкаАккаунта;
	ПроверкаАккаунта = ПолучитьТокен(ПараметрыПодключения);
	Если Не ПроверкаАккаунта.Результат Тогда
		Возврат ПроверкаАккаунта.Значение;
	Иначе
		Токен = ПроверкаАккаунта.Значение;
	КонецЕсли;

	ВерсияGData = "2";
	КоличествоСобытийВВыборке = "10000";

	пДатаНачала = ?(ДатаНачала = "", "", ?(ДатаНачала = Дата(1, 1, 1), "", ВДатуRFC3339(ДатаНачала, 0)));
	пДатаОкончания = ?(ДатаОкончания = "", "", ?(ДатаОкончания = Дата(1, 1, 1), "", ВДатуRFC3339(ДатаОкончания, 0)));
	ТекДата = ?(пДатаОкончания = "", "", ?(пДатаОкончания = Дата(1, 1, 1), "", ВДатуRFC3339(ТекущаяДата(), 0)));

	ГуглАккаунт = ПараметрыПодключения.ГуглАккаунт;
	УРЛ = "http://www.google.com/calendar/feeds/" + ГуглАккаунт + "/private/full?v=" + ВерсияGData + "&max-results=" + КоличествоСобытийВВыборке + "&singleevents=true" + "&orderby=starttime";

	start_min = ?(пДатаНачала = "", "", "&start-min=" + пДатаНачала);
	start_max = ?(пДатаОкончания = "", "", "&start-max=" + пДатаОкончания);
	Поиск = ?(СтрокаПоиска = "", "", "&q=" + СтрокаПоиска);
	УРЛ = УРЛ + start_min + start_max + Поиск;

	ХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
	ХТТП.Open("GET", УРЛ, Ложь);
	ХТТП.SetRequestHeader("Content-Type", "application/atom+xml");
	ХТТП.SetRequestHeader("If-Modified-Since", ТекДата);
	ХТТП.SetRequestHeader("Last-Modified", ТекДата);
	ХТТП.SetRequestHeader("Authorization", "GoogleLogin auth=" + Токен);
	ХТТП.Send(Null);

	Если ХТТП.Status = 200 Тогда
		ОтветСервера = ХТТП.ResponseText;
		
		ВыбратьСобытияСервер(ПараметрыПодключения, ОтветСервера);
		Возврат "";
	Иначе
		Возврат "Ошибка:" + ХТТП.Status + "-" + ХТТП.ResponseText;
	КонецЕсли;

КонецФункции

//для заполнения таблицы событий
&НаСервере
Функция ВыбратьСобытияСервер(ПараметрыПодключения, ОтветСервера)
	
	ТЗСобытияФорма = ДанныеФормыВЗначение(ТЗСобытия,Тип("ТаблицаЗначений"));
	
	ТЗСобытияФорма.Очистить();
	
	Объект.Напоминания.Очистить();
	
	ДеревоXML = ПрочитатьResponseTextXML(ОтветСервера);
	//ТЗСобытия = ИнитТЗСобытия();

	й = 0;
	ПоправкаGMT = ПараметрыПодключения.ПоправкаGMT;
	Для каждого строка Из ДеревоXML.Строки[0].Строки Цикл
		Если строка.ИмяXMLЭлементаДанных = "entry" Тогда
			Для каждого ТекАтрибут Из строка.Строки.Родитель.СписокАтрибутов Цикл
				Если ТекАтрибут.Значение = "gd:etag" Тогда
					//НовСтрок = ТЗСобытия.Добавить();
					НовСтрок = ТЗСобытияФорма.Добавить();
					НовСтрок.GdEtag = ТекАтрибут.Представление;
				КонецЕсли;
			КонецЦикла;
			й = й + 1;
			ПрочитатьРекурсивно(строка.Строки, ПоправкаGMT, НовСтрок);
			//ТЗС = ТЗСобытия[й - 1];
			ТЗС = ТЗСобытияФорма[й - 1];
			ТЗС.Изменено = ?(ТЗС.Updated - ТЗС.Published = 0, Ложь, Истина);
		КонецЕсли;
	КонецЦикла;
    ТЗСобытияФорма.Сортировать("StartTime");
	//Возврат ТЗСобытия;
	ЗначениеВДанныеФормы(ТЗСобытияФорма, ТЗСобытия);

КонецФункции

//для заполнения таблицы событий
&НаСервере
Процедура ПрочитатьРекурсивно(Строки, ПоправкаGMT, НовСтрок)
	Если Строки = Неопределено Тогда Возврат; КонецЕсли;

	Для каждого строка Из Строки Цикл

		Если строка.ИмяXMLЭлементаДанных = "id" Тогда
			НовСтрок.EntryId = строка.ЗначениеXMLЭлементаДанных;
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "published" Тогда
			НовСтрок.Published = ИзДатыRFC3339(строка.ЗначениеXMLЭлементаДанных, ПоправкаGMT);
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "updated" Тогда
			НовСтрок.Updated = ИзДатыRFC3339(строка.ЗначениеXMLЭлементаДанных, ПоправкаGMT);
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "title" Тогда
			НовСтрок.Title = строка.ЗначениеXMLЭлементаДанных;
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "content" Тогда
			НовСтрок.Content = строка.ЗначениеXMLЭлементаДанных;
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "link" Тогда
			pEdit = Ложь;
			Для каждого ТекАтрибут Из строка.Строки.Родитель.СписокАтрибутов Цикл
				Если ТекАтрибут.Значение = "rel" Тогда
					Если ТекАтрибут.Представление = "edit" Тогда
						pEdit = Истина;
					КонецЕсли;
				КонецЕсли;
				Если pEdit И ТекАтрибут.Значение = "href" Тогда
					НовСтрок.LinkEditHref = ТекАтрибут.Представление;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "name" Тогда
			НовСтрок.AuthorName = строка.ЗначениеXMLЭлементаДанных;
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "email" Тогда
			НовСтрок.AuthorEmail = строка.ЗначениеXMLЭлементаДанных;
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "gd:where" Тогда
			Для каждого ТекАтрибут Из строка.Строки.Родитель.СписокАтрибутов Цикл
				Если ТекАтрибут.Значение = "valueString" Тогда
					НовСтрок.GdWhere = ТекАтрибут.Представление;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "gd:when" Тогда
			Для каждого ТекАтрибут Из строка.Строки.Родитель.СписокАтрибутов Цикл
				НовСтрок.ВесьДень = Ложь;
				Если ТекАтрибут.Значение = "startTime" Тогда
					Если СтрДлина(ТекАтрибут.Представление) = 10 Тогда
						НовСтрок.ВесьДень = Истина;
					КонецЕсли;
					НовСтрок.StartTime = ИзДатыRFC3339(ТекАтрибут.Представление, ПоправкаGMT);
					//прог
					НовСтрок.ДатаНачала = НовСтрок.StartTime;
					
					НовСтрок.ВремяНачала = Формат(НовСтрок.StartTime,"ДФ=ЧЧ:мм");
					
				ИначеЕсли ТекАтрибут.Значение = "endTime" Тогда
					Если СтрДлина(ТекАтрибут.Представление) = 10 Тогда
						НовСтрок.ВесьДень = Истина;
					КонецЕсли;
					НовСтрок.EndTime = ИзДатыRFC3339(ТекАтрибут.Представление, ПоправкаGMT);
					//прог
					НовСтрок.ДатаОкончания = НовСтрок.EndTime;
					
					НовСтрок.ВремяОкончания = Формат(НовСтрок.EndTime,"ДФ=ЧЧ:мм");
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли строка.ИмяXMLЭлементаДанных = "gd:reminder" Тогда
			
			НовСтр = Объект.Напоминания.Добавить();
			Для Каждого ТекАтрибут Из Строка.СписокАтрибутов Цикл
				
				Если ТекАтрибут.Значение = "method" Тогда
					
					Если ТекАтрибут.Представление = "email" Тогда
						Предст = "Электронная почта";
					ИначеЕсли ТекАтрибут.Представление = "alert" Тогда
						Предст = "Всплывающее окно";
					ИначеЕсли ТекАтрибут.Представление = "sms" Тогда
						Предст = "SMS сообщение";
					КонецЕсли;
					
					НовСтр.ВидНапоминания = Предст;
				ИначеЕсли ТекАтрибут.Значение = "minutes" Тогда
					НовСтр.Минуты = Число(ТекАтрибут.Представление);
				КонецЕсли;
				
				НовСтр.EntryId = НовСтрок.EntryId;
			КонецЦикла;
			
		КонецЕсли;
		ПрочитатьРекурсивно(строка.Строки, ПоправкаGMT, НовСтрок);
	КонецЦикла;

КонецПроцедуры

//удаляет событие на сервере гугла, вызывается из УдалитьНажатие(Команда)
&НаКлиенте
Функция УдалитьСобытие(ПараметрыПодключения, Событие)
	Перем ПроверкаАккаунта;
	ПроверкаАккаунта = ПолучитьТокен(ПараметрыПодключения);
	Если Не ПроверкаАккаунта.Результат Тогда
		Возврат ПроверкаАккаунта.Значение;
	Иначе
		Токен = ПроверкаАккаунта.Значение;
	КонецЕсли;

	Если ТипЗнч(Событие) <> Тип("Структура") Тогда
		Возврат "Не выбрано событие!!!";
	Иначе
		ТекущееСобытие = Событие;
	КонецЕсли;

	УРЛ = ТекущееСобытие.LinkEditHref;
	Если УРЛ = "" Тогда
		Возврат "Событие: '" + ТекущееСобытие.Title + "' - не доступно для изменений!!!";
	КонецЕсли;

	ХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
	ХТТП.Open("POST", УРЛ, Ложь);
	ХТТП.SetRequestHeader("Content-Type", "application/atom+xml");
	ХТТП.SetRequestHeader("X-HTTP-Method-Override", "DELETE");
	ХТТП.SetRequestHeader("If-Match", "*");
	ХТТП.SetRequestHeader("Authorization", "GoogleLogin auth=" + Токен);
	ХТТП.Send(Null);

	ОбщийМодуль2Клиент.Пауза(3);
	
	Если ХТТП.Status = 200 Тогда
		Возврат "ОК";
	Иначе
		Возврат "Ошибка:" + ХТТП.Status + "-" + ХТТП.ResponseText;
	КонецЕсли;

КонецФункции

//авторизация на гугле
&НаКлиенте
Функция ПолучитьТокен(ПараметрыПодключения) Экспорт
	ПараметрыТокена = Новый Структура("Результат, Значение");

	ПараметрыТокена.Вставить("Результат", Ложь);
	ПараметрыТокена.Вставить("Значение", "Ошибка аутентификации!!!");

	Если ТипЗнч(ПараметрыПодключения) = Тип("Структура") И (ЗначениеЗаполнено(ПараметрыПодключения.ГуглАккаунт) И ЗначениеЗаполнено(ПараметрыПодключения.Пароль)) Тогда

		УРЛ = "https://www.google.com/accounts/ClientLogin";

		Попытка
			ХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
			ХТТП.Open("POST", УРЛ, Ложь);
			ХТТП.SetRequestHeader("Content-Type", "application/x-www-form-urlencoded");
			ХТТП.Send("Email=" + ПараметрыПодключения.ГуглАккаунт + "&Passwd=" + ПараметрыПодключения.Пароль + "&service=cl&source=Gulp-CalGulp-1.05");
		Исключение
			Сообщить("Ошибка:" + ОписаниеОшибки());
			Возврат ПараметрыТокена;
		КонецПопытки;

		Если ХТТП.Status = 200 Тогда
			Токен = ХТТП.ResponseText;
			Токен = Прав(Токен, СтрДлина(Токен) - СтрДлина("Auth=") - Найти(Токен, "Auth=") + 1);

			ПараметрыТокена.Вставить("Результат", Истина);
			ПараметрыТокена.Вставить("Значение", Токен);
		Иначе


			ПараметрыТокена.Вставить("Результат", Ложь);
			ПараметрыТокена.Вставить("Значение", "Ошибка:" + ХТТП.Status + "-" + ХТТП.ResponseText);
		КонецЕсли;

	КонецЕсли;

	Возврат ПараметрыТокена;

КонецФункции

//конвертирует дату
&НаКлиенте
Функция ВДатуRFC3339(Дата1С, ПоправкаGMT, КраткийФормат = 0) Экспорт
	ТемпДата = Дата1С - 60 * 60 * ПоправкаGMT;
	ТемпГод = СтрЗаменить(Формат(Год(ТемпДата), "ND=4; NLZ="), Символы.НПП, "");
	ТемпМесяц = Формат(Месяц(ТемпДата), "ND=2; NLZ=");
	ТемпДень = Формат(День(ТемпДата), "ND=2; NLZ=");

	Если КраткийФормат <> 0 Тогда
		ДатаRFC3339 = "" + ТемпГод + "-" + ТемпМесяц + "-" + ТемпДень;
	Иначе
		ТемпЧас = ?(Час(ТемпДата) = 0, "00", Формат(Час(ТемпДата), "ND=2; NLZ="));
		ТемпМинута = ?(Минута(ТемпДата) = 0, "00", Формат(Минута(ТемпДата), "ND=2; NLZ="));
		ТемпСекунда = ?(Секунда(ТемпДата) = 0, "00", Формат(Секунда(ТемпДата), "ND=2; NLZ="));
		ДатаRFC3339 = "" + ТемпГод + "-" + ТемпМесяц + "-" + ТемпДень + "T" + ТемпЧас + ":" + ТемпМинута + ":" + ТемпСекунда + ".000Z";
	КонецЕсли;

	Возврат ДатаRFC3339;

КонецФункции

//конвертирует дату
&НаСервере
Функция ИзДатыRFC3339(ДатаRFC3339, ПоправкаGMT)
	ТемпГод = Сред(ДатаRFC3339, 1, 4);
	ТемпМесяц = Сред(ДатаRFC3339, 6, 2);
	ТемпДень = Сред(ДатаRFC3339, 9, 2);

	Если СтрДлина(ДатаRFC3339) = 10 Тогда
		Дата1С = Дата(ТемпГод, ТемпМесяц, ТемпДень);
		Возврат Дата1С;
	КонецЕсли;

	ТемпЧас = Сред(ДатаRFC3339, 12, 2);
	ТемпМинута = Сред(ДатаRFC3339, 15, 2);
	ТемпСекунда = Сред(ДатаRFC3339, 18, 2);

	ТипДаты = Сред(ДатаRFC3339, 24, 1);

	Если ТипДаты = "Z" Тогда
		Дата1С = Дата(ТемпГод, ТемпМесяц, ТемпДень, ТемпЧас, ТемпМинута, ТемпСекунда) + 60 * 60 * ПоправкаGMT;
	Иначе
		ТемпGMT = Число(Сред(ДатаRFC3339, 24, 3));
		ТемпДата = Дата(ТемпГод, ТемпМесяц, ТемпДень, ТемпЧас, ТемпМинута, ТемпСекунда);
		Дата1С = ТемпДата - 60 * 60 * ТемпGMT + 60 * 60 * ПоправкаGMT;
	КонецЕсли;

	Возврат Дата1С;

КонецФункции

//читает XML-объект и в дерево загружает его содержимое
&НаСервере
Функция ПрочитатьResponseTextXML(ResponseText)
	XMLДокумент = Новый ЧтениеXML;
	XMLДокумент.УстановитьСтроку(ResponseText);

	ДеревоXMLДокумента = Новый ДеревоЗначений;
	ОписаниеСписокАтрибутов = Новый ОписаниеТипов("СписокЗначений");


	ДеревоXMLДокумента.Колонки.Очистить();
	ДеревоXMLДокумента.Колонки.Добавить("ТипУзла");
	ДеревоXMLДокумента.Колонки.Добавить("ИмяXMLЭлементаДанных");
	ДеревоXMLДокумента.Колонки.Добавить("ЗначениеXMLЭлементаДанных");
	ДеревоXMLДокумента.Колонки.Добавить("СписокАтрибутов", ОписаниеСписокАтрибутов);
	ЗагрузитьРекурсивно(XMLДокумент, ДеревоXMLДокумента.Строки);

	Возврат ДеревоXMLДокумента;

КонецФункции

//рекурсивно обходит XML-объект и в дерево загружает его содержимое
//Параметры:
//	XMLДокумент - ЧтениеXML
//  СтрокаДерева - Строки дерева значений
&НаСервере
Процедура ЗагрузитьРекурсивно(XMLДокумент, СтрокаДерева)
	Пока XMLДокумент.Прочитать() Цикл
		Если XMLДокумент.ТипУзла = ТипУзлаXML.ИнструкцияОбработки Тогда
			НоваяСрокаДерева = СтрокаДерева.Добавить();
			НоваяСрокаДерева.ТипУзла = XMLДокумент.ТипУзла;
			НоваяСрокаДерева.ИмяXMLЭлементаДанных = XMLДокумент.Имя;
			НоваяСрокаДерева.ЗначениеXMLЭлементаДанных = XMLДокумент.Значение;
		ИначеЕсли XMLДокумент.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НоваяСрокаДерева = СтрокаДерева.Добавить();
			НоваяСрокаДерева.ТипУзла = XMLДокумент.ТипУзла;
			НоваяСрокаДерева.ИмяXMLЭлементаДанных = XMLДокумент.Имя;
			НоваяСрокаДерева.ЗначениеXMLЭлементаДанных = XMLДокумент.Значение;
			Пока XMLДокумент.ПрочитатьАтрибут() Цикл
				НоваяСрокаДерева.СписокАтрибутов.Добавить(XMLДокумент.Имя, XMLДокумент.Значение);
			КонецЦикла;
			ЗагрузитьРекурсивно(XMLДокумент, НоваяСрокаДерева.Строки);
		ИначеЕсли XMLДокумент.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат; Прервать;
		ИначеЕсли XMLДокумент.ТипУзла = ТипУзлаXML.Ничего Тогда
			Возврат; Прервать;
		ИначеЕсли XMLДокумент.ТипУзла = ТипУзлаXML.Текст Тогда
			Если СтрокаДерева.Количество() = 0 И СтрокаДерева.Родитель <> Неопределено Тогда
				СтрокаДерева.Родитель.ЗначениеXMLЭлементаДанных = XMLДокумент.Значение;
			Иначе
				НоваяСрокаДерева = СтрокаДерева.Добавить();
				НоваяСрокаДерева.ТипУзла = XMLДокумент.ТипУзла;
				НоваяСрокаДерева.ИмяXMLЭлементаДанных = XMLДокумент.Имя;
				НоваяСрокаДерева.ЗначениеXMLЭлементаДанных = XMLДокумент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//из модуля объекта конец

//заполняет таблицу событиями календаря
&НаКлиенте
Процедура ОбновитьСписок(Команда)
	//ЭлементыФормы.НадписьПериодПросмотра.Заголовок="Период: "+ПредставлениеПериода(НачПросмотр, КонПросмотр,"ФП = Истина");
	ПрочитатьСобытия();
КонецПроцедуры

//устанавливает некоторые реквизиты формы: логин, пароль, дату начала и GMT
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.НачПросмотр = НачалоДня(ТекущаяДата());
	Объект.ПоправкаGMT = 4;
КонецПроцедуры

//заполняет таблицу событиями календаря
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(Объект.Аккаунт) И ЗначениеЗаполнено(Объект.Пароль) Тогда
		ПрочитатьСобытия();
	КонецЕсли;
КонецПроцедуры

//обработчик кнпоки Выбор периода в ком панели таблицы
&НаКлиенте
Процедура ВыборПериода(Команда)
		
	ПеременнаяТипаСтандартныйПериод = Новый СтандартныйПериод;
	
	ПеременнаяТипаСтандартныйПериод.ДатаНачала = Объект.НачПросмотр;
	ПеременнаяТипаСтандартныйПериод.ДатаОкончания = Объект.КонПросмотр;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ПеременнаяТипаСтандартныйПериод;
	Если Диалог.Редактировать() Тогда 
	    ПеременнаяТипаСтандартныйПериод = Диалог.Период;
		
		Объект.НачПросмотр = ПеременнаяТипаСтандартныйПериод.ДатаНачала;
		Объект.КонПросмотр = ПеременнаяТипаСтандартныйПериод.ДатаОкончания;
		
		
	КонецЕсли; 
	
	ПрочитатьСобытия();
	
КонецПроцедуры

//обработчик кнпоки Найти
&НаКлиенте
Процедура НайтиНажатие(Команда)
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда 
		Предупреждение("Не указана строка поиска!",1);
		Возврат; 
	КонецЕсли;	
	
	ПараметрыПодключения=ПолучитьПараметрыПодключения();
	Если ПараметрыПодключения = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	пСтрокаПоиска=СтрокаПоиска;
	РезультатПолученияТзСобытия = ВыбратьСобытия(ПараметрыПодключения,,,ПолучитьEscapeПоследовательность(пСтрокаПоиска));		
	Если РезультатПолученияТзСобытия="" Тогда
		Объект.ТЗСобытий.Очистить();
		//Для каждого ТекСтрока Из РезультатПолученияТзСобытия Цикл
		Для каждого ТекСтрока Из ТЗСобытия Цикл
			НоваяСтрока = Объект.ТЗСобытий.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла; 
	Иначе			
		//Ошибка получения событий Календаря!!!
		Сообщить(РезультатПолученияТзСобытия);		
	КонецЕсли; 
КонецПроцедуры

//открывает форму Событие - для редактирования события (нового или существующего)
//Параметры:
//	Структ - структура, содержащая значения для реквизитов формы Событие
&НаКлиенте
Процедура Операция(Структ)
	
	Фрм = ПолучитьФорму("Обработка.КалендарьGOOGLE.Форма.Событие",Структ,ЭтаФорма);
	//Фрм.Объект = Объект;
	Рез = Фрм.ОткрытьМодально();
	
	Если Рез = "Запись" Тогда
		ПрочитатьСобытия();//обновить таблицу
	КонецЕсли;
КонецПроцедуры

//создает структуру, которую затем заполняет функция ЗаполнитьСтруктуруСобытия()
//для передачи этой структуры в форму Событие
//Параметры:
//	ТС - Текущие данные табличного поля формы
&НаКлиенте
Функция ПолучитьСтруктуруСобытия()
	
	Структ = Новый Структура;
	Структ.Вставить("ВесьДень", Неопределено);
	Структ.Вставить("НачПериода", Неопределено);
	Структ.Вставить("КонПериода", Неопределено);
	Структ.Вставить("Мероприятие", Неопределено);
	Структ.Вставить("Описание", Неопределено);
	Структ.Вставить("Место", Неопределено);
	Структ.Вставить("ФлагОперации", Неопределено);
	Структ.Вставить("Объект", Объект);
	Структ.Вставить("ЭтоНовый", Истина);
	
	Структ.Вставить("GdEtag", Неопределено);
	Структ.Вставить("LinkEditHref", Неопределено);
	Структ.Вставить("EntryId", Неопределено);
	
	Возврат Структ;
	
КонецФункции

//заполняет структуру данными, затем эта структура передается в форму Событие
//чтобы из нее заполнились реквизиты формы
//Параметры:
//	ТС - Текущие данные табличного поля формы
&НаКлиенте
Функция ЗаполнитьСтруктуруСобытия(Структ, ТС)
	
	Структ.ВесьДень = ТС.ВесьДень;
	Структ.НачПериода = ТС.StartTime;
	Структ.КонПериода = ТС.EndTime;
	Структ.Мероприятие = ТС.Title;
	Структ.Описание = ТС.Content;
	Структ.Место = ТС.GdWhere;
	
	Структ.GdEtag = ТС.GdEtag;
	Структ.LinkEditHref = ТС.LinkEditHref;
	Структ.EntryId = ТС.EntryId;
	
	Возврат Структ;
	
КонецФункции

//обработчик добавления события
&НаКлиенте
Процедура ДобавитьСобытие(Команда)
	
	Структ = ПолучитьСтруктуруСобытия();
	Структ.ФлагОперации="Создать";
	Операция(Структ);
	
КонецПроцедуры

//открытие события на редактирование по нажатию на кнопку редактирования в ком панели
&НаКлиенте
Процедура ИзменитьНажатие(Команда)
	Если Объект.ТЗСобытий.Количество()=0 Тогда
		Предупреждение("Нет событий для изменения!",1);
		Возврат;
	КонецЕсли;	
	ТС=Элементы.ТЗСобытий.ТекущиеДанные;
	Если ТС=Неопределено Тогда
		Предупреждение("Не выбрано событие для изменения!",1);
		Возврат;
	КонецЕсли;	
	
	Структ = ПолучитьСтруктуруСобытия();
	ЗаполнитьСтруктуруСобытия(Структ, ТС);
	Структ.ФлагОперации="Изменить";
	Структ.ЭтоНовый=Ложь;
	Операция(Структ);	
	
КонецПроцедуры

//обработчик удаления события
&НаКлиенте
Процедура УдалитьНажатие(Команда)
	Если Объект.ТЗСобытий.Количество()=0 Тогда
		Предупреждение("Нет событий для удаления!",1);
		Возврат;
	КонецЕсли;	
	ТС=Элементы.ТЗСобытий.ТекущиеДанные;	
	Если ТС=Неопределено Тогда
		Предупреждение("Не выбрано событие для удаления!",1);
		Возврат;
	КонецЕсли;	
	
	Ответ = Вопрос("Вы действительно желаете удалить текущее событие?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе		
		ПараметрыПодключения=ПолучитьПараметрыПодключения();
		Если ПараметрыПодключения = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		пТекущееСобытие=Элементы.ТЗСобытий.ТекущаяСтрока;
		
		Событие=Новый Структура("LinkEditHref,GdEtag,EntryId,Title");
		ЗаполнитьЗначенияСвойств(Событие, Элементы.ТЗСобытий.ТекущиеДанные);		
		
		РезультатПолученияТзСобытия = УдалитьСобытие(ПараметрыПодключения,Событие);		
		Если РезультатПолученияТзСобытия="ОК" Тогда
			ПоискСтроки = Объект.ТЗСобытий.НайтиПоИдентификатору(пТекущееСобытие);
			Индекс = Объект.ТЗСобытий.Индекс(ПоискСтроки);
			Объект.ТЗСобытий.Удалить(Индекс);	
		Иначе
			Сообщить(РезультатПолученияТзСобытия);		
		КонецЕсли; 			
	КонецЕсли;

КонецПроцедуры

//открытие события на редактирование по дабл клику в таблице
&НаКлиенте
Процедура ТЗСобытийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИзменитьНажатие(Неопределено);
КонецПроцедуры

//обработчик копирования события
&НаКлиенте
Процедура СкопироватьНажатие(Команда)
	Если Объект.ТЗСобытий.Количество()=0 Тогда
		Предупреждение("Нет событий для копирования!",1);
		Возврат;
	КонецЕсли;	
	ТС=Элементы.ТЗСобытий.ТекущиеДанные;
	Если ТС=Неопределено Тогда
		Предупреждение("Не выбрано событие для копирования!",1);
		Возврат;
	КонецЕсли;	
	
	Структ = ПолучитьСтруктуруСобытия();
	ЗаполнитьСтруктуруСобытия(Структ, ТС);
	Структ.ФлагОперации="Копировать";
	
	Структ.GdEtag = Неопределено;
	Структ.LinkEditHref = Неопределено;
	Структ.EntryId = Неопределено;
	
	Структ.ЭтоНовый=Истина;
	Операция(Структ);
КонецПроцедуры

//дополняет строку нулями
&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьНулямиСлева(Знач Парам, НужнаяДлина)
	Парам = Строка(Парам);
	ТекДлина = СтрДлина(Парам);
	КолвоНулей = НужнаяДлина - ТекДлина;
	Рез = "";
	Для сч = 1 по КолвоНулей Цикл
		Рез = Рез + "0";
	КонецЦикла;
	Возврат Рез+Парам;
	
КонецФункции




