
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Математический
	Обрезание = ?(Обрезание="", "2", Обрезание);
	Округление = ?(Округление="", "5/4", Округление);
	ОкноВвода = ?(ОкноВвода="", "0", ОкноВвода);
	Память = ?(Память="", "0", Память);
	Память1 = ?(Память1="", "0", Память1);
	Результат = ?(Результат="", "0", Результат);
	
	//Дисконтирование
	Объект.МетодРасчета  = ?(ЗначениеЗаполнено(Объект.МетодРасчета), Объект.МетодРасчета, "Сложные");
	Объект.СрокЛет = ?(Объект.СрокЛет=0, 50, Объект.СрокЛет);
	Объект.Ставка = ?(Объект.Ставка=0, 10, Объект.Ставка);
	РасчетМножителяДисконтирования();
	
	Объект.Вычислять = ?(ЗначениеЗаполнено(Объект.Вычислять), Объект.Вычислять, "ВычКонечной");
	УстановитьФлагиВычисления();
	
	//Уравнение
	//СтрокаУравнения.Добавить(Уравнение);
	
	Если ТекСтраница = 1 Тогда
		Элементы.Типы.ТекущаяСтраница = Элементы.Математический;
	ИначеЕсли ТекСтраница = 2 Тогда
		Элементы.Типы.ТекущаяСтраница = Элементы.Дисконтный;
	ИначеЕсли ТекСтраница = 3 Тогда
		Элементы.Типы.ТекущаяСтраница = Элементы.Уравнение;
	ИначеЕсли ТекСтраница = 4 Тогда
		Элементы.Типы.ТекущаяСтраница = Элементы.Общак;
	Иначе
		ТекСтраница = 2;
		Элементы.Типы.ТекущаяСтраница = Элементы.Дисконтный;
	КонецЕсли;
	
	//Чтобы не перехватывались кнопки математическим кальком в режиме других калькуляторов, скрываем группу кнопок
	Если Элементы.Типы.ТекущаяСтраница <> Элементы.Математический Тогда
		Элементы.Стереть.Видимость = Ложь;
		Элементы.ГруппаКнопок.Видимость = Ложь;
		Элементы.КнопкиОбщаяГруппа.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Элементы.Типы.ТекущаяСтраница = Элементы.Математический И (ОкноВвода <> "0" ИЛИ История <> "") Тогда
		Отказ = Истина;
		Clear();
	КонецЕсли;
	//Уравнение = СтрокаУравнения.ПолучитьТекст();
КонецПроцедуры

&НаКлиенте
Процедура ТипыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//Чтобы не перехватывались кнопки математическим кальком в режиме дисконтного калькулятора, скрываем группу кнопок
	Если ТекущаяСтраница = Элементы.Математический Тогда
		Элементы.Стереть.Видимость = Истина;
		Элементы.ГруппаКнопок.Видимость = Истина;
		Элементы.КнопкиОбщаяГруппа.Видимость = Истина;
		ТекСтраница = 1;
		КнопкаПоУмолчанию();
	Иначе
		Если ТекущаяСтраница = Элементы.Уравнение Тогда
			ТекСтраница = 3;
		ИначеЕсли ТекущаяСтраница = Элементы.Общак Тогда
			//ТекСтраница = 4; //Не буду сохранять эту страницу, пусть открывается та, которая была ДО нее
		Иначе
			ТекСтраница = 2;
		КонецЕсли;
		Элементы.Стереть.Видимость = Ложь;
		Элементы.ГруппаКнопок.Видимость = Ложь;
		Элементы.КнопкиОбщаяГруппа.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры


//МАТЕМАТИЧЕСКИЙ калькулятор
//Доработать:
//	если быстро набивать "назначенные" клавиши, порядок путаецца
//	и когда комп "думает", символы съедаются

&НаСервере
Функция ВернутьПоследнееДействие(Очистка)
	Если ИсторияДействий.Количество()=0 Тогда
		Очистка = Ложь;
		Возврат Неопределено;
	Иначе
		Действие = ИсторияДействий[ИсторияДействий.Количество()-1];
		Очистка = Действие.Очистить;
		Возврат Действие.Действие;
	КонецЕсли;
КонецФункции

&НаСервере
Функция Округление(Значение)
	Если Обрезание = "F" Тогда
		Возврат Значение;
	Иначе
		ВременныйМножитель = 1;
		Для н=1 По Число(Обрезание) Цикл
			ВременныйМножитель = ВременныйМножитель * 10;
		КонецЦикла;
		
		Если Округление = "cut" Тогда
			Возврат Цел(Значение*ВременныйМножитель)/ВременныйМножитель;
		ИначеЕсли Округление = "up" Тогда
			Если Окр(Значение, Число(Обрезание))<>Число(Значение) Тогда
				Возврат (Цел(Значение*ВременныйМножитель)+1)/ВременныйМножитель;
			Иначе
				Возврат Значение;
			КонецЕсли;
		Иначе
			Возврат Окр(Значение, Число(Обрезание));
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВысчитатьРезультат(Сумма, Действие, ПоследнееДействие, ПредПоследнееДействие="", Очистить=Ложь)
	//Процедура работает с "запаздыванием", считая "прошлое" действие, а инициирует этот подсчет текущее действие
 	ОкноВводаПродолжить = Ложь;
    ВремРезультат = "0";
	
	Если Очистить Тогда
		ПоследнееДействие = Неопределено;
	КонецЕсли;
	
	Если ПоследнееДействие = Неопределено Тогда
		История = "";
 		ИсторияДействий.Очистить();
   		ВремРезультат = Сумма;
	ИначеЕсли ПоследнееДействие = "=" Тогда
    	ВремРезультат = Сумма;//Округление(Сумма);
	ИначеЕсли ПоследнееДействие = "+" Тогда
    	ВремРезультат = Округление(Число(Результат) + Сумма);
	ИначеЕсли ПоследнееДействие = "-" Тогда
    	ВремРезультат = Округление(Число(Результат) - Сумма);
	ИначеЕсли ПоследнееДействие = "*" Тогда
    	ВремРезультат = Округление(Число(Результат) * Сумма);
	ИначеЕсли ПоследнееДействие = "/" Тогда
    	ВремРезультат = Округление(Число(Результат) / Сумма);
	ИначеЕсли ПоследнееДействие = "%" Тогда
		Если ПредПоследнееДействие = "+" Тогда
    		ВремРезультат = Округление(Число(Результат) * (1+Сумма/100));
		ИначеЕсли ПредПоследнееДействие = "-" Тогда
    		ВремРезультат = Округление(Число(Результат) * (1-Сумма/100));
		ИначеЕсли ПредПоследнееДействие = "*" Тогда
    		ВремРезультат = Округление(Число(Результат) / 100 * Сумма);
		ИначеЕсли ПредПоследнееДействие = "/" Тогда
    		ВремРезультат = Округление(Число(Результат) / Сумма * 100);
		Иначе //Неправильные действия пользователя
			ПредПоследнееДействие = "Error";
    		ВремРезультат = Округление(Число(Результат));
		КонецЕсли;
	ИначеЕсли ПоследнееДействие = "√" Тогда
		Итог = Округление(Pow(Число(Результат), 1/Сумма));
		
		ДлинаСтроки = СтрДлина(История);
		Для Ном=0 По ДлинаСтроки Цикл
			Знак = Сред(История, ДлинаСтроки-Ном, 1);
		 	Если Знак="√" Тогда
				История = Лев(История, ДлинаСтроки-Ном-1) + Формат(Сумма, "ЧРД=,; ЧН=0; ЧГ=3,0") + Сред(История, ДлинаСтроки-Ном);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОкноВвода = Формат(Число(Итог), "ЧРД=,; ЧН=0; ЧГ=3,0");
		
		Если Действие <> "=" Тогда
			нДействие = ИсторияДействий.Добавить();
			нДействие.Действие = "=";
			нДействие.Сумма = Формат(Число(Сумма), "ЧРД=,; ЧН=0; ЧГ=0");
		КонецЕсли;
    	ВремРезультат = Итог;
	ИначеЕсли ПоследнееДействие = "MU" Тогда
		Если ПредПоследнееДействие = "+" Тогда
    		ВремРезультат = Округление(100 * (Число(Результат) / Сумма + 1));
		ИначеЕсли ПредПоследнееДействие = "-" Тогда
    		ВремРезультат = Округление(100 * (Число(Результат) / Сумма - 1));
		ИначеЕсли ПредПоследнееДействие = "*" Тогда
    		ВремРезультат = Округление(Число(Результат) * (1 + Сумма/100));
		ИначеЕсли ПредПоследнееДействие = "/" Тогда
    		ВремРезультат = Округление(Число(Результат) / (1 - Сумма/100));
		Иначе //Неправильные действия пользователя
			ПредПоследнееДействие = "Error";
    		ВремРезультат = Округление(Число(Результат));
		КонецЕсли;
	КонецЕсли;
	
	Если Действие = "=" Тогда
		История = История + ?(ПоследнееДействие="√" ИЛИ ПоследнееДействие = "=" ИЛИ ПоследнееДействие = "%" ИЛИ ПоследнееДействие = "MU", "", Формат(Число(Сумма), "ЧРД=,; ЧН=0; ЧГ=3,0")) + " = " + Формат(Число(ВремРезультат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	ИначеЕсли Действие = "+" Тогда
		История = История + ?(ПоследнееДействие="√" ИЛИ ПоследнееДействие = "=" ИЛИ ПоследнееДействие = "%" ИЛИ ПоследнееДействие = "MU", "", Формат(Число(Сумма), "ЧРД=,; ЧН=0; ЧГ=3,0")) + " + ";
	ИначеЕсли Действие = "-" Тогда
		История = История + ?(ПоследнееДействие="√" ИЛИ ПоследнееДействие = "=" ИЛИ ПоследнееДействие = "%" ИЛИ ПоследнееДействие = "MU", "", Формат(Число(Сумма), "ЧРД=,; ЧН=0; ЧГ=3,0")) + " - ";
	ИначеЕсли Действие = "*" Тогда
		История = История + ?(ПоследнееДействие="√" ИЛИ ПоследнееДействие = "=" ИЛИ ПоследнееДействие = "%" ИЛИ ПоследнееДействие = "MU", "", Формат(Число(Сумма), "ЧРД=,; ЧН=0; ЧГ=3,0")) + " * ";
	ИначеЕсли Действие = "/" Тогда
		История = История + ?(ПоследнееДействие="√" ИЛИ ПоследнееДействие = "=" ИЛИ ПоследнееДействие = "%" ИЛИ ПоследнееДействие = "MU", "", Формат(Число(Сумма), "ЧРД=,; ЧН=0; ЧГ=3,0")) + " / ";
		
	ИначеЕсли Действие = "%" Тогда
		История = История + Формат(Число(Сумма), "ЧРД=,; ЧН=0; ЧГ=3,0") + " % = " + Формат(Число(ВремРезультат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	ИначеЕсли Действие = "√" Тогда
		История = История + ?(ПоследнееДействие="√" ИЛИ ПоследнееДействие = "=" ИЛИ ПоследнееДействие = "%" ИЛИ ПоследнееДействие = "MU", "", ?(ПустаяСтрока(История), "", Формат(Число(Сумма), "ЧРД=,; ЧН=0; ЧГ=3,0")+ " = ")) +"√ " + Формат(Число(ВремРезультат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	ИначеЕсли Действие = "MU" Тогда
		История = История + ?(ПоследнееДействие="√" ИЛИ ПоследнееДействие = "=" ИЛИ ПоследнееДействие = "%" ИЛИ ПоследнееДействие = "MU", "", Формат(Число(Сумма), "ЧРД=,; ЧН=0; ЧГ=3,0")) + " (MU) = " + Формат(Число(ВремРезультат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	Иначе
		ОкноВвода = "Calculating error";
	КонецЕсли;
	
	Возврат ВремРезультат;
КонецФункции

&НаСервере
Процедура ПересчитатьРезультат()
	Результат = "0";
	Очистить = Истина;
	ПредПредыдущееДействие = Неопределено;
	ПредыдущееДействие = Неопределено;
	ВремИсторияДействий = ИсторияДействий.Выгрузить();
	Для Каждого ОчередноеДействие Из ВремИсторияДействий Цикл
		Считать = Истина;
		Если ПредыдущееДействие = "=" Тогда
			ОчередноеДействие.Сумма = Формат(Число(ОкноВвода), "ЧРД=,; ЧН=0; ЧГ=0");
		ИначеЕсли ПредыдущееДействие = "%" И ОчередноеДействие.Действие = "=" Тогда
			ОчередноеДействие.Сумма = Формат(Число(ОкноВвода), "ЧРД=,; ЧН=0; ЧГ=0");
			Считать = Ложь;
		ИначеЕсли ПредыдущееДействие = "MU" И ОчередноеДействие.Действие = "=" Тогда
			ОчередноеДействие.Сумма = Формат(Число(ОкноВвода), "ЧРД=,; ЧН=0; ЧГ=0");
			Считать = Ложь;
		КонецЕсли;
		
		Если Считать Тогда
			Если ОчередноеДействие.Действие = "%" ИЛИ ОчередноеДействие.Действие = "MU" Тогда
				Результат = ВысчитатьРезультат(?(ОчередноеДействие.Сумма="", "0", Число(ОчередноеДействие.Сумма)), ОчередноеДействие.Действие, ОчередноеДействие.Действие, ПредыдущееДействие, Очистить);
			Иначе
				Результат = ВысчитатьРезультат(?(ОчередноеДействие.Сумма="", "0", Число(ОчередноеДействие.Сумма)), ОчередноеДействие.Действие, ПредыдущееДействие, ПредПредыдущееДействие, Очистить);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьДействие(ОчередноеДействие.Сумма, ОчередноеДействие.Действие, ОчередноеДействие.Очистить);
		
		ПредПредыдущееДействие = ПредыдущееДействие;
		ПредыдущееДействие = ОчередноеДействие.Действие;
		Очистить = ОчередноеДействие.Очистить;
		
		ОкноВвода = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	КонецЦикла;
	
КонецПроцедуры


//------------Кнопочки-------------
&НаСервере
Процедура ВводЦифры(Цифра)
	ВремОкноВвода = СокрЛП(ОкноВвода);
	
	Если ОкноВводаПродолжить = Истина Тогда
		ВремОкноВвода = ВремОкноВвода + Цифра;
	Иначе
		ВремОкноВвода = Цифра;
		ОкноВводаПродолжить = Истина;
	КонецЕсли;
	
	//Уберу предшествующие нули
	Пока Лев(ВремОкноВвода, 1)="0" И СтрДлина(ВремОкноВвода)>1 И Сред(ВремОкноВвода, 2, 1)<>"," Цикл
		ВремОкноВвода = Сред(ВремОкноВвода,2);
	КонецЦикла;
	
	//Сделаю форматирование с сохранение нулей в дробной части
	ПозицияРазделителя = Найти(ВремОкноВвода,",");
	Если ПозицияРазделителя>0 Тогда
		Точность = ?(ПозицияРазделителя=0, 0, СтрДлина(ВремОкноВвода) - ПозицияРазделителя);
		ОкноВвода = Формат(Цел(Число(ВремОкноВвода)), "ЧН=0; ЧГ=3,0")+Сред(ВремОкноВвода, ПозицияРазделителя);
	Иначе
		ОкноВвода = Формат(Цел(Число(ВремОкноВвода)), "ЧН=0; ЧГ=3,0");
	КонецЕсли;
	
	Очистка = Ложь;
	ВернутьПоследнееДействие(Очистка);
	Если Очистка Тогда
		ИсторияДействий.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроек(Элемент)
	ПересчитатьРезультат();
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПоУмолчанию()
	этаформа.ТекущийЭлемент = Элементы.ДействиеРавно;
КонецПроцедуры

&НаКлиенте
Процедура AllClear()
	Память = "0";
	Память1 = "0";
	
	Clear();
КонецПроцедуры

&НаКлиенте
Процедура Clear(КнопкаПоУмолчание=Истина)
	История = "";
	ОкноВвода = "0";
	Результат = "0";
	ИсторияДействий.Очистить();
	
 	ОкноВводаПродолжить = Ложь;
	
	Если КнопкаПоУмолчание<>Ложь Тогда
		КнопкаПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ClearНажатие(Команда)
	Clear();
КонецПроцедуры

&НаКлиенте
Процедура Стереть(Команда)
	Если ОкноВводаПродолжить = Истина Тогда
		ОкноВвода = Лев(ОкноВвода, СтрДлина(СокрЛП(ОкноВвода))-1);
		
		Если ПустаяСтрока(ОкноВвода) Тогда
			ОкноВвода = "0";
		КонецЕсли;
	Иначе
		ОкноВвода = "0";
	КонецЕсли;
	
	//Сделаю форматирование с сохранение нулей в дробной части
	ВремОкноВвода = ОкноВвода;
	ПозицияРазделителя = Найти(ВремОкноВвода,",");
	Если ПозицияРазделителя>0 Тогда
		Точность = ?(ПозицияРазделителя=0, 0, СтрДлина(ВремОкноВвода) - ПозицияРазделителя);
		ОкноВвода = Формат(Цел(Число(ВремОкноВвода)), "ЧН=0; ЧГ=3,0")+Сред(ВремОкноВвода, ПозицияРазделителя);
	Иначе
		ОкноВвода = Формат(Цел(Число(ВремОкноВвода)), "ЧН=0; ЧГ=3,0");
	КонецЕсли;
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРазделитель(Команда)
	Если ОкноВводаПродолжить = Истина Тогда
		ОкноВвода = ОкноВвода+",";
	Иначе
		ОкноВвода = "0,";
		ОкноВводаПродолжить = Истина;
	КонецЕсли;
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ПлюсМинус(Команда)
	Если Найти(ОкноВвода, "-") = 0 Тогда
		ОкноВвода = "-" + ОкноВвода;
	Иначе
		ОкноВвода = СтрЗаменить(ОкноВвода, "-", "");
	КонецЕсли;
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка0(Команда)
	ВводЦифры("0");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка000(Команда)
	ВводЦифры("000");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка1(Команда)
	ВводЦифры("1");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка2(Команда)
	ВводЦифры("2");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка3(Команда)
	ВводЦифры("3");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка4(Команда)
	ВводЦифры("4");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка5(Команда)
	ВводЦифры("5");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка6(Команда)
	ВводЦифры("6");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка7(Команда)
	ВводЦифры("7");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка8(Команда)
	ВводЦифры("8");
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Кнопка9(Команда)
	ВводЦифры("9");
	КнопкаПоУмолчанию();
КонецПроцедуры
//------------Кнопочки-------------


//------------Действия-------------
&НаСервере
Процедура ДобавитьДействие(ВведенноеЧисло, Действие, Очистить=Ложь)
	Если ВведенноеЧисло = "" Тогда
		ВведенноеЧисло = "0";
	КонецЕсли;
	
	НовоеДействие = ИсторияДействий.Добавить();
	НовоеДействие.Сумма = Формат(Число(ВведенноеЧисло), "ЧРД=,; ЧН=0; ЧГ=0");
	НовоеДействие.Действие = Действие;
	НовоеДействие.Очистить = Очистить;
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРавно()  //Нажат =; считаем по прошлому действию результат, выводим его, в истории это действие конечное
	Очистка = Ложь;
	ПоследнееДействие = ВернутьПоследнееДействие(Очистка);
	Если ПоследнееДействие = Неопределено
		ИЛИ ПоследнееДействие = "=" Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДействие(ОкноВвода, "=", Истина);
	
	Результат = Формат(ВысчитатьРезультат(Число(ОкноВвода), "=", ПоследнееДействие, , Очистка), "ЧРД=,; ЧН=0; ЧГ=0");
	
	ОкноВвода = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСложение()  //Нажат +; считаем прошлое действие и на экране выводим результат, а в истории запоминаем действие "+" и ждем продолжения
	Очистка = Ложь;
	ПоследнееДействие = ВернутьПоследнееДействие(Очистка);
	Результат = Формат(ВысчитатьРезультат(Число(ОкноВвода), "+", ПоследнееДействие, , Очистка), "ЧРД=,; ЧН=0; ЧГ=0");
	
	ДобавитьДействие(ОкноВвода, "+");
	
	ОкноВвода = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВычитание()   //Нажат -; считаем прошлое действие и на экране выводим результат, а в истории запоминаем действие "-" и ждем продолжения
	Очистка = Ложь;
	ПоследнееДействие = ВернутьПоследнееДействие(Очистка);
	Результат = Формат(ВысчитатьРезультат(Число(ОкноВвода), "-", ПоследнееДействие, , Очистка), "ЧРД=,; ЧН=0; ЧГ=0");
	
	ДобавитьДействие(ОкноВвода, "-");
	
	ОкноВвода = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеУмножение()   //Нажат *; считаем прошлое действие и на экране выводим результат, а в истории запоминаем действие "*" и ждем продолжения
	Очистка = Ложь;
	ПоследнееДействие = ВернутьПоследнееДействие(Очистка);
	Результат = Формат(ВысчитатьРезультат(Число(ОкноВвода), "*", ПоследнееДействие, , Очистка), "ЧРД=,; ЧН=0; ЧГ=0");
	
	ДобавитьДействие(ОкноВвода, "*");
	
	ОкноВвода = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеДеление()  //Нажат /; считаем прошлое действие и на экране выводим результат, а в истории запоминаем действие "/" и ждем продолжения
	Очистка = Ложь;
	ПоследнееДействие = ВернутьПоследнееДействие(Очистка);
	Результат = Формат(ВысчитатьРезультат(Число(ОкноВвода), "/", ПоследнееДействие, , Очистка), "ЧРД=,; ЧН=0; ЧГ=0");
	
	ДобавитьДействие(ОкноВвода, "/");
	
	ОкноВвода = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПроцент()  //Нажат %; считаем по прошлому действию результат, выводим его, в истории это действие конечное, т.е. как "="
	Очистка = Ложь;
	ПредПоследнееДействие = ВернутьПоследнееДействие(Очистка);
	ДобавитьДействие(ОкноВвода, "%");
	
	Результат = Формат(ВысчитатьРезультат(Число(ОкноВвода), "%", "%", ПредПоследнееДействие, Очистка), "ЧРД=,; ЧН=0; ЧГ=0");
	
	Если ПредПоследнееДействие = "Error" Тогда
 		ОкноВводаПродолжить = Истина;
		Возврат;
	КонецЕсли;
	
	ОкноВвода = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	
	нДействие = ИсторияДействий.Добавить();
	нДействие.Действие = "=";
	нДействие.Сумма = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=0");
	нДействие.Очистить = Истина;
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеКорень()  //Нажат корешок; считаем прошлое действие, ожидаем ввод степени корня для расчета
	Очистка = Ложь;
	ПоследнееДействие = ВернутьПоследнееДействие(Очистка);
	Результат = Формат(ВысчитатьРезультат(Число(ОкноВвода), "√", ПоследнееДействие, , Очистка), "ЧРД=,; ЧН=0; ЧГ=0");
	
	ДобавитьДействие(ОкноВвода, "√");
	
	ОкноВвода = НСтр("ru = 'Введите степень'; en = 'Enter rate'");
 	ОкноВводаПродолжить = Ложь;
	
	КнопкаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеMarkUp(Команда)  //Нажат MU; считаем по прошлому действию результат, выводим его, в истории это действие конечное, т.е. как "=" или "%"
	Очистка = Ложь;
	ПредПоследнееДействие = ВернутьПоследнееДействие(Очистка);
	ДобавитьДействие(ОкноВвода, "MU");
	
	Результат = Формат(ВысчитатьРезультат(Число(ОкноВвода), "MU", "MU", ПредПоследнееДействие, Очистка), "ЧРД=,; ЧН=0; ЧГ=0");
	
	Если ПредПоследнееДействие = "Error" Тогда
 		ОкноВводаПродолжить = Истина;
		Возврат;
	КонецЕсли;
	
	ОкноВвода = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=3,0");
	
	нДействие = ИсторияДействий.Добавить();
	нДействие.Действие = "=";
	нДействие.Сумма = Формат(Число(Результат), "ЧРД=,; ЧН=0; ЧГ=0");
	нДействие.Очистить = Истина;
	
	КнопкаПоУмолчанию();
КонецПроцедуры
//------------Действия-------------


//------------Память-------------
&НаКлиенте
Процедура MВывести(Команда)
	ОкноВвода = Формат(Число(Память), "ЧРД=,; ЧН=0; ЧГ=3,0");
КонецПроцедуры

&НаКлиенте
Процедура MОчистить(Команда)
	Память = "0";
КонецПроцедуры

&НаКлиенте
Процедура MМинус(Команда)
	Память = Формат(Число(Память) - Число(ОкноВвода), "ЧРД=,; ЧН=0; ЧГ=3,0");
КонецПроцедуры

&НаКлиенте
Процедура MПлюс(Команда)
	Память = Формат(Число(Память) + Число(ОкноВвода), "ЧРД=,; ЧН=0; ЧГ=3,0");
КонецПроцедуры

&НаКлиенте
Процедура MВывести1(Команда)
	ОкноВвода = Формат(Число(Память1), "ЧРД=,; ЧН=0; ЧГ=3,0");
КонецПроцедуры

&НаКлиенте
Процедура MОчистить1(Команда)
	Память1 = "0";
КонецПроцедуры

&НаКлиенте
Процедура MМинус1(Команда)
	Память1 = Формат(Число(Память1) - Число(ОкноВвода), "ЧРД=,; ЧН=0; ЧГ=3,0");
КонецПроцедуры

&НаКлиенте
Процедура MПлюс1(Команда)
	Память1 = Формат(Число(Память1) + Число(ОкноВвода), "ЧРД=,; ЧН=0; ЧГ=3,0");
КонецПроцедуры
//------------Память-------------



//ДИСКОНТНЫЙ калькулятор
&НаСервере
Процедура УстановитьЦвет(ИмяЭлемента, Реквизит="", Значение="")
	ТекстКрасного = НСтр("ru = ' <СУММА ОКРУГЛЕНА>'; en = ' <SUM ROUNDED>'");
	Если Реквизит <> Значение Тогда
		Элементы[ИмяЭлемента].ЦветТекста = Новый Цвет(255, 0, 0);
		Элементы[ИмяЭлемента].Подсказка = СтрЗаменить(Элементы[ИмяЭлемента].Подсказка, ТекстКрасного, "") + ТекстКрасного;
	Иначе
		Элементы[ИмяЭлемента].ЦветТекста = Новый Цвет();
		Элементы[ИмяЭлемента].Подсказка = СтрЗаменить(Элементы[ИмяЭлемента].Подсказка, ТекстКрасного, "");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодическиеПлатежи()
	Если Объект.ТаблицаПлатежей.Количество()<>0 Тогда
		
		ВремТаблица = Объект.ТаблицаПлатежей.Выгрузить(, "Платеж");
		Конечный 	= ВремТаблица[Объект.ТаблицаПлатежей.Количество()-1].Платеж;
		ВремТаблица.Удалить(ВремТаблица.Количество()-1); //Удаляем закрывающий платеж
		ВремТаблица.Сортировать("Платеж");
		Min			= ВремТаблица[0].Платеж;
		Max			= ВремТаблица[ВремТаблица.Количество()-1].Платеж;
		
		ПериодическиеПлатежи = Формат(Min,"ЧДЦ=2; ЧН=0; ЧГ=0; ЧО=0")
								+ ?(Min=Max, "", " - " + Формат(Max,"ЧДЦ=2; ЧН=0; ЧГ=0; ЧО=0"))
								+ ?(Конечный=0 ИЛИ Конечный=Min, "", "; "
								+ Формат(Конечный,"ЧДЦ=2; ЧН=0; ЧГ=0; ЧО=0"));
	Иначе
		ПериодическиеПлатежи = НСтр("ru = '<не расчитан>'; en = '<not calculated>'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиВычисления()
	
	Если Объект.Вычислять = "ВычСрока" Тогда
		ВычСрока 		= Истина;
		ВычСтавки		= Ложь;
		ВычНачальной	= Ложь;
		ВычКонечной		= Ложь;
	ИначеЕсли Объект.Вычислять = "ВычСтавки" Тогда
		ВычСрока 		= Ложь;
		ВычСтавки		= Истина;
		ВычНачальной	= Ложь;
		ВычКонечной		= Ложь;
	ИначеЕсли Объект.Вычислять = "ВычНачальной" Тогда
		ВычСрока 		= Ложь;
		ВычСтавки		= Ложь;
		ВычНачальной	= Истина;
		ВычКонечной		= Ложь;
	ИначеЕсли Объект.Вычислять = "ВычКонечной" Тогда
		ВычСрока 		= Ложь;
		ВычСтавки		= Ложь;
		ВычНачальной	= Ложь;
		ВычКонечной		= Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РасчетМножителяДисконтирования(ТолькоЗаполнитьТаблицу = Ложь)
	Если НЕ ТолькоЗаполнитьТаблицу Тогда
		Объект.Срок = Объект.СрокЛет*?(Объект.НачислятьПомесячно,12,1);
		УстановитьЦвет("СрокЛет");
		УстановитьЦвет("Срок", Объект.Срок, Объект.СрокЛет*?(Объект.НачислятьПомесячно,12,1));
	КонецЕсли;
	
	Объект.ТаблицаПлатежей.Очистить();
	
	Если Объект.МетодРасчета  = "Сложные" Тогда
		МноВрем = Pow(1 + Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1), Объект.Срок);
		
		ОстатокТела = Объект.СуммаНачальная;
		//В течении всего срока ничего не платим и в конце закрываем все
		Для н = 1 По Объект.Срок Цикл   // От первого к последнему
			ПроцентПлатежа = Pow(1 + Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1), н);
			
			НоваяСтрока = Объект.ТаблицаПлатежей.Добавить();
			НоваяСтрока.ОстатокТела		= Объект.СуммаНачальная*ПроцентПлатежа;
			НоваяСтрока.СуммаПроцентов	= НоваяСтрока.ОстатокТела - ОстатокТела;
			Если н = Объект.Срок Тогда  //Последний
				НоваяСтрока.Платеж = НоваяСтрока.ОстатокТела;
				НоваяСтрока.ОстатокТела = 0;
			КонецЕсли;
			ОстатокТела = НоваяСтрока.ОстатокТела;
		КонецЦикла;
	ИначеЕсли Объект.МетодРасчета  = "СПропорциональнымПогашением" Тогда
		МноВрем = 1;
		ПериодическоеПогашение = Окр(Объект.СуммаНачальная/Объект.Срок, 2);
		СтавкаПроцентов = Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1);
		Для н = 1 По Объект.Срок Цикл  
			
			ПроцентПлатежа = СтавкаПроцентов/Объект.Срок*(Объект.Срок-н+1);
			МноВрем = МноВрем + ПроцентПлатежа;
			
			//В каждом периоде погашаем % и пропорциональную часть тела
			НоваяСтрока = Объект.ТаблицаПлатежей.Добавить();
			НоваяСтрока.ОстатокТела		= Объект.СуммаНачальная - ПериодическоеПогашение*н;
			НоваяСтрока.СуммаПроцентов	= Окр(Объект.СуммаНачальная*ПроцентПлатежа, 2);
			НоваяСтрока.Платеж 			= ПериодическоеПогашение + НоваяСтрока.СуммаПроцентов;
		КонецЦикла;
	ИначеЕсли Объект.МетодРасчета  = "ПогашениеРавнымиПлатежами" Тогда
		МноВрем = 0; ПроцентПогашенности = 0;
		СтавкаПроцентов = Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1);
		
		ЕжемесячныйПлатеж = СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов,-(Объект.Срок)));
		Для н = 1 По Объект.Срок Цикл   // От первого к последнему
			ПроцентПлатежа = СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов, -(Объект.Срок-н+1)))*(1 - ПроцентПогашенности);
			МноВрем = МноВрем + ПроцентПлатежа;
			
			//Периодные платежи одинаковые
			НоваяСтрока = Объект.ТаблицаПлатежей.Добавить();
			НоваяСтрока.СуммаПроцентов	= Объект.СуммаНачальная*(ПроцентПлатежа - (1-ПроцентПогашенности) + (1-(ПроцентПогашенности+ЕжемесячныйПлатеж-СтавкаПроцентов*(1-ПроцентПогашенности))));
			НоваяСтрока.Платеж 			= Окр(Объект.СуммаНачальная*ПроцентПлатежа,2);
			
			ПроцентПогашенности = ПроцентПогашенности + ЕжемесячныйПлатеж - СтавкаПроцентов*(1-ПроцентПогашенности);
			НоваяСтрока.ОстатокТела		= Объект.СуммаНачальная*(1 - ПроцентПогашенности);
		КонецЦикла;
	Иначе   // простые или не заполнено
		МноВрем = 1 + Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1)* Объект.Срок ;
		
		//В каждом периоде платим только % и в конце периода закрываем всю сумму
		Для н = 1 По Объект.Срок Цикл   // От первого к последнему
			НоваяСтрока = Объект.ТаблицаПлатежей.Добавить();
			НоваяСтрока.ОстатокТела		= Объект.СуммаНачальная;
			НоваяСтрока.СуммаПроцентов	= Окр(Объект.СуммаНачальная*Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1),2);
			Если н = Объект.Срок Тогда  //Последний
				НоваяСтрока.Платеж = Объект.СуммаНачальная + НоваяСтрока.СуммаПроцентов;
				НоваяСтрока.ОстатокТела = 0;
			Иначе
				НоваяСтрока.Платеж = НоваяСтрока.СуммаПроцентов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УстановитьПериодическиеПлатежи();
	
	Если НЕ ТолькоЗаполнитьТаблицу Тогда
		МножительДисконтирования = Макс(МноВрем, 1);
		
		УстановитьЦвет("МножительДисконтирования", Цел(МножительДисконтирования*100)/100, МноВрем);
		УстановитьЦвет("Ставка");
	КонецЕсли;
КонецПроцедуры

//-------

&НаКлиенте
Процедура СуммаНачальнаяПриИзменении(Элемент)
	УстановитьЦвет("СуммаНачальная");
	Пересчет();
КонецПроцедуры

&НаКлиенте
Процедура СуммаКонечнаяПриИзменении(Элемент)
	УстановитьЦвет("СуммаКонечная");
	Пересчет();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВычислением(Элемент)
	
	Объект.Вычислять = Элемент.Имя;
	
	УстановитьФлагиВычисления();
КонецПроцедуры

&НаКлиенте
Процедура СрокЛетПриИзменении(Элемент)
	
	Пересчет();
КонецПроцедуры

&НаКлиенте
Процедура НачислятьПомесячноПриИзменении(Элемент)
	
	Пересчет();
КонецПроцедуры

&НаКлиенте
Процедура СтавкаПриИзменении(Элемент)
	
	Пересчет();
КонецПроцедуры

&НаКлиенте
Процедура ВыборМетодаРасчетаПриИзменении(Элемент)
	
	Пересчет();
КонецПроцедуры

//---------

&НаКлиенте
Процедура Пересчет()
	
	Если ВычНачальной Тогда
		РасчетМножителяДисконтирования();
		Объект.СуммаНачальная = Объект.СуммаКонечная / МножительДисконтирования;
		УстановитьЦвет("СуммаНачальная", Объект.СуммаНачальная, Объект.СуммаКонечная / МножительДисконтирования);
		
		УстановитьЦвет("СуммаКонечная");
		
		Clear(Ложь);
		ОкноВвода = Формат(Объект.СуммаНачальная, "ЧРД=,; ЧН=0; ЧГ=3,0");
	ИначеЕсли ВычКонечной Тогда
		РасчетМножителяДисконтирования();
		Объект.СуммаКонечная = Объект.СуммаНачальная * МножительДисконтирования;
		УстановитьЦвет("СуммаНачальная");
		
		УстановитьЦвет("СуммаКонечная", Объект.СуммаКонечная, Объект.СуммаНачальная * МножительДисконтирования);
		
		Clear(Ложь);
		ОкноВвода = Формат(Объект.СуммаКонечная, "ЧРД=,; ЧН=0; ЧГ=3,0");
	ИначеЕсли ВычСрока Тогда
		Объект.Срок = Объект.СрокЛет*?(Объект.НачислятьПомесячно,12,1);
		УстановитьЦвет("СрокЛет", 1, 0);
		УстановитьЦвет("Срок", 1, 0);
			
		Объект.ТаблицаПлатежей.Очистить();

		Clear(Ложь);
		
		Попытка
			//Подбором множителя
			МножительДисконтирования = Макс(Объект.СуммаКонечная/Объект.СуммаНачальная, 1);
			
			//Для ускорения расчета, округляем значение промежуточного множителя
			ПозЗапятой = Найти(Формат(МножительДисконтирования, "ЧРД=,; ЧГ=0"), ",");
			ТочностьМножителя = ?(ПозЗапятой=0, 0, СтрДлина(МножительДисконтирования) - ПозЗапятой);
	
			УстановитьЦвет("МножительДисконтирования", Цел(МножительДисконтирования*100)/100, Объект.СуммаКонечная/Объект.СуммаНачальная);
			
			УстановитьЦвет("СуммаНачальная");
			УстановитьЦвет("СуммаКонечная");
			
			К = Объект.Срок; //Начальный срок
			Направление=0;
			
			Если Объект.МетодРасчета  = "Сложные" Тогда
				МноВрем = Окр(Pow(1 + Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1), К), ТочностьМножителя);
			ИначеЕсли Объект.МетодРасчета  = "СПропорциональнымПогашением" Тогда
				МноВрем = 1;
				СтавкаПроцентов = Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1);
				Для н = 1 По К Цикл
					МноВрем = МноВрем + СтавкаПроцентов/К*н;
				КонецЦикла;
				МноВрем = Окр(МноВрем, ТочностьМножителя);
			ИначеЕсли Объект.МетодРасчета  = "ПогашениеРавнымиПлатежами" Тогда
				МноВрем = 0; ПроцентПогашенности = 0;
				СтавкаПроцентов = Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1);
				
				ЕжемесячныйПлатеж = СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов,-(К)));
				Для н = 1 По К Цикл
					МноВрем = МноВрем + СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов, -(К-н+1)))*(1 - ПроцентПогашенности);
					
					ПроцентПогашенности = ПроцентПогашенности + ЕжемесячныйПлатеж - СтавкаПроцентов*(1-ПроцентПогашенности);
				КонецЦикла;
				МноВрем = Окр(МноВрем, ТочностьМножителя);
			Иначе  // Простые или не заполнено
				МноВрем = Окр(1 + Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1)* К, ТочностьМножителя);
			КонецЕсли;
			Шаг = 10; ТочностьВычисления = 0;
			
			Пока МноВрем <> МножительДисконтирования Цикл
				
				Если МноВрем > МножительДисконтирования Тогда  //Много
					Если Направление=1 Тогда //Меняем направление
						Если Шаг=1 Тогда
							Прервать;            // если перебор с шагом ноль, так и зафиксируем (лучше больше)
						КонецЕсли;
						Шаг = Макс(1, Шаг / 2);
					КонецЕсли;
					Направление = -1;  //Уменьшаем
				ИначеЕсли МноВрем < МножительДисконтирования Тогда  //Мало
					Если Направление=-1 Тогда //Меняем направление и уменьшаем шаг
						Шаг = Макс(1, Шаг / 2);
					КонецЕсли;
					Направление = 1;  //Увеличиваем
				КонецЕсли;
				Шаг = Окр(Шаг);
				
				К = К + Направление*Шаг;
				Если Объект.МетодРасчета  = "Сложные" Тогда
					МноВрем = Окр(Pow(1 + Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1), К), ТочностьМножителя);
				ИначеЕсли Объект.МетодРасчета  = "СПропорциональнымПогашением" Тогда
					МноВрем = 1;
					СтавкаПроцентов = Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1);
					Для н = 1 По К Цикл
						МноВрем = МноВрем + СтавкаПроцентов/К*н;
						ОбработкаПрерыванияПользователя();
					КонецЦикла;
					МноВрем = Окр(МноВрем, ТочностьМножителя);
				ИначеЕсли Объект.МетодРасчета  = "ПогашениеРавнымиПлатежами" Тогда
					МноВрем = 0; ПроцентПогашенности = 0;
					СтавкаПроцентов = Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1);
					
					ЕжемесячныйПлатеж = СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов,-(К)));
					Для н = 1 По К Цикл
						МноВрем = МноВрем + СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов, -(К-н+1)))*(1 - ПроцентПогашенности);
						
						ПроцентПогашенности = ПроцентПогашенности + ЕжемесячныйПлатеж - СтавкаПроцентов*(1-ПроцентПогашенности);
						ОбработкаПрерыванияПользователя();
					КонецЦикла;
					МноВрем = Окр(МноВрем, ТочностьМножителя);
				Иначе  // Простые или не заполнено
					МноВрем = Окр(1 + Объект.Ставка/100/?(Объект.НачислятьПомесячно,12,1)* К, ТочностьМножителя);
				КонецЕсли;
				
				Объект.Срок = К;
				Объект.СрокЛет = Объект.Срок/?(Объект.НачислятьПомесячно,12,1);
				
				ОкноВвода = Формат(Объект.СрокЛет, "ЧРД=,; ЧН=0; ЧГ=3,0");
				
				РасчетМножителяДисконтирования(Истина);
		
				//Вывод прогресса вычисления, выраженного в 5 точности множителя
				ВремТочностьВычисления = (МноВрем/МножительДисконтирования*100 - 100);
				ВремТочностьВычисления = Макс(ВремТочностьВычисления, -ВремТочностьВычисления);
				Если ВремТочностьВычисления > 1 Тогда // Менее 99% точности нарисуем на шкале до половины
					ВремТочностьВычисления = 50 - ВремТочностьВычисления/2;
				Иначе  //Остальную половину шкалы использыем для точной подстройки
					ВремТочностьВычисления = 100 - ВремТочностьВычисления*50;
				КонецЕсли;
				ТочностьВычисления = Макс(ТочностьВычисления, ВремТочностьВычисления); //Скачки % гасим
					
				ОбработкаПрерыванияПользователя();
				Состояние(НСтр("ru = 'TTracker: Точность вычисления Калькулятора'; en = 'TTracker: Calculating accuracy'"), ТочностьВычисления, НСтр("ru = 'Чтобы прервать, нажмите Ctrl-Break'; en = 'Press Ctrl-Break to stop '"));
			КонецЦикла;
			
			//Объект.Срок = К;
			//Объект.СрокЛет = Объект.Срок/?(Объект.НачислятьПомесячно,12,1);
			//ОкноВвода = Формат(Объект.СрокЛет, "ЧРД=,; ЧН=0; ЧГ=3,0");
			
			УстановитьЦвет("Срок", МноВрем, МножительДисконтирования);
			УстановитьЦвет("СрокЛет", МноВрем, МножительДисконтирования);
		
			//РасчетМножителяДисконтирования(Истина);
		Исключение
		КонецПопытки;
	ИначеЕсли ВычСтавки Тогда
		Объект.Срок = Объект.СрокЛет*?(Объект.НачислятьПомесячно,12,1);
		УстановитьЦвет("СрокЛет");
		УстановитьЦвет("Срок", Объект.Срок, Объект.СрокЛет*?(Объект.НачислятьПомесячно,12,1));
		УстановитьЦвет("Ставка", 1, 0);
			
		Объект.ТаблицаПлатежей.Очистить();
		
		Clear(Ложь);
		
		Попытка
			//Подбором множителя с угасающей амплитудой коэффициента
			МножительДисконтирования = Макс(Объект.СуммаКонечная/Объект.СуммаНачальная, 1);
	
			//Для ускорения расчета, округляем значение промежуточного множителя
			ПозЗапятой = Найти(Формат(МножительДисконтирования, "ЧРД=,; ЧГ=0"), ",");
			ТочностьМножителя = ?(ПозЗапятой=0, 0, СтрДлина(МножительДисконтирования) - ПозЗапятой);
	
			УстановитьЦвет("МножительДисконтирования", Цел(МножительДисконтирования*100)/100, Объект.СуммаКонечная/Объект.СуммаНачальная);
			
			УстановитьЦвет("СуммаНачальная");
			УстановитьЦвет("СуммаКонечная");
			
			К = Объект.Ставка; //Начальная ставка
			Направление=0;
			
			Если Объект.МетодРасчета  = "Сложные" Тогда
				МноВрем = Окр(Pow(1 + К/100/?(Объект.НачислятьПомесячно,12,1), Объект.Срок), ТочностьМножителя);
			ИначеЕсли Объект.МетодРасчета  = "СПропорциональнымПогашением" Тогда
				МноВрем = 1;
				СтавкаПроцентов = К/100/?(Объект.НачислятьПомесячно,12,1);
				Для н = 1 По Объект.Срок Цикл
					МноВрем = МноВрем + СтавкаПроцентов/Объект.Срок*н;
				КонецЦикла;
				МноВрем = Окр(МноВрем, ТочностьМножителя);
			ИначеЕсли Объект.МетодРасчета  = "ПогашениеРавнымиПлатежами" Тогда
				МноВрем = 0; ПроцентПогашенности = 0;
				СтавкаПроцентов = К/100/?(Объект.НачислятьПомесячно,12,1);
				
				ЕжемесячныйПлатеж = СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов,-(Объект.Срок)));
				Для н = 1 По Объект.Срок Цикл
					МноВрем = МноВрем + СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов, -(Объект.Срок-н+1)))*(1 - ПроцентПогашенности);
					
					ПроцентПогашенности = ПроцентПогашенности + ЕжемесячныйПлатеж - СтавкаПроцентов*(1-ПроцентПогашенности);
				КонецЦикла;
				МноВрем = Окр(МноВрем, ТочностьМножителя);
			Иначе  // Простые или не заполнено
				МноВрем = Окр(1 + К/100/?(Объект.НачислятьПомесячно,12,1)* Объект.Срок, ТочностьМножителя);
			КонецЕсли;
			Шаг = 10; Точность = 2; ТочностьВычисления = 0;
			
			Пока МноВрем <> МножительДисконтирования Цикл
				
				Если МноВрем > МножительДисконтирования Тогда  //Много
					Если Направление=1 Тогда //Меняем направление и уменьшаем шаг
						Шаг = Шаг / 2;
					КонецЕсли;
					Направление = -1;  //Уменьшаем
				ИначеЕсли МноВрем < МножительДисконтирования Тогда  //Мало
					Если Направление=-1 Тогда //Меняем направление и уменьшаем шаг
						Шаг = Шаг / 2;
					КонецЕсли;
					Направление = 1;  //Увеличиваем
				КонецЕсли;
				Если Шаг>1 Тогда  // уменьшим время на вычисление
					Шаг = Окр(Шаг, Точность);
				КонецЕсли;
				
				К = К + Направление*Шаг;
				Если Объект.МетодРасчета  = "Сложные" Тогда
					МноВрем = Окр(Pow(1 + К/100/?(Объект.НачислятьПомесячно,12,1), Объект.Срок), ТочностьМножителя);
				ИначеЕсли Объект.МетодРасчета  = "СПропорциональнымПогашением" Тогда
					МноВрем = 1;
					СтавкаПроцентов = К/100/?(Объект.НачислятьПомесячно,12,1);
					Для н = 1 По Объект.Срок Цикл
						МноВрем = МноВрем + СтавкаПроцентов/Объект.Срок*н;
						ОбработкаПрерыванияПользователя();
					КонецЦикла;
					МноВрем = Окр(МноВрем, ТочностьМножителя);
				ИначеЕсли Объект.МетодРасчета  = "ПогашениеРавнымиПлатежами" Тогда
					МноВрем = 0; ПроцентПогашенности = 0;
					СтавкаПроцентов = К/100/?(Объект.НачислятьПомесячно,12,1);
					
					ЕжемесячныйПлатеж = СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов,-(Объект.Срок)));
					Для н = 1 По Объект.Срок Цикл
						МноВрем = МноВрем + СтавкаПроцентов/(1-Pow(1+СтавкаПроцентов, -(Объект.Срок-н+1)))*(1 - ПроцентПогашенности);
						
						ПроцентПогашенности = ПроцентПогашенности + ЕжемесячныйПлатеж - СтавкаПроцентов*(1-ПроцентПогашенности);
						ОбработкаПрерыванияПользователя();
					КонецЦикла;
					МноВрем = Окр(МноВрем, ТочностьМножителя);
				Иначе  // Простые или не заполнено
					МноВрем = Окр(1 + К/100/?(Объект.НачислятьПомесячно,12,1)* Объект.Срок, ТочностьМножителя);
				КонецЕсли;
				
				Объект.Ставка = К;
				ОкноВвода = Формат(Объект.Ставка, "ЧРД=,; ЧН=0; ЧГ=3,0");
				
				РасчетМножителяДисконтирования(Истина);
				
				//Вывод прогресса вычисления, выраженного в 5 точности множителя
				ВремТочностьВычисления = (МноВрем/МножительДисконтирования*100 - 100);
				ВремТочностьВычисления = Макс(ВремТочностьВычисления, -ВремТочностьВычисления);
				Если ВремТочностьВычисления > 1 Тогда // Менее 99% точности нарисуем на шкале до половины
					ВремТочностьВычисления = 50 - ВремТочностьВычисления/2;
				Иначе  //Остальную половину шкалы использыем для точной подстройки
					ВремТочностьВычисления = 100 - ВремТочностьВычисления*50;
				КонецЕсли;
				ТочностьВычисления = Макс(ТочностьВычисления, ВремТочностьВычисления); //Скачки % гасим
				
				ОбработкаПрерыванияПользователя();
				Состояние(НСтр("ru = 'TTracker: Точность вычисления Калькулятора'; en = 'TTracker: Calculating accuracy'"), ТочностьВычисления, НСтр("ru = 'Чтобы прервать, нажмите Ctrl-Break'; en = 'Press Ctrl-Break to stop '"));
			КонецЦикла;
			
			УстановитьЦвет("Ставка", Объект.Ставка, К);
		
			//РасчетМножителяДисконтирования(Истина);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры



//СТРОЧНЫЙ калькулятор уравнений
//ДОРАБОТАТЬ:
//  в текст вставлять предупреждения в местах явных ошибок

&НаКлиенте
Процедура УравнениеРасчитать(Команда)
	Clear(); //Очищаю историю мат.калька, для консистенси... когда помещу в окно ему вычисленное здесь значение
	
	РасчетУравнения();
КонецПроцедуры

&НаСервере
Процедура РасчетУравнения()
	Массив = Новый Массив;
	
	Уравнение = СтрокаУравнения.ПолучитьТекст();
	
	Расчет = СтрЗаменить(Уравнение, Символы.ПС, ""); //превращаю в одну строку
	Расчет = СтрЗаменить(Расчет, " ", ""); //очищаю от пробелов
	Расчет = СтрЗаменить(Расчет, "=", ""); //убираю равно
	Расчет = СтрЗаменить(Расчет, "Pi", "3.1415926535897932"); //Заменяю число Пи
	
	//Преобразую строку из пользовательского в уравнение 1С
	//Расчет = СтрЗаменить(Расчет, ",", "."); //запятые меняю точками
	ЗаменаКорней(Расчет);     //Вначале корень
	ЗаменаСтепеней(Расчет);   //Потом степень
	
	
	Попытка
		Расчет = Вычислить(Расчет);
		Если ТипЗнч(Расчет) <> Тип("Число") Тогда
			ВызватьИсключение "Calculating error";
		КонецЕсли;
		ОкноВвода = Формат(Расчет, "ЧРД=,; ЧН=0; ЧГ=3,0");
	Исключение
		ОкноВвода = "Calculating error";
		
		Расчет = Уравнение;
		
		//Ищу где ошибка для информации пользователю
		
		//Разбираю строку на вложенные уравнения по скобкам
		позКонцаВыражения = НайтиДействие(Расчет, ")");
		Пока позКонцаВыражения<>0 Цикл
			позНачалаВыражения = НайтиПоследнееДействие(Лев(Расчет, позКонцаВыражения-1), "(");
			Если позНачалаВыражения = 0 Тогда
//вывести в уравнении предупреждение лишней закрывающей скобки				
				Возврат;
			КонецЕсли;
			
			Расчет = Лев(Расчет, позНачалаВыражения-1)
			+ РасчетВыражения(Сред(Расчет, позНачалаВыражения+1, позКонцаВыражения-позНачалаВыражения-1))
			+ Сред(Расчет, позКонцаВыражения+1);
			
			позКонцаВыражения = НайтиДействие(Расчет, ")");
		КонецЦикла;
		позЛишнейОткрСкобки = НайтиПоследнееДействие(Расчет, "(");
		Если позЛишнейОткрСкобки<>0 Тогда
//вывести в уравнении предупреждение лишней открывающей скобки				
			Возврат;
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаменаКорней(Уравнение)
	
	позЗнака = Найти(Уравнение, "√");
	Пока позЗнака<>0 Цикл
		ПостЗначное = СокрЛП(Сред(Уравнение, позЗнака+1));
		Если Лев(ПостЗначное, 1) = "(" Тогда  //ищем окончание подвыражения уровень за уровнем
			
			Подуравнение = Сред(ПостЗначное, 2);
			Уровень = 1; Действие = "()"; поз = 1;
			позСледДействия = НайтиПервоеДействие(Подуравнение, Действие);
			Пока позСледДействия<>0 Цикл
				Если Действие="(" Тогда
					Уровень = Уровень + 1;
				ИначеЕсли Действие=")" Тогда
					Уровень = Уровень - 1;
				Иначе //ошибка
					Возврат;
				КонецЕсли;
				Если Уровень = 0 Тогда
					ПодСтепенное = Лев(ПостЗначное, поз+позСледДействия);
					ПостЗначное = Сред(ПостЗначное, поз+позСледДействия+1);
					Прервать;
				Иначе
					поз = поз + позСледДействия;
					Подуравнение = Сред(Подуравнение, позСледДействия+1);
				КонецЕсли;
				
				Действие = "()";
				позСледДействия = НайтиПервоеДействие(Подуравнение, Действие);
			КонецЦикла;
			
		Иначе  //Считаем, что за знаком число и ищем его окончание
			Цифры = "0123456789.";
			Для Ном=1 По СтрДлина(ПостЗначное) Цикл
				Если Найти(Цифры,Сред(ПостЗначное, Ном, 1))=0 Тогда
					ПодСтепенное = Лев(ПостЗначное, Ном-1);
					ПостЗначное = Сред(ПостЗначное, Ном);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			//позСледДействия = НайтиПервоеДействие(ПостЗначное);
			//Если позСледДействия=0 Тогда
			//	ПодСтепенное = ПостЗначное;
			//	ПостЗначное = "";
			//Иначе
			//	ПодСтепенное = Лев(ПостЗначное, позСледДействия-1);
			//	ПостЗначное = Сред(ПостЗначное,позСледДействия);
			//КонецЕсли;
		КонецЕсли;
		
		//Подменяем в уравнении на язык 1С
		Текст = Лев(Уравнение, позЗнака-1);
		ЗначениеСтепени = ВернутьСтепень(Текст);
		Уравнение = Текст + "Pow(" + ПодСтепенное + ", 1/" + ЗначениеСтепени + ")" + ПостЗначное;
		
		позЗнака = Найти(Уравнение, "√");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменаСтепеней(Уравнение)
	
	Степени = "";
	позСтепени = НайтиПервоеДействие(Уравнение, Степени);
	Пока позСтепени<>0 Цикл
		
		ПередСтепенью = СокрЛП(Лев(Уравнение, позСтепени-1));
		Если Прав(ПередСтепенью, 1) = ")" Тогда  //тогда ищем начало подвыражения уровень за уровнем
			
			Подуравнение = Лев(ПередСтепенью, СтрДлина(ПередСтепенью)-1);
			Уровень = 1; поз = 1;
			позОткрытия = НайтиПоследнееДействие(Подуравнение, "(");
			позЗакрытия = НайтиПоследнееДействие(Подуравнение, ")");
			Пока Макс(позОткрытия, позЗакрытия)<>0 Цикл
				Если позЗакрытия>позОткрытия Тогда
					Уровень = Уровень + 1;
				ИначеЕсли позОткрытия>позЗакрытия Тогда
					Уровень = Уровень - 1;
				Иначе //ошибка
					Возврат;
				КонецЕсли;
				
				Если Уровень = 0 Тогда
					ПодСтепенное = Сред(ПередСтепенью, позОткрытия);
					ПередСтепенью = Лев(ПередСтепенью, позОткрытия-1);
					Прервать;
				Иначе
					поз = поз + Макс(позОткрытия, позЗакрытия);
					Подуравнение = Лев(Подуравнение, Макс(позОткрытия, позЗакрытия)-1);
				КонецЕсли;
				
				позОткрытия = НайтиПоследнееДействие(Подуравнение, "(");
				позЗакрытия = НайтиПоследнееДействие(Подуравнение, ")");
			КонецЦикла;
		Иначе  //Считаем, что перед степенью число и ищем его начало
			Цифры = "0123456789.";
			Для Ном=1 По СтрДлина(Уравнение) Цикл
				Если Найти(Цифры,Сред(Уравнение, СтрДлина(Уравнение)-Ном, 1))=0 Тогда
					ПодСтепенное = Сред(Уравнение, СтрДлина(Уравнение)-Ном+1);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Подменяем в уравнении на язык 1С
		Текст = Сред(Уравнение, позСтепени);
		ЗначениеСтепени = ВернутьСтепень(Текст, Истина);
		Уравнение = Лев(Уравнение, позСтепени-1-СтрДлина(ПодСтепенное)) + "Pow(" + ПодСтепенное + ", " + ЗначениеСтепени + ")" + Текст;
		
		Степени = "";
		позСтепени = НайтиПервоеДействие(Уравнение, Степени);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция РасчетВыражения(Выражение)
	
	Попытка
		РезультатВычисления = Вычислить(Выражение);
		Если ТипЗнч(РезультатВычисления) <> Тип("Число") Тогда
			ВызватьИсключение "Calculating error";
		КонецЕсли;
	Исключение
//вывести в уравнении предупреждение ошибки вычисления
//Проверить нет ли лишних запятых
		ОкноВвода = "Calculating error";
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции

&НаСервере
Процедура ВыделитьЦветом(HTML, ЧтоВыделить, Цвет)
	
	СтрокаПодмены = "@#$@";
	
	//Подменю уже разукрашенные
	HTML = СтрЗаменить(HTML, ЧтоВыделить+"</", СтрокаПодмены);
	
	//Заменяю цвет
	HTML = СтрЗаменить(HTML, ЧтоВыделить, "<span style='color: "+Цвет+";'>"+ЧтоВыделить+"</span>");
	
	//Верну подмены
	HTML = СтрЗаменить(HTML, СтрокаПодмены, ЧтоВыделить+"</");
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьСтепени(HTML, Цвет)
	Степени = "";
	ВремHTML = HTML;
	новHTML = "";
	
	позСтепени = НайтиПервоеДействие(ВремHTML, Степени);
	Пока позСтепени <> 0 Цикл
		стрСтепень = Сред(ВремHTML, позСтепени, 1);
		новHTML = новHTML + Лев(ВремHTML, позСтепени-1);
		ВремHTML = Сред(ВремHTML, позСтепени+1);
		
		Пока СтрДлина(ВремHTML)>0 Цикл
			очСимвол = Лев(ВремHTML, 1);
			Если Найти("", очСимвол)=0 Тогда
				Прервать;
			Иначе
				ВремHTML = Сред(ВремHTML, 2);
				стрСтепень = стрСтепень + очСимвол;
			КонецЕсли;
		КонецЦикла;
		
		новHTML = новHTML + "<font face=""Monotype Hadassah""><span style='color: "+Цвет+";'>"+стрСтепень+"</span></font>";
		
		Степени = "";
		позСтепени = НайтиПервоеДействие(ВремHTML, Степени);
	КонецЦикла;
	HTML = новHTML + ВремHTML;
	
КонецПроцедуры

&НаСервере
Процедура РазукраситьУравнение()
	
	HTML = "";
	Вложения = Новый Структура;  
	СтрокаУравнения.ПолучитьHTML(HTML, Вложения);
	//HTML = СтрокаУравнения.ПолучитьТекст();
	
	//вынимаю строку тела
	позНачалаТела = Найти(HTML, "<p>");
	Хвост = "</body>
			|</html>";
	СладкаяСрединка = СтрокаУравнения.ПолучитьТекст();//Сред(HTML, позНачалаТела+3, позКонцаТела-позНачалаТела-3);
	
	//Выделю зеленым	
	ВыделитьЦветом(СладкаяСрединка, "/", "#32cd32"); //Обязательно первым!
	ВыделитьЦветом(СладкаяСрединка, "+", "#32cd32");
	ВыделитьЦветом(СладкаяСрединка, "-", "#32cd32");
	ВыделитьЦветом(СладкаяСрединка, "*", "#32cd32");
	
	ВыделитьСтепени(СладкаяСрединка, "#1e90ff");
	
	//Выделю синим	
	ВыделитьЦветом(СладкаяСрединка, "√(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "Окр(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "ROUND(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "Pow(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "ASin(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "ACos(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "ATan(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "Sin(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "Cos(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "Tan(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "Exp(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "Log(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "Log10(", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, "Pi", "#1e90ff");
	ВыделитьЦветом(СладкаяСрединка, ")", "#1e90ff"); //Их последними
	ВыделитьЦветом(СладкаяСрединка, "(", "#1e90ff"); //Их последними
	
	//Выделю красным	
	//ВыделитьЦветом(HTML, "", "#ff0000");
	
	//Собираю строку обратно
	HTML = Лев(HTML, позНачалаТела-1);
	
	Для Ном = 1 По СтрЧислоСтрок(СладкаяСрединка) Цикл
		HTML = HTML + "<p>" + СтрПолучитьСтроку(СладкаяСрединка, Ном) + "</p>";
	КонецЦикла;
	
	HTML = HTML + Хвост;
	
	СтрокаУравнения.УстановитьHTML(HTML, Вложения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаУравненияПриИзменении(Элемент)
	РазукраситьУравнение();
КонецПроцедуры


//-------------- РАЗБОР СТРОКИ
&НаСервере
//Направление: Истина - слева направо(возведение в степень), Ложь - справа налево(извлечение корня)
Функция ВернутьСтепень(Текст, Направление=Ложь)
	
	Степень = "";
	
	//Перелистываю посимвольно
	Для Ном=1 По СтрДлина(Текст) Цикл
		Если Направление Тогда
			текСимвол = Сред(Текст, Ном, 1);
			
			Если текСимвол = "" Тогда
				Степень = Степень + "0";
			ИначеЕсли текСимвол = "" Тогда
				Степень = Степень + "1";
			ИначеЕсли текСимвол = "" Тогда
				Степень = Степень + "2";
			ИначеЕсли текСимвол = "" Тогда
				Степень = Степень + "3";
			ИначеЕсли текСимвол = "" Тогда
				Степень = Степень + "4";
			ИначеЕсли текСимвол = "" Тогда
				Степень = Степень + "5";
			ИначеЕсли текСимвол = "" Тогда
				Степень = Степень + "6";
			ИначеЕсли текСимвол = "" Тогда
				Степень = Степень + "7";
			ИначеЕсли текСимвол = "" Тогда
				Степень = Степень + "8";
			ИначеЕсли текСимвол = "" Тогда
				Степень = Степень + "9";
			Иначе
				Текст = Сред(Текст, СтрДлина(Степень)+1);
				Возврат Степень;
			КонецЕсли;
		Иначе
			текСимвол = Сред(Текст, СтрДлина(Текст)-Ном+1, 1);
			
			Если текСимвол = "" Тогда
				Степень = "0" + Степень;
			ИначеЕсли текСимвол = "" Тогда
				Степень = "1" + Степень;
			ИначеЕсли текСимвол = "" Тогда
				Степень = "2" + Степень;
			ИначеЕсли текСимвол = "" Тогда
				Степень = "3" + Степень;
			ИначеЕсли текСимвол = "" Тогда
				Степень = "4" + Степень;
			ИначеЕсли текСимвол = "" Тогда
				Степень = "5" + Степень;
			ИначеЕсли текСимвол = "" Тогда
				Степень = "6" + Степень;
			ИначеЕсли текСимвол = "" Тогда
				Степень = "7" + Степень;
			ИначеЕсли текСимвол = "" Тогда
				Степень = "8" + Степень;
			ИначеЕсли текСимвол = "" Тогда
				Степень = "9" + Степень;
			Иначе
				Текст = Лев(Текст, СтрДлина(Текст)-СтрДлина(Степень));
				Возврат Степень;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Направление Тогда
		Текст = Сред(Текст, СтрДлина(Степень)+1);
	Иначе
		Текст = Лев(Текст, СтрДлина(Текст)-СтрДлина(Степень));
	КонецЕсли;
	Возврат Степень;
КонецФункции

&НаКлиенте
Функция ДобавитьСтепень(Степень)
	стрСтепень = Строка(Степень);
	стрСтепень = СтрЗаменить(стрСтепень, "0", "");
	стрСтепень = СтрЗаменить(стрСтепень, "1", "");
	стрСтепень = СтрЗаменить(стрСтепень, "2", "");
	стрСтепень = СтрЗаменить(стрСтепень, "3", "");
	стрСтепень = СтрЗаменить(стрСтепень, "4", "");
	стрСтепень = СтрЗаменить(стрСтепень, "5", "");
	стрСтепень = СтрЗаменить(стрСтепень, "6", "");
	стрСтепень = СтрЗаменить(стрСтепень, "7", "");
	стрСтепень = СтрЗаменить(стрСтепень, "8", "");
	стрСтепень = СтрЗаменить(стрСтепень, "9", "");
	
	//Возврат "<font face=""Monotype Hadassah""><span style='color: #1e90ff;'>"+стрСтепень+"</span></font>";
	Возврат стрСтепень;
КонецФункции

&НаСервере
Функция НайтиДействие(Строка, Действие)
	поз = Найти(Строка, Действие);
	Возврат поз;
КонецФункции

&НаСервере
Функция НайтиПоследнееДействие(ЗНАЧ Строка, Действие)
	колДействий = СтрЧислоВхождений(Строка,Действие);
	поз = 0;
	Для ном=1 По колДействий Цикл
		позВрем = НайтиДействие(Строка, Действие);
		Если позВрем=0 Тогда
			Прервать;
		КонецЕсли;
		
		поз = поз + позВрем;
		Если ном=колДействий Тогда
			Прервать;
		КонецЕсли;
		Строка = Сред(Строка, позВрем+СтрДлина(Действие));
	КонецЦикла;
	Возврат поз;
КонецФункции

&НаСервере
Функция НайтиПервоеДействие(ЗНАЧ Строка, Действия="")
	//Ищем первое из действий
	Если ПустаяСтрока(Действия) Тогда
		Действия = "*/+-()√ ";
	КонецЕсли;
	
	Найденное = Лев(Действия, 1);
	поз = Найти(Строка, Найденное);
	Для номСимвола=2 По СтрДлина(Действия) Цикл
		НайденноеВрем = Сред(Действия, номСимвола, 1);
		позВрем = Найти(Строка, НайденноеВрем);
		Если позВрем<>0 И (позВрем < поз ИЛИ поз=0) Тогда
			поз = позВрем;
			Найденное = НайденноеВрем;
		КонецЕсли;
	КонецЦикла;
	Действия = Найденное;
	
	//поз = Мин(НайтиДействие(Строка, ""), поз);
	Возврат поз;
КонецФункции
 
&НаКлиенте
Функция НайтиПервоеДействиеКлиент(ЗНАЧ Строка, Действия="")
	//Ищем первое из действий
	Если ПустаяСтрока(Действия) Тогда
		Действия = "*/+-()√ ";
	КонецЕсли;
	
	Найденное = Лев(Действия, 1);
	поз = Найти(Строка, Найденное);
	Для номСимвола=2 По СтрДлина(Действия) Цикл
		НайденноеВрем = Сред(Действия, номСимвола, 1);
		позВрем = Найти(Строка, НайденноеВрем);
		Если позВрем<>0 И (позВрем < поз ИЛИ поз=0) Тогда
			поз = позВрем;
			Найденное = НайденноеВрем;
		КонецЕсли;
	КонецЦикла;
	Действия = Найденное;
	
	//поз = Мин(НайтиДействие(Строка, ""), поз);
	Возврат поз;
КонецФункции

&НаКлиенте
Функция НайтиПоследнееДействиеКлиент(ЗНАЧ Строка, Действие)
	колДействий = СтрЧислоВхождений(Строка,Действие);
	поз = 0;
	Для ном=1 По колДействий Цикл
		позВрем = Найти(Строка, Действие);
		Если позВрем=0 Тогда
			Прервать;
		КонецЕсли;
		
		поз = поз + позВрем;
		Если ном=колДействий Тогда
			Прервать;
		КонецЕсли;
		Строка = Сред(Строка, позВрем+СтрДлина(Действие));
	КонецЦикла;
	Возврат поз;
КонецФункции

//-------------- РАЗБОР СТРОКИ


//----------КНОПКИ------------
&НаСервере
Процедура ОбработатьВыделенныйТекст(ДобавитьСимволыВНачало="", ДобавитьСимволыВКонец="")
	
	ЗаклНачало = "";
	ЗаклКонца = "";
	Элементы.СтрокаУравнения.ПолучитьГраницыВыделения(ЗаклНачало,ЗаклКонца);
	
	ВыделенныйТекст = СтрокаУравнения.ПолучитьТекст(ЗаклНачало,ЗаклКонца);
	
	СтрокаПЕРЕД = СтрокаУравнения.ПолучитьТекст(,ЗаклНачало);
	СтрокаПОСЛЕ = СокрП(СтрокаУравнения.ПолучитьТекст(ЗаклКонца,));
	
	//Проверка нет ли в выделеном тексте добавляемых элементов. Работает только если и начало и конец выделены
	Если НРег(Лев(СокрЛ(ВыделенныйТекст),СтрДлина(ДобавитьСимволыВНачало))) = НРег(ДобавитьСимволыВНачало)
		И НРег(Прав(СокрП(ВыделенныйТекст),СтрДлина(ДобавитьСимволыВКонец))) = НРег(ДобавитьСимволыВКонец) Тогда 
		//Выделено вместе с тем, что нужно добавить. Исправляю выделение
		
		//Превращаем закладки в позицию
		ЗаклНачало = СтрокаУравнения.ПолучитьПозициюПоЗакладке(ЗаклНачало);
		ЗаклКонца = СтрокаУравнения.ПолучитьПозициюПоЗакладке(ЗаклКонца);
		
		//Поправка на пробелы до и после
		КолвоПробеловЛ = СтрДлина(ВыделенныйТекст)-СтрДлина(СокрЛ(ВыделенныйТекст));
		КолвоПробеловП = СтрДлина(ВыделенныйТекст)-СтрДлина(СокрП(ВыделенныйТекст));
		
		//Коррекция выделения
		ЗаклНачало = СтрокаУравнения.ПолучитьЗакладкуПоПозиции(ЗаклНачало+СтрДлина(НРег(ДобавитьСимволыВНачало))+КолвоПробеловЛ);
		ЗаклКонца = СтрокаУравнения.ПолучитьЗакладкуПоПозиции(ЗаклКонца-СтрДлина(НРег(ДобавитьСимволыВКонец))-КолвоПробеловП);
		Элементы.СтрокаУравнения.УстановитьГраницыВыделения(ЗаклНачало, ЗаклКонца);
		
		//Обновляем
		ВыделенныйТекст = СтрокаУравнения.ПолучитьТекст(ЗаклНачало,ЗаклКонца);
		СтрокаПЕРЕД = СтрокаУравнения.ПолучитьТекст(,ЗаклНачало);
		СтрокаПОСЛЕ = СокрП(СтрокаУравнения.ПолучитьТекст(ЗаклКонца,));
	КонецЕсли;
	
	Если НРег(Прав(СокрП(СтрокаПЕРЕД),СтрДлина(ДобавитьСимволыВНачало))) = НРег(ДобавитьСимволыВНачало)
		И НРег(Лев(СокрЛ(СтрокаПОСЛЕ),СтрДлина(ДобавитьСимволыВКонец))) = НРег(ДобавитьСимволыВКонец) Тогда // УЖЕ есть, значит убираем
		Множ = -1;
		НоваяСтрока = Лев(СтрокаПЕРЕД,СтрДлина(СокрП(СтрокаПЕРЕД))-СтрДлина(ДобавитьСимволыВНачало))
		+ ВыделенныйТекст
		+ Прав(СтрокаПОСЛЕ,СтрДлина(СокрЛ(СтрокаПОСЛЕ))-СтрДлина(ДобавитьСимволыВКонец));
	Иначе  //Добавляем символы
		Множ = 1;
		НоваяСтрока = СтрокаПЕРЕД + ДобавитьСимволыВНачало + ВыделенныйТекст + ДобавитьСимволыВКонец + СтрокаПОСЛЕ;
	КонецЕсли;
		
	Попытка
		//Итоговое выделение текста, получаем позицию
		ЗаклНачало = СтрокаУравнения.ПолучитьПозициюПоЗакладке(ЗаклНачало);
		ЗаклКонца = СтрокаУравнения.ПолучитьПозициюПоЗакладке(ЗаклКонца);
		
		//Пезаполняем документ
		СтрокаУравнения = "";
		СтрокаУравнения.Добавить(НоваяСтрока);
		
		ЗаклНачало = СтрокаУравнения.ПолучитьЗакладкуПоПозиции(ЗаклНачало+СтрДлина(ДобавитьСимволыВНачало)*Множ);
		ЗаклКонца = СтрокаУравнения.ПолучитьЗакладкуПоПозиции(ЗаклКонца+СтрДлина(ДобавитьСимволыВНачало)*Множ);
		Элементы.СтрокаУравнения.УстановитьГраницыВыделения(ЗаклНачало, ЗаклКонца);
	Исключение
		//Пезаполняем документ
		СтрокаУравнения = "";
		СтрокаУравнения.Добавить(НоваяСтрока);
	КонецПопытки;
	
	РазукраситьУравнение();  //Выделение цветом
КонецПроцедуры

&НаКлиенте
Процедура УравнениеСкобки(Команда)
	ОбработатьВыделенныйТекст("(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеACos(Команда)
	ОбработатьВыделенныйТекст("ACos(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеASin(Команда)
	ОбработатьВыделенныйТекст("ASin(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеATan(Команда)
	ОбработатьВыделенныйТекст("ATan(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеCos(Команда)
	ОбработатьВыделенныйТекст("Cos(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеExp(Команда)
	ОбработатьВыделенныйТекст("Exp(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеLog(Команда)
	ОбработатьВыделенныйТекст("Log(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеLog10(Команда)
	ОбработатьВыделенныйТекст("Log(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеSin(Команда)
	ОбработатьВыделенныйТекст("Sin(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеTan(Команда)
	ОбработатьВыделенныйТекст("Tan(",")");
КонецПроцедуры

&НаКлиенте
Процедура УравнениеЧислоPi(Команда)
	ОбработатьВыделенныйТекст("Pi ","");
КонецПроцедуры

&НаКлиенте
Функция ОбработатьСложнуюФункциюСЗапятой(ДобавитьСимволыВНачало, ДобавитьСимволыВКонец)
	
 	ЗаклНачало = ""; ЗаклКонца = "";
	Элементы.СтрокаУравнения.ПолучитьГраницыВыделения(ЗаклНачало,ЗаклКонца);
	
	ВыделенныйТекст = СтрокаУравнения.ПолучитьТекст(ЗаклНачало,ЗаклКонца);
	
	СтрокаПЕРЕД = СтрокаУравнения.ПолучитьТекст(,ЗаклНачало);
	СтрокаПОСЛЕ = СокрП(СтрокаУравнения.ПолучитьТекст(ЗаклКонца,));

	//Проверим не выделено ли что не нужное и найдем вторую часть функции
	Если НРег(Лев(СокрЛ(ВыделенныйТекст),СтрДлина(ДобавитьСимволыВНачало))) = НРег(ДобавитьСимволыВНачало) Тогда
		//Если в выделенном тексте есть команда
		
		Если Лев(СокрЛ(СтрокаПОСЛЕ),1) = "," Тогда
			//Вторая часть с запятой не выделена, переносим начало выделения
			
			ЗаклНачало = СтрокаУравнения.ПолучитьПозициюПоЗакладке(ЗаклНачало);
			ЗаклНачало = СтрокаУравнения.ПолучитьЗакладкуПоПозиции(ЗаклНачало+СтрДлина(ДобавитьСимволыВНачало));
			Элементы.СтрокаУравнения.УстановитьГраницыВыделения(ЗаклНачало, ЗаклКонца);
			
			позСкобки = Найти(СтрокаПОСЛЕ, ")");
			Если позСкобки<>0 Тогда   //от запятой до скобки
				ДобавитьСимволыВКонец = Лев(СтрокаПОСЛЕ,позСкобки);
			КонецЕсли;
		Иначе
			//выделено ВМЕСТЕ со второй частью, ищу внутри выделения
			
			позЗапятой = НайтиПоследнееДействие(ВыделенныйТекст, ",");
			Если позЗапятой<>0 Тогда
				позСкобки = Найти(Сред(ВыделенныйТекст, позЗапятой+1), ")");
				Если позСкобки<>0 Тогда   //от запятой до скобки
					ДобавитьСимволыВКонец = Сред(ВыделенныйТекст,позЗапятой,позСкобки+1);
				Иначе
					ДобавитьСимволыВКонец = Сред(ВыделенныйТекст,позЗапятой) + ДобавитьСимволыВКонец;
				КонецЕсли;
					
				//И двигаем выделение
				ЗаклНачало = СтрокаУравнения.ПолучитьПозициюПоЗакладке(ЗаклНачало);
				ЗаклНачало = СтрокаУравнения.ПолучитьЗакладкуПоПозиции(ЗаклНачало+СтрДлина(ДобавитьСимволыВНачало));
				ЗаклКонца = СтрокаУравнения.ПолучитьПозициюПоЗакладке(ЗаклКонца);
				ЗаклКонца = СтрокаУравнения.ПолучитьЗакладкуПоПозиции(ЗаклКонца-(СтрДлина(ВыделенныйТекст)-позЗапятой+1));
				Элементы.СтрокаУравнения.УстановитьГраницыВыделения(ЗаклНачало, ЗаклКонца);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НРег(Прав(СокрП(СтрокаПЕРЕД),СтрДлина(ДобавитьСимволыВНачало))) = НРег(ДобавитьСимволыВНачало) Тогда
		//Есть команда ПЕРЕД выделением, ищу и убираю вторую часть
		
		Если Лев(СокрЛ(СтрокаПОСЛЕ),1) = "," Тогда
			// Есть запятая второй части ПОСЛЕ выделения, ищу скобку
			позСкобки = Найти(СтрокаПОСЛЕ, ")");
			Если позСкобки<>0 Тогда
				ДобавитьСимволыВКонец = Лев(СтрокаПОСЛЕ,позСкобки);
			КонецЕсли;
		Иначе
			//выделено ВМЕСТЕ со второй частью, ищу внутри выделения
			
			позЗапятой = НайтиПоследнееДействие(ВыделенныйТекст, ",");
			Если позЗапятой<>0 Тогда
				позСкобки = Найти(Сред(ВыделенныйТекст, позЗапятой+1), ")");
				Если позСкобки<>0 Тогда   //от запятой до скобки
					ДобавитьСимволыВКонец = Сред(ВыделенныйТекст,позЗапятой,позСкобки+1);
				Иначе	
					ДобавитьСимволыВКонец = Сред(ВыделенныйТекст,позЗапятой) + ДобавитьСимволыВКонец;
				КонецЕсли;
				
				//И двигаем выделение
				ЗаклКонца = СтрокаУравнения.ПолучитьПозициюПоЗакладке(ЗаклКонца);
				ЗаклКонца = СтрокаУравнения.ПолучитьЗакладкуПоПозиции(ЗаклКонца-(СтрДлина(ВыделенныйТекст)-позЗапятой+1));
				Элементы.СтрокаУравнения.УстановитьГраницыВыделения(ЗаклНачало, ЗаклКонца);
			КонецЕсли;
		КонецЕсли;
	Иначе // нет команды, спрашиваем юзера значение второй части
		Возврат Истина;
	КонецЕсли;
	
	ДобавитьСимволыВНачало = СокрЛП(СтрЗаменить(ДобавитьСимволыВНачало, Символы.ПС, ""));
	ДобавитьСимволыВКонец = СокрЛП(СтрЗаменить(ДобавитьСимволыВКонец,Символы.ПС, ""));
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УравнениеОкр(Команда)
	
	ДобавитьСимволыВНачало = НСтр("ru = 'Окр('; en = 'ROUND('");
	ДобавитьСимволыВКонец = ")";
	
	Если ОбработатьСложнуюФункциюСЗапятой(ДобавитьСимволыВНачало, ДобавитьСимволыВКонец) Тогда
		Точность = 0;
		Если НЕ ВвестиЧисло(Точность, НСтр("ru = 'Укажите точность округления'; en = 'Specify rounding capacity'"), 2, 0) Тогда
			Возврат;
		КонецЕсли;
		ДобавитьСимволыВКонец = ", "+Точность+ДобавитьСимволыВКонец;
	КонецЕсли;
	
	ОбработатьВыделенныйТекст(ДобавитьСимволыВНачало, ДобавитьСимволыВКонец);
КонецПроцедуры

&НаКлиенте
//Направление: Истина - ищу слева(извлечение корня), Ложь - ищу справа(возведение в степень)
Функция НайтиСтепеньВИероглифах(Направление, ДобавитьСимволыВНачало, ДобавитьСимволыВКонец)
	
 	ЗаклНачало = ""; ЗаклКонца = "";
	Элементы.СтрокаУравнения.ПолучитьГраницыВыделения(ЗаклНачало,ЗаклКонца);
	
	ВыделенныйТекст = СтрокаУравнения.ПолучитьТекст(ЗаклНачало,ЗаклКонца);
	
	СтрокаПЕРЕД = СтрокаУравнения.ПолучитьТекст(,ЗаклНачало);
	СтрокаПОСЛЕ = СокрП(СтрокаУравнения.ПолучитьТекст(ЗаклКонца,));
	
	Если Направление И Найти(Прав(СокрЛП(СтрокаПЕРЕД), 2), "√")<>0 Тогда
		Действие = "";
		позСтепени = НайтиПервоеДействиеКлиент(Прав(СтрЗаменить(СтрокаПЕРЕД," ",""),3), Действие);
		Если позСтепени<>0 Тогда
			Ном=НайтиПоследнееДействиеКлиент(СтрокаПЕРЕД,Действие);
			Пока Ном>0  Цикл
				Если Найти("", Сред(СтрокаПЕРЕД, Ном, 1))=0 Тогда
					ДобавитьСимволыВНачало = Сред(СтрокаПЕРЕД, Ном+1);
					Возврат Истина;
				КонецЕсли;
				Ном = Ном -1;
			КонецЦикла;
			ДобавитьСимволыВНачало = СтрокаПЕРЕД;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли НЕ Направление Тогда
		Действие = "";
		позСтепени = НайтиПервоеДействиеКлиент(Лев(СтрЗаменить(СтрокаПОСЛЕ," ",""),3), Действие);
		Если позСтепени<>0 Тогда
			Для Ном=Найти(СтрокаПОСЛЕ,Действие) По СтрДлина(СтрокаПОСЛЕ) Цикл
				Если Найти("", Сред(СтрокаПОСЛЕ, Ном, 1))=0 Тогда
					ДобавитьСимволыВКонец = Лев(СтрокаПОСЛЕ, Ном-1);
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			ДобавитьСимволыВКонец = СтрокаПОСЛЕ;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УравнениеСтепень(Команда)
	
	ДобавитьСимволыВНачало = "(";
	ДобавитьСимволыВКонец = ")";
	
	Если НЕ НайтиСтепеньВИероглифах(Ложь, ДобавитьСимволыВНачало, ДобавитьСимволыВКонец) Тогда
		Степень = 0;
		Если НЕ ВвестиЧисло(Степень, НСтр("ru = 'Укажите степень'; en = 'Specify rate'"), 2, 0) Тогда
			Возврат;
		КонецЕсли;
		ДобавитьСимволыВКонец = ДобавитьСимволыВКонец + ДобавитьСтепень(Степень);
	КонецЕсли;
	
	ОбработатьВыделенныйТекст(ДобавитьСимволыВНачало, ДобавитьСимволыВКонец);
КонецПроцедуры

&НаКлиенте
Процедура УравнениеКорень(Команда)

	ДобавитьСимволыВНачало = "√(";
	ДобавитьСимволыВКонец = ")";
	
	Если НЕ НайтиСтепеньВИероглифах(Истина, ДобавитьСимволыВНачало, ДобавитьСимволыВКонец) Тогда
		Степень = 0;
		Если НЕ ВвестиЧисло(Степень, НСтр("ru = 'Укажите степень корня'; en = 'Specify root rate'"), 2, 0) Тогда
			Возврат;
		КонецЕсли;
		ДобавитьСимволыВНачало = ДобавитьСтепень(Степень)+ДобавитьСимволыВНачало;
	КонецЕсли;
	
	ОбработатьВыделенныйТекст(ДобавитьСимволыВНачало, ДобавитьСимволыВКонец);
КонецПроцедуры

&НаКлиенте
Процедура УравнениеРасчитатьВыделенное(Команда)
	Выражение = СокрЛП(СтрЗаменить(Элементы.СтрокаУравнения.ВыделенныйТекст, Символы.ПС, ""));
	Попытка
		
		Расчет = СтрЗаменить(Выражение, Символы.ПС, ""); //превращаю в одну строку
		Расчет = СтрЗаменить(Выражение, " ", ""); //очищаю от пробелов
		Расчет = СтрЗаменить(Выражение, "=", ""); //убираю равно
		Расчет = СтрЗаменить(Выражение, "Pi", "3.1415926535897932"); //Заменяю число Пи
		
		//Преобразую строку из пользовательского в уравнение 1С
		//Расчет = СтрЗаменить(Расчет, ",", "."); //запятые меняю точками
		ЗаменаКорней(Выражение);
		ЗаменаСтепеней(Выражение);
		
		РезультатВычисления = Вычислить(Выражение);
		Если ТипЗнч(РезультатВычисления) <> Тип("Число") Тогда
			Состояние("Calculating error");
		Иначе
			Сообщить(Выражение+ " = " + Окр(РезультатВычисления,5) + ?(Окр(РезультатВычисления,5)=РезультатВычисления, "", "..."), СтатусСообщения.Обычное);
		КонецЕсли;
	Исключение
		Состояние("Calculating error");
	КонецПопытки;
КонецПроцедуры
//----------КНОПКИ------------


//ОБЩАКОВЫЙ калькулятор
//Доработать:
//  распределение поумнее сделать. Какой-нить простенький подбор похожих сумм

&НаКлиенте
Процедура УчастникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущийЭлемент = Элементы.УчастникиУчастник;
		Элемент.ТекущиеДанные.Участник = Элемент.ТекущиеДанные.НомерСтроки;
		Элемент.ТекущиеДанные.КУчастия = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУчастниковПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Распределить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУчастниковПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущиеДанные.Баланс=0 Тогда
		ТаблицаРаспределенияСФильтром.Очистить();
	Иначе
		ЗагрузитьИнтерфейснуюТаблицу(Элемент.ТекущиеДанные.Участник, ?(Элемент.ТекущиеДанные.Баланс>0, Истина, Ложь));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнтерфейснуюТаблицу(Участник, Получатель)
	Если НЕ ПустаяСтрока(Участник) Тогда
		Если Получатель Тогда
			ТаблицаРаспределенияСФильтром.Загрузить(ТаблицаРаспределения.Выгрузить(ТаблицаРаспределения.НайтиСтроки(Новый Структура("Кому", Участник)), "Кто, Сумма"));
			Элементы.ТаблицаРаспределенияКто.Видимость = Истина;
			Элементы.ТаблицаРаспределенияКому.Видимость = Ложь;
			Элементы.ТаблицаРаспределения.Заголовок = НСтр("ru = 'Ему платят'; en = 'To take from'");
		Иначе
			ТаблицаРаспределенияСФильтром.Загрузить(ТаблицаРаспределения.Выгрузить(ТаблицаРаспределения.НайтиСтроки(Новый Структура("Кто", Участник)), "Кому, Сумма"));
			Элементы.ТаблицаРаспределенияКто.Видимость = Ложь;
			Элементы.ТаблицаРаспределенияКому.Видимость = Истина;
			Элементы.ТаблицаРаспределения.Заголовок = НСтр("ru = 'Он платит'; en = 'To pay to'");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Распределить()
	Попытка
		ТаблицаРаспределения.Очистить();
		
		ТаблицаПлательщиков = ТаблицаРаспределения.Выгрузить();
		ТаблицаПолучателей = ТаблицаРаспределения.Выгрузить();
		
		ЗатратыНаОдну = Объект.ТаблицаУчастников.Итог("Потратил")/Объект.ТаблицаУчастников.Итог("КУчастия");
		Элементы.УчастникиБаланс.ТекстПодвала = НСтр("ru = 'Доля: '; en = 'Share: '")+Окр(ЗатратыНаОдну, 2);
		Для Каждого СтрокаУчастников Из Объект.ТаблицаУчастников Цикл
			СтрокаУчастников.Баланс = СтрокаУчастников.Потратил - ЗатратыНаОдну*СтрокаУчастников.КУчастия;
			Если СтрокаУчастников.Баланс < 0 Тогда
				новСТр = ТаблицаПлательщиков.Добавить();
				новСТр.Кто = СтрокаУчастников.Участник;
				новСТр.Сумма = -СтрокаУчастников.Баланс;
			ИначеЕсли СтрокаУчастников.Баланс > 0 Тогда
				новСТр = ТаблицаПолучателей.Добавить();
				новСТр.Кому = СтрокаУчастников.Участник;
				новСТр.Сумма = СтрокаУчастников.Баланс;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаПолучателей.Количество()=1 Тогда //Если получатель один
			Кому = ТаблицаПолучателей[0].Кому;
			ТаблицаПлательщиков.ЗаполнитьЗначения(Кому, "Кому");
			ТаблицаРаспределения.Загрузить(ТаблицаПлательщиков);
		ИначеЕсли ТаблицаПлательщиков.Количество()=1 Тогда  //Если плательщик один
			Кто = ТаблицаПлательщиков[0].Кто;
			ТаблицаПолучателей.ЗаполнитьЗначения(Кто, "Кто");
			ТаблицаРаспределения.Загрузить(ТаблицаПолучателей);
		ИначеЕсли ТаблицаПлательщиков.Количество()>1 И ТаблицаПолучателей.Количество()>1 Тогда //Стенка на стенку
			Для Каждого Плат Из ТаблицаПлательщиков Цикл
				Для Каждого Получ Из ТаблицаПолучателей Цикл
					
					Сумма = Мин(Плат.Сумма, Получ.Сумма);
					
					Если Плат.Сумма=0 Тогда
						Прервать;
					ИначеЕсли Сумма=0 Тогда
						Продолжить;
					КонецЕсли;
					
					новСтр = ТаблицаРаспределения.Добавить();
					новСтр.Кто	= Плат.Кто;
					новСтр.Кому	= Получ.Кому;
					новСтр.Сумма= Сумма;
					
					Плат.Сумма = Плат.Сумма - Сумма;
					Получ.Сумма = Получ.Сумма - Сумма;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Элементы.УчастникиБаланс.ТекстПодвала = "";
	КонецПопытки;
КонецПроцедуры
