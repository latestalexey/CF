//эта обработка запускается на Desktop'e


&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	//ЗАГРУЗКА
	
	//Перейти ~Выгрузка;//отладка
	
	Если Загрузка Тогда
		
		Каталог = КаталогВременныхФайлов(); //в андроиде есть конечный слэш
		ПутьКФайлу = Каталог + "Message_02_01.xml";
		
		Если НЕ ЗагрузитьИзФайла Тогда
			Рез = ПолучитьПочту(ПутьКФайлу);
			Если НЕ Рез Тогда
				Сообщить("Не удалось получить почту. Переходим к выгрузке");
				Перейти ~Выгрузка;
			Иначе
				Сообщить("Почта получена и загружена. Переходим к выгрузке");
			КонецЕсли;
		Иначе
			КопироватьФайл(ФайлЗагрузки, ПутьКФайлу);
		КонецЕсли;
		
	КонецЕсли;
	
	//ВЫГРУЗКА
	~Выгрузка:
	
	Если Выгрузка Тогда
		//шаг 1 формирование файла выгрузки
		ПутьКФайлу = Неопределено;
		ИмяФайла = Неопределено;
		НомерСообщения = 0;
		Рез = ВыгрузитьФайл(ПутьКФайлу, ИмяФайла, НомерСообщения);
		Если НЕ Рез Тогда
			Сообщить("Не удалось выгрузить данные в файл!");
			Возврат;
		Иначе
			Сообщить("Данные выгружены в файл!");
		КонецЕсли;
		
		//шаг 2
		//при успешной выгрузке у нас есть путь к файлу
		//его надо отправить почтой
		
		//Возврат;  //отладка
		
		Рез = ОтправитьФайлПочтой(ПутьКФайлу, ИмяФайла, НомерСообщения);
		Если НЕ Рез Тогда
			Сообщить("Не удалось отправить файл данных!");
			Возврат
		Иначе
			Сообщить("Почта отправлена!");
		КонецЕсли;
		
		//Сообщить("Выгрузки данных и отправка файла выполнены успешно!");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПрофиль(SSL=Истина)
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	// SMTP сервер
	//yandex
	//Профиль.АдресСервераSMTP = "smtp.yandex.ru";
	//Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	//Профиль.ПортSMTP = 25;
	//Профиль.ПользовательSMTP = "n1823244";
	//Профиль.ПарольSMTP = "s1a2t3i4v5";
	
	//qip
	Профиль.АдресСервераSMTP = "smtp.qip.ru";
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	Профиль.ПортSMTP = 25;
	Профиль.ПользовательSMTP = "nicxxxx@qip.ru";
	Профиль.ПарольSMTP = "3221225472trd";
	
	//POP3
	//yandex
	//Если Pop3imap = 1 Тогда
	//	Профиль.АдресСервераIMAP = "imap.yandex.ru";
	//	Профиль.ПарольIMAP = Истина;
	//	Профиль.ПользовательIMAP = "n1823244";
	//	Профиль.ПарольIMAP = "s1a2t3i4v5";
	//	
	//	Профиль.ИспользоватьSSLIMAP = SSLimap;
	//	Если SSLimap Тогда
	//		Профиль.ПортIMAP = "993";
	//	Иначе
	//		Профиль.ПортIMAP = "143";
	//	КонецЕсли;
	//Иначе
	//	// POP3 сервер
	//	Профиль.АдресСервераPOP3 = "pop.yandex.ru";
	//	Профиль.ПортPOP3 = 110;
	//	// Логин пользователя
	//	Профиль.Пользователь = "n1823244";
	//	// Пароль к почтовому ящику
	//	Профиль.Пароль = "s1a2t3i4v5";
	//КонецЕсли;
	
	//qip
	Профиль.АдресСервераPOP3 = "pop.qip.ru";
	Профиль.ПортPOP3 = 110;
	Профиль.Пользователь = "nicxxxx@qip.ru";
	Профиль.Пароль = "3221225472trd";
	
	// Время ожидания выполнения операции в секундах
	Профиль.ВремяОжидания = 50;
	Возврат Профиль;
КонецФункции



//ЗАГРЗУКА

//получение файла почтой
&НаСервере
//Функция ПолучитьФайлПочтой(ИмяФайла, ПутьКфайлу)
&НаСервере
Функция ПолучитьПочту(ПутьКФайлу)
	
	//Перейти ~Конец; //для отладки
	
	Почта = Новый ИнтернетПочта;
	
	Попытка
		Почта.Подключиться(ПолучитьПрофиль(Истина), 
		?(Pop3imap=1, ПротоколИнтернетПочты.IMAP, ПротоколИнтернетПочты.POP3));//без SSL
	Исключение
		Сообщить(ОписаниеОшибки()); 
		Возврат Ложь;
	КонецПопытки;
	
	Заголовки=Почта.ПолучитьЗаголовки();
	Если Заголовки.Количество()=0 Тогда
		//Предупреждение("В почтовом ящике нет входящих сообщений!", ,"Нет сообщений");
		Сообщить("В почтовом ящике нет входящих сообщений!");
		Возврат Ложь;
	КонецЕсли;
	
	// Загрузка сообщений в массив
	Сообщения = Почта.Выбрать(Истина,Заголовки);
	
	МассСервИД = Новый Массив;
	
	ТекДата = Дата(1,1,1);
	Для каждого Сообщение Из Сообщения Цикл
		Если Найти(Сообщение.Тема, "CF Android sync") = 0 Тогда
			Продолжить;
		КонецЕсли;		
		
		//фильтр по дате. Если встретилась дата, большая текущей, то сохраняем файл, иначе - пропускаем, т.к. это более старая версия
		Если ТекДата >= Сообщение.ДатаОтправления Тогда
			Продолжить;
		КонецЕсли;
		
		ТекДата = Сообщение.ДатаОтправления;
		
		Вложения = Сообщение.Вложения;
		Для сч = 0 по Вложения.Количество()-1 Цикл
			
			Попытка
				Вложения.Получить(сч).Данные.Записать(ПутьКФайлу);
				Сообщить("Файл сохранен в "+Строка(ПутьКФайлу));
				
				
				//нужно читать каждый файл, а то документы теряются, пока непонятно почему
				
				Рез = ЗагрузитьДанные(ПутьКФайлу);
				Если НЕ Рез Тогда
					Сообщить("Не удалось загрузить данные. Читаем следующий файл");
					//Перейти ~Выгрузка;
					Продолжить;
				Иначе
					Сообщить("Данные успешно загружены. Читаем следующий файл");
				КонецЕсли;
				
				
			Исключение
				Сообщить("Не удалось сохранить вложение. Обмен прерван! Подробности: "+ОписаниеОшибки());
				Почта.Отключиться();
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
		//МассСервИД.Добавить(Сообщение.Идентификатор[0]);
		МассСервИД.Добавить(Сообщение.ИдентификаторСообщения);
	КонецЦикла; 
	
	Почта.УдалитьСообщения(Сообщения);
	Почта.УдалитьСообщения(МассСервИД);
	
	// отключение
	Почта.Отключиться();
	
	~Конец:
	
	Возврат Истина;

КонецФункции

Функция ЗагрузитьДанные(ПутьКФайлу)
	Попытка	
		//загрузка данных из файла
		Выборка = ПланыОбмена.ОбменСAndroid.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка = ПланыОбмена.ОбменСAndroid.ЭтотУзел() Тогда
				Если Выборка.Код<>"01" Тогда
					Сообщить("Этот узел должен иметь код 01! Обмен не выполнен!");
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		План = ПланыОбмена.ОбменСAndroid.НайтиПоКоду("02"); //соответствует базе на андроид
		
		Если План = ПланыОбмена.ОбменСAndroid.ПустаяСсылка() Тогда
			Узел = ПланыОбмена.ОбменСAndroid.СоздатьУзел();
			Узел.Код = "02";
			Узел.Наименование = "Android";
			Узел.Записать();
			План = Узел.Ссылка;
		КонецЕсли;
		
		ПланОб = План.ПолучитьОбъект();	
		
		Чтение = Новый ЧтениеXML;
		Сообщить("Чтение из файла "+Строка(ПутьКФайлу));
		Попытка
			Чтение.ОткрытьФайл(ПутьКФайлу);
		Исключение
			Сообщить("Не удалось выполнить Чтение.ОткрытьФайл(ПутьКФайлу); Подробности: "+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		Спр="";
		// чтение осуществляется по одному тегу
		
		//самый первый тэг 	<v8msg:Message>
		//Чтение.Прочитать()
		НомерОтправленного = ПланОб.НомерОтправленного;
		НомерПринятого = ПланОб.НомерПринятого;
		
		НачатьТранзакцию();
		
		// чтение осуществляется по одному тегу
		Пока Чтение.Прочитать() Цикл
			// анализируем тип элемента и его имя
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Чтение.Имя="v8msg:Header" Тогда
					//переход к чтение узлов внутре тэга v8msg:Header
					Пока Чтение.Прочитать() Цикл
						Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							Если Чтение.Имя="v8msg:To" Тогда
								//получить текст тэга
								Чтение.Прочитать();
								Если Строка(Чтение.Значение) <> "01" Тогда
									Сообщить("Получатель данных указан неверно! Ожидается 01, пришло значение "+Строка(Чтение.Значение));
									Возврат Ложь;
								КонецЕсли;
							ИначеЕсли Чтение.Имя="v8msg:MessageNo" Тогда
								//номер отправленного сообщения из базы отправителя
								Чтение.Прочитать();
								НомерОтправленного = Число(Чтение.Значение);
							ИначеЕсли Чтение.Имя="v8msg:ReceivedNo" Тогда
								//номер полученного сообщения в базе получателе, т.е. этой
								Чтение.Прочитать();
								НомерПринятого = Число(Чтение.Значение);
							КонецЕсли;
						ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
							//выход из чтения тэга Header
							Если Чтение.Имя="v8msg:Header" Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Чтение.Имя="v8msg:Body" Тогда
					
					//переход к чтение узлов внутре тэга v8msg:Body
					Пока Чтение.Прочитать() Цикл
						Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				//			
							Если Чтение.Имя="CatalogObject.СтатьиДР" Тогда
					
								ЗагрузитьСтатью(Чтение);
								
							ИначеЕсли Чтение.Имя="CatalogObject.Приоритеты" Тогда
					
								ЗагрузитьПриоритет(Чтение);
								
							ИначеЕсли Чтение.Имя="CatalogObject.Счета" Тогда
					
								ЗагрузитьСчет(Чтение);
								
							ИначеЕсли Чтение.Имя="CatalogObject.Валюты" Тогда
					
								ЗагрузитьВалюту(Чтение);
								
							ИначеЕсли Чтение.Имя="InformationRegisterRecordSet.КурсыВалют" Тогда
								
								ЗагрузитьКурсВалюты(Чтение);
															
							ИначеЕсли Чтение.Имя="DocumentObject.Транзакция" Тогда
					
								Если НЕ ЗагрузитьТранзакцию(Чтение) Тогда
									
									ЗаписьЖурналаРегистрации("ПРЕРЫВАНИЕ импорта", УровеньЖурналаРегистрации.Ошибка, , 
									Неопределено, "Импорт данных не выполнен! Отмена транзакции");
									
									ОтменитьТранзакцию();
															
									Возврат Ложь;
									
								КонецЕсли;
								
							КонецЕсли;
						ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
							//выход из чтения тэга Body
							Если Чтение.Имя="v8msg:Body" Тогда
								Прервать;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
				// заполняем наименование созданного ранее элемента
				//Спр.Наименование = Чтение.Значение;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				// требуется записать информацию про клиента
				//Спр.Записать();
			КонецЕсли;
		КонецЦикла;   
		
		//установить номер сообщения в плане обмена. в этой базе будет наоборот, относительно базы на android
		ПланОб.НомерПринятого = НомерОтправленного;	
		ПланОб.Записать();
		
		//удалить регистрацию объектов с номерами меньше или равным номеру принятого ( это номер принятого в базе android)
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланОб.Ссылка, НомерПринятого);
		
		ЗафиксироватьТранзакцию();
		
		ЗаписьЖурналаРегистрации("Импорт завершен", УровеньЖурналаРегистрации.Предупреждение, , 
		Неопределено, "Импорт данных завершен! Фиксация транзакции");
		
		Возврат Истина;
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, , 
		Неопределено, "Ошибка в функции ЗагрузитьДанные(). Подробности: "+ОписаниеОшибки());
		
	КонецПопытки;
КонецФункции

&НаСервере
Функция ЗагрузитьСтатью(Чтение)

	Пока Чтение.Прочитать() Цикл //читается следующий тэг, т.к. в текущем данных нет
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Чтение.Имя = "Ref" Тогда
				Чтение.Прочитать();
				Ref = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "IsFolder" Тогда
				Чтение.Прочитать();
				IsFolder = ?(Чтение.Значение="false", Ложь, Истина);				
			ИначеЕсли Чтение.Имя = "DeletionMark" Тогда
				Чтение.Прочитать();
				DeletionMark = ?(Чтение.Значение="false", Ложь, Истина);
			ИначеЕсли Чтение.Имя = "Parent" Тогда
				Чтение.Прочитать();
				Parent = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "Code" Тогда
				Чтение.Прочитать();
				Code = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "Description" Тогда
				Чтение.Прочитать();
				Description = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "Порядок" Тогда
				Чтение.Прочитать();
				Попытка
					Порядок = Число(Чтение.Значение);
				Исключение
					Порядок = 0;
				КонецПопытки;
			ИначеЕсли Чтение.Имя = "СуммаСбережения" Тогда
				Чтение.Прочитать();
				Попытка
					СуммаСбережения = Число(Чтение.Значение);
				Исключение
					СуммаСбережения = 0;
				КонецПопытки;
			ИначеЕсли Чтение.Имя = "Комментарий" Тогда
				Чтение.Прочитать();
				Комментарий = Чтение.Значение;
				
			ИначеЕсли Чтение.Имя = "СтатьяВозвратаСбережения" Тогда
				Чтение.Прочитать();
				СтатьяВозвратаСбережения = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "СтатьяСбережения" Тогда
				Чтение.Прочитать();
				СтатьяСбережения = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "СтатьяРодитель" Тогда
				Чтение.Прочитать();
				СтатьяРодитель = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "ЗнакДвижения" Тогда
				Чтение.Прочитать();
				Попытка
					ЗнакДвижения = Число(Чтение.Значение);
				Исключение
					ЗнакДвижения = 0;
				КонецПопытки;
			ИначеЕсли Чтение.Имя = "ЭтоСбережение" Тогда
				Чтение.Прочитать();
				ЭтоСбережение = ?(Чтение.Значение="false", Ложь, Истина);
			ИначеЕсли Чтение.Имя = "Приоритет" Тогда
				Чтение.Прочитать();
				Приоритет = Чтение.Значение;//справочник
			КонецЕсли;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			//выход из чтения тэга CatalogObject.СтатьиДоходовРасходов
			Если Чтение.Имя="CatalogObject.СтатьиДоходовРасходов" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Ссылка = Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref));
	//Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
	//	//Продолжить;
	//	Возврат Ложь;
	//КонецЕсли;
	Если НЕ IsFolder Тогда
		Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
			Спр = Ссылка.ПолучитьОбъект();
		Иначе
			Спр = Справочники.СтатьиДоходовРасходов.СоздатьЭлемент();
			Спр.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Спр.ЗнакДвижения = ЗнакДвижения;
		Спр.Код = Code;
		Спр.Комментарий = Комментарий;
		
		Спр.Наименование = Description;
		Спр.ПометкаУдаления = DeletionMark;
		Спр.Порядок = Порядок;
		Спр.Приоритет = Приоритет;
		
		СсылкаРодителя = Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор(Parent));
		Спр.Родитель = СсылкаРодителя;
		//Спр.СтатьяВозвратаСбережения= СтатьяВозвратаСбережения;
		//Спр.СтатьяРодитель = СтатьяРодитель;
		//Спр.СтатьяСбережения = СтатьяСбережения;
		Спр.СуммаСбережения = СуммаСбережения;
		
		Спр.ЭтоСбережение = ЭтоСбережение;
	Иначе
		Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
			Спр = Ссылка.ПолучитьОбъект();
		Иначе
			Спр = Справочники.СтатьиДоходовРасходов.СоздатьГруппу();
			Спр.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Спр.Код = Code;
		Спр.Наименование = Description;
		Спр.Порядок = Порядок;
		Спр.ЗнакДвижения = ЗнакДвижения;
		СсылкаРодителя = Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор(Parent));
		Спр.Родитель = СсылкаРодителя;
		
	КонецЕсли;
	Спр.ОбменДанными.Загрузка = Истина;
	Спр.Записать();	

КонецФункции

&НаСервере
Функция ЗагрузитьПриоритет(Чтение)

	IsFolder = Ложь;
	
	Пока Чтение.Прочитать() Цикл //читается следующий тэг, т.к. в текущем данных нет
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПорядокСортировки = 0;
			ЗнакДвижения = 0;
			
			Если Чтение.Имя = "Ref" Тогда
				Чтение.Прочитать();
				Ref = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "IsFolder" Тогда
				Чтение.Прочитать();
				IsFolder = ?(Чтение.Значение="false", Ложь, Истина);
			ИначеЕсли Чтение.Имя = "DeletionMark" Тогда
				Чтение.Прочитать();
				DeletionMark = ?(Чтение.Значение="false", Ложь, Истина);
			ИначеЕсли Чтение.Имя = "Parent" Тогда
				Чтение.Прочитать();
				Parent = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "Code" Тогда
				Чтение.Прочитать();
				Code = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "Description" Тогда
				Чтение.Прочитать();
				Description = Чтение.Значение;
				
			ИначеЕсли Чтение.Имя = "ПорядокСортировки" Тогда
				Чтение.Прочитать();
				Попытка
					ПорядокСортировки = Число(Чтение.Значение);
				Исключение
					ПорядокСортировки = 0;
				КонецПопытки;
			ИначеЕсли Чтение.Имя = "ЗнакДвижения" Тогда
				Чтение.Прочитать();
				Попытка
					ЗнакДвижения = Число(Чтение.Значение);
				Исключение
					ЗнакДвижения = 0;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			//выход из чтения тэга CatalogObject.Приоритеты
			Если Чтение.Имя="CatalogObject.Приоритеты" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Ссылка = Справочники.Приоритеты.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref));
	//Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
	//	//Продолжить;
	//	Возврат Ложь;
	//КонецЕсли;
	Если НЕ IsFolder Тогда
		Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
			Спр = Ссылка.ПолучитьОбъект();
		Иначе
			Спр = Справочники.Приоритеты.СоздатьЭлемент();
			Спр.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Спр.Код = Code;
		Спр.Наименование = Description;
		Спр.ПометкаУдаления = DeletionMark;
		Спр.ЗнакДвижения = ЗнакДвижения;
		Спр.ПорядокСортировки = ПорядокСортировки;
	Иначе
		//иерархии в этом справочнике нет
	КонецЕсли;
	Спр.ОбменДанными.Загрузка = Истина;
	Спр.Записать();	

КонецФункции

&НаСервере
Функция ЗагрузитьСчет(Чтение)
	
	Валюта = Неопределено;
	РасчетОстатковБюджет = Ложь;

	Пока Чтение.Прочитать() Цикл //читается следующий тэг, т.к. в текущем данных нет
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Чтение.Имя = "Ref" Тогда
				Чтение.Прочитать();
				Ref = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "IsFolder" Тогда
				Чтение.Прочитать();
				IsFolder = ?(Чтение.Значение="false", Ложь, Истина);
			ИначеЕсли Чтение.Имя = "DeletionMark" Тогда
				Чтение.Прочитать();
				DeletionMark = ?(Чтение.Значение="false", Ложь, Истина);
			ИначеЕсли Чтение.Имя = "Parent" Тогда
				Чтение.Прочитать();
				Parent = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "Code" Тогда
				Чтение.Прочитать();
				Code = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "Description" Тогда
				Чтение.Прочитать();
				Description = Чтение.Значение;
				
			ИначеЕсли Чтение.Имя = "Валюта" Тогда	
				Чтение.Прочитать();
				Валюта = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "РасчетОстатковБюджет" Тогда
				Чтение.Прочитать();
				РасчетОстатковБюджет = ?(Чтение.Значение="false", Ложь, Истина);
			КонецЕсли;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			//выход из чтения тэга CatalogObject.Кошельки
			Если Чтение.Имя="CatalogObject.Кошельки" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Ссылка = Справочники.Кошельки.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref));
	//Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
	//	//Продолжить;
	//	Возврат Ложь;
	//КонецЕсли;
	Если НЕ IsFolder Тогда
		Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
			Спр = Ссылка.ПолучитьОбъект();
		Иначе
			Спр = Справочники.Кошельки.СоздатьЭлемент();
			Спр.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Спр.Код = Code;
		Спр.Наименование = Description;
		Спр.ПометкаУдаления = DeletionMark;
		СсылкаРодителя = Справочники.Кошельки.ПолучитьСсылку(Новый УникальныйИдентификатор(Parent));
		Спр.Родитель = СсылкаРодителя;
		Если Валюта <> Неопределено Тогда
			Спр.Валюта = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(Валюта));
		КонецЕсли;
		Спр.РасчетОстатковБюджет = РасчетОстатковБюджет;
	Иначе
		Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
			Спр = Ссылка.ПолучитьОбъект();
		Иначе
			Спр = Справочники.Кошельки.СоздатьГруппу();
			Спр.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Спр.Код = Code;
		Спр.Наименование = Description;
		Спр.ПометкаУдаления = DeletionMark;
		СсылкаРодителя = Справочники.Кошельки.ПолучитьСсылку(Новый УникальныйИдентификатор(Parent));
		Спр.Родитель = СсылкаРодителя;
	КонецЕсли;
	Спр.ОбменДанными.Загрузка = Истина;
	Спр.Записать();	

КонецФункции

&НаСервере
Функция ЗагрузитьВалюту(Чтение)

	IsFolder = Ложь;
	
	Пока Чтение.Прочитать() Цикл //читается следующий тэг, т.к. в текущем данных нет
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Чтение.Имя = "Ref" Тогда
				Чтение.Прочитать();
				Ref = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "IsFolder" Тогда
				Чтение.Прочитать();
				IsFolder = ?(Чтение.Значение="false", Ложь, Истина);
			ИначеЕсли Чтение.Имя = "DeletionMark" Тогда
				Чтение.Прочитать();
				DeletionMark = ?(Чтение.Значение="false", Ложь, Истина);
			ИначеЕсли Чтение.Имя = "Parent" Тогда
				Чтение.Прочитать();
				Parent = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "Code" Тогда
				Чтение.Прочитать();
				Code = Чтение.Значение;
			ИначеЕсли Чтение.Имя = "Description" Тогда
				Чтение.Прочитать();
				Description = Чтение.Значение;
				
			ИначеЕсли Чтение.Имя = "НаименованиеПолное" Тогда
			ИначеЕсли Чтение.Имя = "ОсновнаяВалюта" Тогда
			ИначеЕсли Чтение.Имя = "ЗагружаетсяИзИнтернета" Тогда
				Чтение.Прочитать();
				ЗагружаетсяИзИнтернета = ?(Чтение.Значение="false", Ложь, Истина);
			ИначеЕсли Чтение.Имя = "Наценка" Тогда
			//	Чтение.Прочитать();
			//	Попытка
			//		ПорядокСортировки = Число(Чтение.Значение);
			//	Исключение
			//		ПорядокСортировки = 0;
			//	КонецПопытки;
			//ИначеЕсли Чтение.Имя = "ЗнакДвижения" Тогда
			//	Чтение.Прочитать();
			//	Попытка
			//		ЗнакДвижения = Число(Чтение.Значение);
			//	Исключение
			//		ЗнакДвижения = 0;
			//	КонецПопытки;
			КонецЕсли;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			//выход из чтения тэга CatalogObject.Валюты
			Если Чтение.Имя="CatalogObject.Валюты" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Ссылка = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref));
	//Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
	//	//Продолжить;
	//	Возврат Ложь;
	//КонецЕсли;
	Если НЕ IsFolder Тогда
		Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
			Спр = Ссылка.ПолучитьОбъект();
		Иначе
			Спр = Справочники.Валюты.СоздатьЭлемент();
			Спр.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Спр.Код = Code;
		Спр.Наименование = Description;
		Спр.ПометкаУдаления = DeletionMark;
		Спр.ЗагружаетсяИзИнтернета = ЗагружаетсяИзИнтернета;
	Иначе
		//иерархии в этом справочнике нет
	КонецЕсли;
	Спр.ОбменДанными.Загрузка = Истина;
	Спр.Записать();	

КонецФункции

&НаСервере
Функция ЗагрузитьКурсВалюты(Чтение)

	ОтборПериод = Неопределено;
	ОтборВалюта = Неопределено;
	Период = Неопределено;
	Валюта = Неопределено;
	Курс = 0;
	Кратность = 0;
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Чтение.Имя = "Filter" Тогда
				
				Пока Чтение.Прочитать() Цикл
					
					Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						
						Если Чтение.Имя = "Period" Тогда
							Чтение.Прочитать();
							ОтборПериод = Чтение.Значение;
						ИначеЕсли Чтение.Имя = "Валюта" Тогда
							Чтение.Прочитать();
							ОтборВалюта = Чтение.Значение;
						КонецЕсли;
					ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
						Если Чтение.Имя="Filter" Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
		        КонецЦикла;
				
			ИначеЕсли Чтение.Имя = "Records" Тогда
				//это коллекция, в ней может быть несколько строк, но судя по структуре файла - там всегда одна строка
				Чтение.Прочитать();//переход к тэгу <Record>
				
				Пока Чтение.Прочитать() Цикл
					Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						
						Если Чтение.Имя = "Period" Тогда
							Чтение.Прочитать();
							Период = Чтение.Значение;
						ИначеЕсли Чтение.Имя = "Валюта" Тогда
							Чтение.Прочитать();
							Валюта = Чтение.Значение;
						ИначеЕсли Чтение.Имя = "Курс" Тогда
							Чтение.Прочитать();
							Попытка
								Курс = Число(Чтение.Значение);
							Исключение
								Курс = 0;
							КонецПопытки;
						ИначеЕсли Чтение.Имя = "Кратность" Тогда
							Чтение.Прочитать();
							Попытка
								Кратность = Число(Чтение.Значение);
							Исключение
								Кратность = 0;
							КонецПопытки;
						КонецЕсли;
						
					ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
						Если Чтение.Имя="Record" Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;	
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		
			Если Чтение.Имя="InformationRegisterRecordSet.КурсыВалют" Тогда
				Прервать;
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
	ОтборПериод = Дата(Лев(ОтборПериод,4), Сред(ОтборПериод,6,2), Сред(ОтборПериод,9,2), 
	Сред(ОтборПериод,12,2), Сред(ОтборПериод,15,2), Сред(ОтборПериод,18,2)); //2014-05-15T00:00:00
	
	Период = Дата(Лев(Период,4), Сред(Период,6,2), Сред(Период,9,2), 
	Сред(Период,12,2), Сред(Период,15,2), Сред(Период,18,2)); //2014-05-15T00:00:00
	
	НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ОтборПериод);
	НаборЗаписей.Отбор.Валюта.Установить(Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(ОтборВалюта)));
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Период;
	НоваяЗапись.Валюта = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(Валюта));
	НоваяЗапись.Курс = Курс;
	НоваяЗапись.Кратность = Кратность;
	НаборЗаписей.Записать();
	
		
КонецФункции

&НаСервере
Функция ЗагрузитьТранзакцию(Чтение)
    Попытка
		ВидТранзакции = 0;
		Счет = Неопределено;
		СчетПриемник = Неопределено;
		СтатьяДР = Неопределено;
		Комментарий = "";
		УчитыватьКомиссию = Ложь;
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("СтатьяДР");
		ТЗ.Колонки.Добавить("Сумма");
		ТЗ.Колонки.Добавить("СодержаниеОперации");
		ТЗ.Колонки.Добавить("Проект");
		
		Пока Чтение.Прочитать() Цикл //читается следующий тэг, т.к. в текущем данных нет
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Если Чтение.Имя = "Ref" Тогда
					Чтение.Прочитать();
					Ref = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "DeletionMark" Тогда
					Чтение.Прочитать();
					DeletionMark = ?(Чтение.Значение="false", Ложь, Истина);
				ИначеЕсли Чтение.Имя = "Date" Тогда
					Чтение.Прочитать();
					ДатаДок = Чтение.Значение;//<Date>2014-05-16T21:35:27</Date>
					ДатаДок = Дата(Лев(ДатаДок, 4), Сред(ДатаДок,6,2), Сред(ДатаДок, 9,2));
				ИначеЕсли Чтение.Имя = "Number" Тогда
					Чтение.Прочитать();
					Number = Чтение.Значение;
					
					
				ИначеЕсли Чтение.Имя = "ЭтоПрогноз" Тогда
					Чтение.Прочитать();
					ЭтоПрогноз = ?(Чтение.Значение="false", Ложь, Истина);
				ИначеЕсли Чтение.Имя = "ВидТранзакции" Тогда
					Чтение.Прочитать();
					Попытка
						ВидТранзакции = Число(Чтение.Значение);
					Исключение
						ВидТранзакции = 0;
					КонецПопытки;
				ИначеЕсли Чтение.Имя = "Счет" Тогда
					Чтение.Прочитать();
					Счет = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "СчетПриемник" Тогда
					Чтение.Прочитать();
					СчетПриемник = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "СтатьяДР" Тогда
					Чтение.Прочитать();
					СтатьяДР = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "Сумма" Тогда
					Чтение.Прочитать();
					Попытка
						Сумма = Число(Чтение.Значение);
					Исключение
						Сумма = 0;
					КонецПопытки;
				ИначеЕсли Чтение.Имя = "Комментарий" Тогда
					Чтение.Прочитать();
					Комментарий = Чтение.Значение;
					
				ИначеЕсли Чтение.Имя = "Валюта" Тогда
					Чтение.Прочитать();
					Валюта = Чтение.Значение;
					
				ИначеЕсли Чтение.Имя = "Курс" Тогда
					Чтение.Прочитать();
					Попытка
						Курс = Число(Чтение.Значение);
					Исключение
						Курс = 0;
					КонецПопытки;
				ИначеЕсли Чтение.Имя = "Кратность" Тогда
					Чтение.Прочитать();
					Попытка
						Кратность = Число(Чтение.Значение);
					Исключение
						Кратность = 0;
					КонецПопытки;
					
				ИначеЕсли Чтение.Имя = "ИспользоватьТЧ" Тогда
					Чтение.Прочитать();
					ИспользоватьТЧ = ?(Чтение.Значение="false", Ложь, Истина);
					
				ИначеЕсли Чтение.Имя = "Проект" Тогда
					Чтение.Прочитать();
					Проект = Чтение.Значение;
					
				ИначеЕсли Чтение.Имя = "НеПроводитьОвер" Тогда
					Чтение.Прочитать();
					НеПроводитьОвер = ?(Чтение.Значение="false", Ложь, Истина);
					
					
				ИначеЕсли Чтение.Имя = "ГашениеКредита" Тогда
					Чтение.Прочитать();
					ГашениеКредита = ?(Чтение.Значение="false", Ложь, Истина);
					
				ИначеЕсли Чтение.Имя = "СтатьяДРГашение" Тогда
					Чтение.Прочитать();
					СтатьяДРГашение = Чтение.Значение;
					
				ИначеЕсли Чтение.Имя = "УчитыватьКомиссию" Тогда
					Чтение.Прочитать();
					УчитыватьКомиссию = ?(Чтение.Значение="false", Ложь, Истина);
					
				ИначеЕсли Чтение.Имя = "СуммаКомиссии" Тогда
					Чтение.Прочитать();
					Попытка
						СуммаКомиссии = Число(Чтение.Значение);
					Исключение
						СуммаКомиссии = 0;
					КонецПопытки;
					
				ИначеЕсли Чтение.Имя = "СтатьяДРКомиссия" Тогда
					Чтение.Прочитать();
					СтатьяДРКомиссия = Чтение.Значение;
					
				ИначеЕсли Чтение.Имя = "ТЧСтатьиДР" Тогда
					//Чтение.Прочитать();//переход к строке таб части (тэг ROW)
					
					Пока Чтение.Прочитать() Цикл
						
						Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
							Если Чтение.Имя = "Row" Тогда
								
								НовСтр = ТЗ.Добавить();
								
								Пока Чтение.Прочитать() Цикл
									Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
										Если Чтение.Имя = "СтатьяДР" Тогда
											Чтение.Прочитать();
											НовСтр.СтатьяДР = Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор(Чтение.Значение));
										ИначеЕсли Чтение.Имя = "Сумма" Тогда
											Чтение.Прочитать();
											Попытка
												НовСтр.Сумма = Число(Чтение.Значение);
											Исключение
												НовСтр.Сумма = 0;
											КонецПопытки;
										ИначеЕсли Чтение.Имя = "СодержаниеОперации" Тогда
											Чтение.Прочитать();
											НовСтр.СодержаниеОперации = Чтение.Значение;
										ИначеЕсли Чтение.Имя = "Проект" Тогда
											Чтение.Прочитать();
											НовСтр.Проект = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(Чтение.Значение));
											
										КонецЕсли;
									ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда	
										Если Чтение.Имя = "Row" Тогда
											Прервать;
										КонецЕсли;
										
									КонецЕсли;
								КонецЦикла;
								
								
							КонецЕсли;
							
						ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда	
							Если Чтение.Имя = "ТЧСтатьиДР" Тогда
								Прервать;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				//выход из чтения тэга CatalogObject.Валюты
				Если Чтение.Имя="DocumentObject.Транзакция" Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ВидТранзакции = 0 Тогда
			Ссылка = Документы.ПоступлениеСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref));
		ИначеЕсли ВидТранзакции = 1 Тогда
			Ссылка = Документы.РасходСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref));
		ИначеЕсли ВидТранзакции = 2 Тогда
			Ссылка = Документы.ПеремещениеСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
			Док = Ссылка.ПолучитьОбъект();
		Иначе
			Если ВидТранзакции = 0 Тогда
				Док = Документы.ПоступлениеСредств.СоздатьДокумент();
			ИначеЕсли ВидТранзакции = 1 Тогда
				Док = Документы.РасходСредств.СоздатьДокумент();
			ИначеЕсли ВидТранзакции = 2 Тогда
				Док = Документы.ПеремещениеСредств.СоздатьДокумент();
			КонецЕсли;
			Док.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		
		Док.ЭтоПрогноз = ЭтоПрогноз;
		Док.Сумма = Сумма;
		Док.Валюта = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(Валюта));
		Док.Курс = Курс;
		Док.Кратность = Кратность;
		
		Если Счет <> Неопределено Тогда
			Док.Кошелек = Справочники.Кошельки.ПолучитьСсылку(Новый УникальныйИдентификатор(Счет));
		КонецЕсли;
		Если СтатьяДР <> Неопределено Тогда
			Док.СтатьяДР = Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтатьяДР));
		КонецЕсли;
		Док.Сумма = Сумма;
		
		Если ВидТранзакции = 0 Тогда
			
			Док.ГашениеКредита = ГашениеКредита;
			Док.СтатьяДРГашение = СтатьяДРГашение;
			
		ИначеЕсли ВидТранзакции = 1 Тогда
			
			Док.СуммыВТабЧасти = ИспользоватьТЧ;
			Док.Проект = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(Проект));
			Док.НеПроводитьОвер = НеПроводитьОвер;
			
			Если ИспользоватьТЧ Тогда
				Док.ДоходыРасходы.Очистить();
				Для Каждого Стр Из ТЗ ЦИкл
					НовСтр = Док.ДоходыРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ВидТранзакции = 2 Тогда
			
			Если СчетПриемник <> Неопределено Тогда
				Док.КошелекПриемник = Справочники.Кошельки.ПолучитьСсылку(Новый УникальныйИдентификатор(СчетПриемник));
			КонецЕсли;
			
			Док.УчитыватьКомиссию = УчитыватьКомиссию;
			Если УчитыватьКомиссию Тогда
				Док.СуммаКомиссии = СуммаКомиссии;
				Док.СтатьяДРКомиссия = Справочники.СтатьиДоходовРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтатьяДРКомиссия));
			КонецЕсли;
		КонецЕсли;
		
		Док.Дата = ДатаДок;
		Док.Номер = Number;
		Док.ПометкаУдаления = DeletionMark;
		Док.Комментарий = Комментарий;
		
		//Док.ОбменДанными.Загрузка = Истина;
		//Док.Записать();
		//Док.ОбменДанными.Загрузка = Ложь;
		Док.ДополнительныеСвойства.Вставить("НеРегистрироватьВПланеОбмена", Истина);
		Если НЕ DeletionMark Тогда
			Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Иначе
			Попытка
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Док.Записать();	
			КонецПопытки;
		КонецЕсли;
		Возврат Истина;
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка импорта", УровеньЖурналаРегистрации.Ошибка, , 
		ссылка, "Ошибка в функции ЗагрузитьТранзакцию(). НомерДокумента: "+Number+" Подробности: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки
	
КонецФункции









//ВЫГРЗУКА

//формирование файла выгрузки
&НаСервере
Функция ВыгрузитьФайл(ПутьКФайлу, ИмяФайла, НомерСообщения)
	
	
	//Возврат Ложь;
	//Тхт = Новый ЗаписьТекста;

	//сначала поиск нужного узла
	Получатель = Неопределено;
	Выборка = ПланыОбмена.ОбменСAndroid.Выбрать();
	Пока Выборка.Следующий() Цикл
		//узлов должно быть только 2 - центральный (эта база) и периферия - база на android
		Если Выборка.Код = "02" Тогда
			Получатель = Выборка.Ссылка;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	Если Получатель = Неопределено Тогда
		//не нашли узел база CF 2.0.0, выгрузить данные невозможно
		Возврат Ложь;
	КонецЕсли;
	
	Каталог = КаталогВременныхФайлов();
	 // Сформировать имя временного файла
	ИмяФайла =   "Message" 
					+ СокрЛП(ПланыОбмена.ОбменСAndroid.ЭтотУзел().Код) + "_" + 
					СокрЛП(Получатель.Код) + ".xml";
	ПутьКФайлу = Каталог +?(Прав(Каталог, 1) = "\","", "\")+ ИмяФайла;
	
	//Сообщить(ИмяФайла);
	
	// Создать объект записи XML
	// *** Запись XML-документов
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	// *** Инфраструктура сообщений
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Получатель);
	Сообщить("Номер исходящего сообщения: " + ЗаписьСообщения.НомерСообщения);
	// Получить выборку измененных данных
	// *** Механизм регистрации изменений
	
	НомерСообщения = ЗаписьСообщения.НомерСообщения;//для возврата
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Получатель,ЗаписьСообщения.НомерСообщения);
	Пока ВыборкаИзменений.Следующий() Цикл
		// Записать данные в сообщение
		// *** XML-сериализация
		ЗаписатьXML(ЗаписьXML, ВыборкаИзменений.Получить());
	КонецЦикла;
	
	//удаление документов в базе на андроиде, непосредственное
	Если УдалитьДокументыНаAndroid Тогда
		Если ЗначениеЗаполнено(Период.ДатаНачала) и
			ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			
			Если НЕ Период.ДатаНачала>Период.ДатаОкончания Тогда
				
				Выборка = Документы.ПеремещениеСредств.Выбрать(Период.ДатаНачала, Период.ДатаОкончания);
				Пока Выборка.Следующий() Цикл
					 ВыгружаемыйОбъект = Новый УдалениеОбъекта(Выборка.Ссылка);
					 ЗаписатьXML(ЗаписьXML, ВыгружаемыйОбъект);
				КонецЦикла;
				Выборка = Документы.ПоступлениеСредств.Выбрать(Период.ДатаНачала, Период.ДатаОкончания);
				Пока Выборка.Следующий() Цикл
					 ВыгружаемыйОбъект = Новый УдалениеОбъекта(Выборка.Ссылка);
					 ЗаписатьXML(ЗаписьXML, ВыгружаемыйОбъект);
				КонецЦикла;
				Выборка = Документы.РасходСредств.Выбрать(Период.ДатаНачала, Период.ДатаОкончания);
				Пока Выборка.Следующий() Цикл
					 ВыгружаемыйОбъект = Новый УдалениеОбъекта(Выборка.Ссылка);
					 ЗаписатьXML(ЗаписьXML, ВыгружаемыйОбъект);
				КонецЦикла;
					
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	
	//бюджет. План. Факт.
	Если ВыгрузитьБюджет Тогда
		
		//для выгрузки факта бюджета
		ДЗ = ОбщийМодуль1Сервер.СоздатьДеревоБДР();
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДеревоБДРФорма",ДЗ);
		СтруктураПараметров.Вставить("Объект",Бюджет);
		СтруктураПараметров.Вставить("НачальныйОстатокПлан",Бюджет.НачальныйОстаток);
		СтруктураПараметров.Вставить("НачальныйОстатокФакт",Бюджет.НачальныйОстаток);
		СтруктураПараметров.Вставить("НачПериода",НачалоГода(Бюджет.Дата));
		СтруктураПараметров.Вставить("КонПериода",КонецГода(Бюджет.Дата));
		СтруктураПараметров.Вставить("БюджетФакт",Неопределено);
		ОбщийМодуль1Сервер.ЗаполнитьДеревоИзСправочникаСервер(СтруктураПараметров);
		
		Если ЗначениеЗаполнено(Бюджет) Тогда
			НаборЗаписей = РегистрыНакопления.БДР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Бюджет);
			НаборЗаписей.Прочитать();
			//получить ТЗ набора записей
			ТЗ=НаборЗаписей.Выгрузить();
			ТЗ.Очистить();
			ТЗ.Индексы.Добавить("СтатьяДоходовРасходов, Период");
			//добавить в набор статьи из справочника
			Выборка = Справочники.СтатьиДоходовРасходов.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				Для сч = 1 по 12 Цикл
					НовСтр = ТЗ.Добавить();
					НовСтр.СтатьяДоходовРасходов = Выборка.Ссылка;
					НовСтр.Период = Дата(Год(Бюджет.Дата), сч, 01);
				КонецЦикла;
			КонецЦикла;
			//добавить план в ТЗ
			Для Каждого Стр Из НаборЗаписей Цикл
				ПоискСтрок = ТЗ.НайтиСтроки(Новый Структура("СтатьяДоходовРасходов, Период", Стр.СтатьяДоходовРасходов, Стр.Период));	
				Если ПоискСтрок.Количество()>0 Тогда
					ПоискСтрок[0]["СуммаПлан"] = Стр.СуммаПлан;
				КонецЕсли;
			КонецЦикла;			
			
			//добавить факт
			Для Каждого Стр Из ТЗ Цикл
				ПоискСтрок = ДЗ.Строки.НайтиСтроки(Новый Структура("СтатьяДР", Стр.СтатьяДоходовРасходов), Истина);	
				Если ПоискСтрок.Количество()>0 Тогда
					Стр.СуммаФакт = ПоискСтрок[0]["Факт"+Месяц(Стр.Период)];
				КонецЕсли;
			КонецЦикла;
			//удалить строки, где план и факт = 0
			//флаг на форме определяет, что не надо удалять, а то если статья обнулилась, то андроид об  этом не узнает
			Если НЕ ВесьБюджет Тогда
				Для сч = -(ТЗ.Количество()-1) по 0 Цикл
					Если ТЗ.Получить(-сч).СуммаПлан = 0 И ТЗ.Получить(-сч).СуммаФакт = 0 Тогда
						ТЗ.Удалить(-сч);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//оставить только текущий месяц если включен флажок на форме
			Если ТолькоТекущийМесяц Тогда
				Для сч = -(ТЗ.Количество()-1) по 0 Цикл
					Если ТЗ.Получить(-сч).Период <> НачалоМесяца(ТекущаяДата()) Тогда
						ТЗ.Удалить(-сч);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			НаборЗаписей.Загрузить(ТЗ);
			//02 06 14  было
			//ЗаписатьXML(ЗаписьXML, НаборЗаписей);
			//стало
			//альтернативный метод записи бюджета. чтобы уменьшить объем, а то почта не уходит с десктопа
			ЗаписьXML.ЗаписатьНачалоЭлемента("AccumulationRegisterRecordSet.БДР");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Filter");
			ЗаписатьXML(ЗаписьXML, Бюджет.УникальныйИдентификатор(), "Recorder");
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Records");
			Для Каждого Стр Из ТЗ Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
				ЗаписатьXML(ЗаписьXML, Стр.Период, "Period");
				ЗаписатьXML(ЗаписьXML, Стр.СтатьяДоходовРасходов.УникальныйИдентификатор(), "СтатьяДоходовРасходов");
				ЗаписатьXML(ЗаписьXML, Стр.СуммаПлан, "СуммаПлан");
				ЗаписатьXML(ЗаписьXML, Стр.СуммаФакт, "СуммаФакт");
				ЗаписьXML.ЗаписатьКонецЭлемента();//record
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();//records
			ЗаписьXML.ЗаписатьКонецЭлемента();//
		КонецЕсли;
		//остатки бюджета
		ЗаписьXML.ЗаписатьНачалоЭлемента("НачальныеОстаткиБюджета");
		ТекД = НачалоГода(Бюджет.Дата);
		Для сч = 1 по 12 Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("НачальныйОстаток");
			ЗаписатьXML(ЗаписьXML, ТекД, "ПериодБ");
			ЗаписатьXML(ЗаписьXML, ДЗ.Строки[0]["План"+сч], "СуммаПлан");
			ЗаписатьXML(ЗаписьXML, ДЗ.Строки[0]["Факт"+сч], "СуммаФакт");
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ТекД = ДобавитьМесяц(ТекД, 1);
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
				
	//конец
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	
	Возврат Истина;
	
КонецФункции

//отправка файла почтой
&НаСервере
Функция ОтправитьФайлПочтой(ПутьКФайлу, ИмяФайла, НомерСообщения)
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(ПолучитьПрофиль(Ложь),
		?(Pop3imap=1, ПротоколИнтернетПочты.IMAP, ПротоколИнтернетПочты.POP3));//Ложь значит без SSL
	Исключение
		Сообщить(ОписаниеОшибки()); 
		Возврат Ложь;
	КонецПопытки;
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	
	//Сообщение.Вложения.Добавить(Новый ДвоичныеДанные(ПутьКФайлу), ИмяФайла);
	
	
	//Сообщение.Отправитель 	= "n1823244@yandex.ru";
	Сообщение.Отправитель 	= "nicxxxx@qip.ru";
	Сообщение.ИмяОтправителя= "CF Desktop";
	ПочтовыеАдреса 			= Сообщение.Получатели;
	ПочтовыйАдрес 			= ПочтовыеАдреса.Добавить();
	//ПочтовыйАдрес.Адрес 	= "vstrzjechek@yandex.ru";
	ПочтовыйАдрес.Адрес 	= "1823244@qip.ru";
	Сообщение.Тема 			= "CF Android sync"; 
	
	
	Если ТелоИлиВложение = 0 Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ПутьКФайлу);
		ИнтернетТекстПочтовогоСообщения = Сообщение.Тексты.Добавить();
		//ИнтернетТекстПочтовогоСообщения.Текст = "Номер сообщения = "+Строка(НомерСообщения);
		ИнтернетТекстПочтовогоСообщения.Текст = Текст.ПолучитьТекст();
		ИнтернетТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Иначе
		
		ДД = Новый ДвоичныеДанные(ПутьКФайлу);
		Если АрхивироватьВложение Тогда
			Зип = Новый ЗаписьZipФайла(ПутьКФайлу+".zip",,,МетодСжатияZIP.Сжатие,УровеньСжатияZIP.Максимальный);
			Зип.Добавить(ПутьКФайлу);
			Зип.Записать();
			//Вложение.Данные = Новый ДвоичныеДанные(ПутьКФайлу+".zip");
			Вложение = Сообщение.Вложения.Добавить(ПутьКФайлу+".zip");
		Иначе
			//Вложение.Данные = Новый ДвоичныеДанные(ПутьКФайлу);
			Вложение = Сообщение.Вложения.Добавить(ПутьКФайлу);
		КонецЕсли;
		
	КонецЕсли;	
	
	Попытка
		// Пытаемся послать письмо
		Почта.Послать(Сообщение);
	Исключение
		Сообщить(ОписаниеОшибки()); 
		Возврат Ложь;
	КонецПопытки;
	// отключение
	Почта.Отключиться(); 	
	Возврат Истина;
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//ТолькоТекущийМесяц=Истина;
	//Элементы.ТолькоТекущийМесяц.Доступность = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Текст = "ru = ""Текст""; en = ""Text""";
	Фильтр = НСтр(Текст)+"(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ФайлЗагрузки = ДиалогОткрытияФайла.ВыбранныеФайлы[0];
		//МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		//Для Каждого ИмяФайла Из МассивФайлов Цикл
		//	ВыбФайл = Новый Файл(ИмяФайла);
		//	Текст = "ru = ""; Размер = ""; en = ""; Size = """;
		//	Сообщить(ИмяФайла+НСтр(Текст)+ВыбФайл.Размер());
		//КонецЦикла;
	Иначе
	    Текст = "ru = ""Файл не выбран!""; en = ""File is not selected!""";
	    Предупреждение(НСтр(Текст));
	КонецЕсли;
	
КонецПроцедуры

